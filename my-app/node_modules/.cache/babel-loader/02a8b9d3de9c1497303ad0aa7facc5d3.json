{"ast":null,"code":"import { fromJson, toJson, identity, equals, inherit, map, extend, pick } from '../common/common';\nimport { isDefined, isNullOrUndefined } from '../common/predicates';\nimport { is } from '../common/hof';\nimport { services } from '../common/coreservices';\nimport { ParamType } from './paramType';\n/**\n * A registry for parameter types.\n *\n * This registry manages the built-in (and custom) parameter types.\n *\n * The built-in parameter types are:\n *\n * - [[string]]\n * - [[path]]\n * - [[query]]\n * - [[hash]]\n * - [[int]]\n * - [[bool]]\n * - [[date]]\n * - [[json]]\n * - [[any]]\n *\n * To register custom parameter types, use [[UrlConfig.type]], i.e.,\n *\n * ```js\n * router.urlService.config.type(customType)\n * ```\n */\n\nvar ParamTypes =\n/** @class */\nfunction () {\n  function ParamTypes() {\n    this.enqueue = true;\n    this.typeQueue = [];\n    this.defaultTypes = pick(ParamTypes.prototype, ['hash', 'string', 'query', 'path', 'int', 'bool', 'date', 'json', 'any']); // Register default types. Store them in the prototype of this.types.\n\n    var makeType = function (definition, name) {\n      return new ParamType(extend({\n        name: name\n      }, definition));\n    };\n\n    this.types = inherit(map(this.defaultTypes, makeType), {});\n  }\n\n  ParamTypes.prototype.dispose = function () {\n    this.types = {};\n  };\n  /**\n   * Registers a parameter type\n   *\n   * End users should call [[UrlMatcherFactory.type]], which delegates to this method.\n   */\n\n\n  ParamTypes.prototype.type = function (name, definition, definitionFn) {\n    if (!isDefined(definition)) return this.types[name];\n    if (this.types.hasOwnProperty(name)) throw new Error(\"A type named '\" + name + \"' has already been defined.\");\n    this.types[name] = new ParamType(extend({\n      name: name\n    }, definition));\n\n    if (definitionFn) {\n      this.typeQueue.push({\n        name: name,\n        def: definitionFn\n      });\n      if (!this.enqueue) this._flushTypeQueue();\n    }\n\n    return this;\n  };\n\n  ParamTypes.prototype._flushTypeQueue = function () {\n    while (this.typeQueue.length) {\n      var type = this.typeQueue.shift();\n      if (type.pattern) throw new Error(\"You cannot override a type's .pattern at runtime.\");\n      extend(this.types[type.name], services.$injector.invoke(type.def));\n    }\n  };\n\n  return ParamTypes;\n}();\n\nexport { ParamTypes };\n\nfunction initDefaultTypes() {\n  var makeDefaultType = function (def) {\n    var valToString = function (val) {\n      return val != null ? val.toString() : val;\n    };\n\n    var defaultTypeBase = {\n      encode: valToString,\n      decode: valToString,\n      is: is(String),\n      pattern: /.*/,\n      // tslint:disable-next-line:triple-equals\n      equals: function (a, b) {\n        return a == b;\n      }\n    };\n    return extend({}, defaultTypeBase, def);\n  }; // Default Parameter Type Definitions\n\n\n  extend(ParamTypes.prototype, {\n    string: makeDefaultType({}),\n    path: makeDefaultType({\n      pattern: /[^/]*/\n    }),\n    query: makeDefaultType({}),\n    hash: makeDefaultType({\n      inherit: false\n    }),\n    int: makeDefaultType({\n      decode: function (val) {\n        return parseInt(val, 10);\n      },\n      is: function (val) {\n        return !isNullOrUndefined(val) && this.decode(val.toString()) === val;\n      },\n      pattern: /-?\\d+/\n    }),\n    bool: makeDefaultType({\n      encode: function (val) {\n        return val && 1 || 0;\n      },\n      decode: function (val) {\n        return parseInt(val, 10) !== 0;\n      },\n      is: is(Boolean),\n      pattern: /0|1/\n    }),\n    date: makeDefaultType({\n      encode: function (val) {\n        return !this.is(val) ? undefined : [val.getFullYear(), ('0' + (val.getMonth() + 1)).slice(-2), ('0' + val.getDate()).slice(-2)].join('-');\n      },\n      decode: function (val) {\n        if (this.is(val)) return val;\n        var match = this.capture.exec(val);\n        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n      },\n      is: function (val) {\n        return val instanceof Date && !isNaN(val.valueOf());\n      },\n      equals: function (l, r) {\n        return ['getFullYear', 'getMonth', 'getDate'].reduce(function (acc, fn) {\n          return acc && l[fn]() === r[fn]();\n        }, true);\n      },\n      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/\n    }),\n    json: makeDefaultType({\n      encode: toJson,\n      decode: fromJson,\n      is: is(Object),\n      equals: equals,\n      pattern: /[^/]*/\n    }),\n    // does not encode/decode\n    any: makeDefaultType({\n      encode: identity,\n      decode: identity,\n      is: function () {\n        return true;\n      },\n      equals: equals\n    })\n  });\n}\n\ninitDefaultTypes();","map":{"version":3,"mappings":"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","names":["fromJson","toJson","identity","equals","inherit","map","extend","pick","isDefined","isNullOrUndefined","is","services","ParamType","ParamTypes","prototype","makeType","definition","name","types","defaultTypes","definitionFn","hasOwnProperty","Error","typeQueue","push","def","enqueue","_flushTypeQueue","length","type","shift","pattern","$injector","invoke","initDefaultTypes","makeDefaultType","valToString","val","toString","defaultTypeBase","encode","decode","String","a","b","string","path","query","hash","int","bool","Boolean","date","undefined","getFullYear","getMonth","slice","getDate","join","match","capture","exec","Date","isNaN","valueOf","l","r","reduce","acc","fn","json","Object","any"],"sources":["C:\\Users\\huang\\node_modules\\@uirouter\\core\\lib-esm\\params\\@uirouter\\core\\params\\paramTypes.ts"],"sourcesContent":["import { fromJson, toJson, identity, equals, inherit, map, extend, pick } from '../common/common';\nimport { isDefined, isNullOrUndefined } from '../common/predicates';\nimport { is } from '../common/hof';\nimport { services } from '../common/coreservices';\nimport { ParamType } from './paramType';\nimport { ParamTypeDefinition } from './interface';\n\n/**\n * A registry for parameter types.\n *\n * This registry manages the built-in (and custom) parameter types.\n *\n * The built-in parameter types are:\n *\n * - [[string]]\n * - [[path]]\n * - [[query]]\n * - [[hash]]\n * - [[int]]\n * - [[bool]]\n * - [[date]]\n * - [[json]]\n * - [[any]]\n *\n * To register custom parameter types, use [[UrlConfig.type]], i.e.,\n *\n * ```js\n * router.urlService.config.type(customType)\n * ```\n */\nexport class ParamTypes {\n  /**\n   * Built-in parameter type: `string`\n   *\n   * This parameter type coerces values to strings.\n   * It matches anything (`new RegExp(\".*\")`) in the URL\n   */\n  static string: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `path`\n   *\n   * This parameter type is the default type for path parameters.\n   * A path parameter is any parameter declared in the path portion of a url\n   *\n   * - `/foo/:param1/:param2`: two path parameters\n   *\n   * This parameter type behaves exactly like the [[string]] type with one exception.\n   * When matching parameter values in the URL, the `path` type does not match forward slashes `/`.\n   *\n   * #### Angular 1 note:\n   * In ng1, this type is overridden with one that pre-encodes slashes as `~2F` instead of `%2F`.\n   * For more details about this angular 1 behavior, see: https://github.com/angular-ui/ui-router/issues/2598\n   */\n  static path: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `query`\n   *\n   * This parameter type is the default type for query/search parameters.\n   * It behaves the same as the [[string]] parameter type.\n   *\n   * A query parameter is any parameter declared in the query/search portion of a url\n   *\n   * - `/bar?param2`: a query parameter\n   */\n  static query: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `hash`\n   *\n   * This parameter type is used for the `#` parameter (the hash)\n   * It behaves the same as the [[string]] parameter type.\n   */\n  static hash: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `int`\n   *\n   * This parameter type serializes javascript integers (`number`s which represent an integer) to the URL.\n   *\n   * #### Example:\n   * ```js\n   * .state({\n   *   name: 'user',\n   *   url: '/user/{id:int}'\n   * });\n   * ```\n   * ```js\n   * $state.go('user', { id: 1298547 });\n   * ```\n   *\n   * The URL will serialize to: `/user/1298547`.\n   *\n   * When the parameter value is read, it will be the `number` `1298547`, not the string `\"1298547\"`.\n   */\n  static int: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `bool`\n   *\n   * This parameter type serializes `true`/`false` as `1`/`0`\n   *\n   * #### Example:\n   * ```js\n   * .state({\n   *   name: 'inbox',\n   *   url: '/inbox?{unread:bool}'\n   * });\n   * ```\n   * ```js\n   * $state.go('inbox', { unread: true });\n   * ```\n   *\n   * The URL will serialize to: `/inbox?unread=1`.\n   *\n   * Conversely, if the url is `/inbox?unread=0`, the value of the `unread` parameter will be a `false`.\n   */\n  static bool: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `date`\n   *\n   * This parameter type can be used to serialize Javascript dates as parameter values.\n   *\n   * #### Example:\n   * ```js\n   * .state({\n   *   name: 'search',\n   *   url: '/search?{start:date}'\n   * });\n   * ```\n   * ```js\n   * $state.go('search', { start: new Date(2000, 0, 1) });\n   * ```\n   *\n   * The URL will serialize to: `/search?start=2000-01-01`.\n   *\n   * Conversely, if the url is `/search?start=2016-12-25`, the value of the `start` parameter will be a `Date` object where:\n   *\n   * - `date.getFullYear() === 2016`\n   * - `date.getMonth() === 11` (month is 0-based)\n   * - `date.getDate() === 25`\n   */\n  static date: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `json`\n   *\n   * This parameter type can be used to serialize javascript objects into the URL using JSON serialization.\n   *\n   * #### Example:\n   * This example serializes an plain javascript object to the URL\n   * ```js\n   * .state({\n   *   name: 'map',\n   *   url: '/map/{coords:json}'\n   * });\n   * ```\n   * ```js\n   * $state.go('map', { coords: { x: 10399.2, y: 49071 });\n   * ```\n   *\n   * The URL will serialize to: `/map/%7B%22x%22%3A10399.2%2C%22y%22%3A49071%7D`\n   */\n  static json: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `any`\n   *\n   * This parameter type is used by default for url-less parameters (parameters that do not appear in the URL).\n   * This type does not encode or decode.\n   * It is compared using a deep `equals` comparison.\n   *\n   * #### Example:\n   * This example defines a non-url parameter on a [[StateDeclaration]].\n   * ```js\n   * .state({\n   *   name: 'new',\n   *   url: '/new',\n   *   params: {\n   *     inrepyto: null\n   *   }\n   * });\n   * ```\n   * ```js\n   * $state.go('new', { inreplyto: currentMessage });\n   * ```\n   */\n  static any: ParamTypeDefinition;\n\n  types: any;\n  enqueue = true;\n  typeQueue: any[] = [];\n\n  private defaultTypes: any = pick(ParamTypes.prototype, [\n    'hash',\n    'string',\n    'query',\n    'path',\n    'int',\n    'bool',\n    'date',\n    'json',\n    'any',\n  ]);\n\n  constructor() {\n    // Register default types. Store them in the prototype of this.types.\n    const makeType = (definition: ParamTypeDefinition, name: string) => new ParamType(extend({ name }, definition));\n    this.types = inherit(map(this.defaultTypes, makeType), {});\n  }\n\n  dispose() {\n    this.types = {};\n  }\n\n  /**\n   * Registers a parameter type\n   *\n   * End users should call [[UrlMatcherFactory.type]], which delegates to this method.\n   */\n  type(name: string, definition?: ParamTypeDefinition, definitionFn?: () => ParamTypeDefinition) {\n    if (!isDefined(definition)) return this.types[name];\n    if (this.types.hasOwnProperty(name)) throw new Error(`A type named '${name}' has already been defined.`);\n\n    this.types[name] = new ParamType(extend({ name }, definition));\n\n    if (definitionFn) {\n      this.typeQueue.push({ name, def: definitionFn });\n      if (!this.enqueue) this._flushTypeQueue();\n    }\n\n    return this;\n  }\n\n  _flushTypeQueue() {\n    while (this.typeQueue.length) {\n      const type = this.typeQueue.shift();\n      if (type.pattern) throw new Error(\"You cannot override a type's .pattern at runtime.\");\n      extend(this.types[type.name], services.$injector.invoke(type.def));\n    }\n  }\n}\n\nfunction initDefaultTypes() {\n  const makeDefaultType = (def) => {\n    const valToString = (val: any) => (val != null ? val.toString() : val);\n\n    const defaultTypeBase = {\n      encode: valToString,\n      decode: valToString,\n      is: is(String),\n      pattern: /.*/,\n      // tslint:disable-next-line:triple-equals\n      equals: (a: any, b: any) => a == b, // allow coersion for null/undefined/\"\"\n    };\n\n    return extend({}, defaultTypeBase, def) as ParamTypeDefinition;\n  };\n\n  // Default Parameter Type Definitions\n  extend(ParamTypes.prototype, {\n    string: makeDefaultType({}),\n\n    path: makeDefaultType({\n      pattern: /[^/]*/,\n    }),\n\n    query: makeDefaultType({}),\n\n    hash: makeDefaultType({\n      inherit: false,\n    }),\n\n    int: makeDefaultType({\n      decode: (val: string) => parseInt(val, 10),\n      is: function (val: any) {\n        return !isNullOrUndefined(val) && this.decode(val.toString()) === val;\n      },\n      pattern: /-?\\d+/,\n    }),\n\n    bool: makeDefaultType({\n      encode: (val: any) => (val && 1) || 0,\n      decode: (val: string) => parseInt(val, 10) !== 0,\n      is: is(Boolean),\n      pattern: /0|1/,\n    }),\n\n    date: makeDefaultType({\n      encode: function (val: any) {\n        return !this.is(val)\n          ? undefined\n          : [val.getFullYear(), ('0' + (val.getMonth() + 1)).slice(-2), ('0' + val.getDate()).slice(-2)].join('-');\n      },\n      decode: function (val: string) {\n        if (this.is(val)) return (<any>val) as Date;\n        const match = this.capture.exec(val);\n        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n      },\n      is: (val: any) => val instanceof Date && !isNaN(val.valueOf()),\n      equals(l: any, r: any) {\n        return ['getFullYear', 'getMonth', 'getDate'].reduce((acc, fn) => acc && l[fn]() === r[fn](), true);\n      },\n      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/,\n    }),\n\n    json: makeDefaultType({\n      encode: toJson,\n      decode: fromJson,\n      is: is(Object),\n      equals: equals,\n      pattern: /[^/]*/,\n    }),\n\n    // does not encode/decode\n    any: makeDefaultType({\n      encode: identity,\n      decode: identity,\n      is: () => true,\n      equals: equals,\n    }),\n  });\n}\n\ninitDefaultTypes();\n"]},"metadata":{},"sourceType":"module"}