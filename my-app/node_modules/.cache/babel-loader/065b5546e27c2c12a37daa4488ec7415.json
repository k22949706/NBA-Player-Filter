{"ast":null,"code":"import { isObject, isString } from '../common/predicates';\nimport { stringify } from '../common/strings';\nimport { extend } from '../common';\n/**\n * Encapsulate the target (destination) state/params/options of a [[Transition]].\n *\n * This class is frequently used to redirect a transition to a new destination.\n *\n * See:\n *\n * - [[HookResult]]\n * - [[TransitionHookFn]]\n * - [[TransitionService.onStart]]\n *\n * To create a `TargetState`, use [[StateService.target]].\n *\n * ---\n *\n * This class wraps:\n *\n * 1) an identifier for a state\n * 2) a set of parameters\n * 3) and transition options\n * 4) the registered state object (the [[StateDeclaration]])\n *\n * Many UI-Router APIs such as [[StateService.go]] take a [[StateOrName]] argument which can\n * either be a *state object* (a [[StateDeclaration]] or [[StateObject]]) or a *state name* (a string).\n * The `TargetState` class normalizes those options.\n *\n * A `TargetState` may be valid (the state being targeted exists in the registry)\n * or invalid (the state being targeted is not registered).\n */\n\nvar TargetState =\n/** @class */\nfunction () {\n  /**\n   * The TargetState constructor\n   *\n   * Note: Do not construct a `TargetState` manually.\n   * To create a `TargetState`, use the [[StateService.target]] factory method.\n   *\n   * @param _stateRegistry The StateRegistry to use to look up the _definition\n   * @param _identifier An identifier for a state.\n   *    Either a fully-qualified state name, or the object used to define the state.\n   * @param _params Parameters for the target state\n   * @param _options Transition options.\n   *\n   * @internal\n   */\n  function TargetState(_stateRegistry, _identifier, _params, _options) {\n    this._stateRegistry = _stateRegistry;\n    this._identifier = _identifier;\n    this._identifier = _identifier;\n    this._params = extend({}, _params || {});\n    this._options = extend({}, _options || {});\n    this._definition = _stateRegistry.matcher.find(_identifier, this._options.relative);\n  }\n  /** The name of the state this object targets */\n\n\n  TargetState.prototype.name = function () {\n    return this._definition && this._definition.name || this._identifier;\n  };\n  /** The identifier used when creating this TargetState */\n\n\n  TargetState.prototype.identifier = function () {\n    return this._identifier;\n  };\n  /** The target parameter values */\n\n\n  TargetState.prototype.params = function () {\n    return this._params;\n  };\n  /** The internal state object (if it was found) */\n\n\n  TargetState.prototype.$state = function () {\n    return this._definition;\n  };\n  /** The internal state declaration (if it was found) */\n\n\n  TargetState.prototype.state = function () {\n    return this._definition && this._definition.self;\n  };\n  /** The target options */\n\n\n  TargetState.prototype.options = function () {\n    return this._options;\n  };\n  /** True if the target state was found */\n\n\n  TargetState.prototype.exists = function () {\n    return !!(this._definition && this._definition.self);\n  };\n  /** True if the object is valid */\n\n\n  TargetState.prototype.valid = function () {\n    return !this.error();\n  };\n  /** If the object is invalid, returns the reason why */\n\n\n  TargetState.prototype.error = function () {\n    var base = this.options().relative;\n\n    if (!this._definition && !!base) {\n      var stateName = base.name ? base.name : base;\n      return \"Could not resolve '\" + this.name() + \"' from state '\" + stateName + \"'\";\n    }\n\n    if (!this._definition) return \"No such state '\" + this.name() + \"'\";\n    if (!this._definition.self) return \"State '\" + this.name() + \"' has an invalid definition\";\n  };\n\n  TargetState.prototype.toString = function () {\n    return \"'\" + this.name() + \"'\" + stringify(this.params());\n  };\n  /**\n   * Returns a copy of this TargetState which targets a different state.\n   * The new TargetState has the same parameter values and transition options.\n   *\n   * @param state The new state that should be targeted\n   */\n\n\n  TargetState.prototype.withState = function (state) {\n    return new TargetState(this._stateRegistry, state, this._params, this._options);\n  };\n  /**\n   * Returns a copy of this TargetState, using the specified parameter values.\n   *\n   * @param params the new parameter values to use\n   * @param replace When false (default) the new parameter values will be merged with the current values.\n   *                When true the parameter values will be used instead of the current values.\n   */\n\n\n  TargetState.prototype.withParams = function (params, replace) {\n    if (replace === void 0) {\n      replace = false;\n    }\n\n    var newParams = replace ? params : extend({}, this._params, params);\n    return new TargetState(this._stateRegistry, this._identifier, newParams, this._options);\n  };\n  /**\n   * Returns a copy of this TargetState, using the specified Transition Options.\n   *\n   * @param options the new options to use\n   * @param replace When false (default) the new options will be merged with the current options.\n   *                When true the options will be used instead of the current options.\n   */\n\n\n  TargetState.prototype.withOptions = function (options, replace) {\n    if (replace === void 0) {\n      replace = false;\n    }\n\n    var newOpts = replace ? options : extend({}, this._options, options);\n    return new TargetState(this._stateRegistry, this._identifier, this._params, newOpts);\n  };\n  /** Returns true if the object has a state property that might be a state or state name */\n\n\n  TargetState.isDef = function (obj) {\n    return obj && obj.state && (isString(obj.state) || isObject(obj.state) && isString(obj.state.name));\n  };\n\n  return TargetState;\n}();\n\nexport { TargetState };","map":{"version":3,"mappings":"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","names":["isObject","isString","stringify","extend","_stateRegistry","_identifier","_params","_options","_definition","matcher","find","relative","TargetState","name","self","error","base","options","stateName","params","state","replace","newParams","newOpts","obj"],"sources":["C:\\Users\\huang\\node_modules\\@uirouter\\core\\lib-esm\\state\\@uirouter\\core\\state\\targetState.ts"],"sourcesContent":["import { StateDeclaration, StateOrName, TargetStateDef } from './interface';\nimport { TransitionOptions } from '../transition/interface';\nimport { StateObject } from './stateObject';\nimport { isObject, isString } from '../common/predicates';\nimport { stringify } from '../common/strings';\nimport { extend } from '../common';\nimport { StateRegistry } from './stateRegistry';\nimport { RawParams } from '../params';\n\n/**\n * Encapsulate the target (destination) state/params/options of a [[Transition]].\n *\n * This class is frequently used to redirect a transition to a new destination.\n *\n * See:\n *\n * - [[HookResult]]\n * - [[TransitionHookFn]]\n * - [[TransitionService.onStart]]\n *\n * To create a `TargetState`, use [[StateService.target]].\n *\n * ---\n *\n * This class wraps:\n *\n * 1) an identifier for a state\n * 2) a set of parameters\n * 3) and transition options\n * 4) the registered state object (the [[StateDeclaration]])\n *\n * Many UI-Router APIs such as [[StateService.go]] take a [[StateOrName]] argument which can\n * either be a *state object* (a [[StateDeclaration]] or [[StateObject]]) or a *state name* (a string).\n * The `TargetState` class normalizes those options.\n *\n * A `TargetState` may be valid (the state being targeted exists in the registry)\n * or invalid (the state being targeted is not registered).\n */\nexport class TargetState {\n  private _definition: StateObject;\n  private _params: RawParams;\n  private _options: TransitionOptions;\n\n  /** Returns true if the object has a state property that might be a state or state name */\n  static isDef = (obj): obj is TargetStateDef => {\n    return obj && obj.state && (isString(obj.state) || (isObject(obj.state) && isString(obj.state.name)));\n  };\n\n  /**\n   * The TargetState constructor\n   *\n   * Note: Do not construct a `TargetState` manually.\n   * To create a `TargetState`, use the [[StateService.target]] factory method.\n   *\n   * @param _stateRegistry The StateRegistry to use to look up the _definition\n   * @param _identifier An identifier for a state.\n   *    Either a fully-qualified state name, or the object used to define the state.\n   * @param _params Parameters for the target state\n   * @param _options Transition options.\n   *\n   * @internal\n   */\n  constructor(\n    private _stateRegistry: StateRegistry,\n    private _identifier: StateOrName,\n    _params?: RawParams,\n    _options?: TransitionOptions\n  ) {\n    this._identifier = _identifier;\n    this._params = extend({}, _params || {});\n    this._options = extend({}, _options || {});\n    this._definition = _stateRegistry.matcher.find(_identifier, this._options.relative);\n  }\n\n  /** The name of the state this object targets */\n  name(): string {\n    return (this._definition && this._definition.name) || <string>this._identifier;\n  }\n\n  /** The identifier used when creating this TargetState */\n  identifier(): StateOrName {\n    return this._identifier;\n  }\n\n  /** The target parameter values */\n  params(): RawParams {\n    return this._params;\n  }\n\n  /** The internal state object (if it was found) */\n  $state(): StateObject {\n    return this._definition;\n  }\n\n  /** The internal state declaration (if it was found) */\n  state(): StateDeclaration {\n    return this._definition && this._definition.self;\n  }\n\n  /** The target options */\n  options() {\n    return this._options;\n  }\n\n  /** True if the target state was found */\n  exists(): boolean {\n    return !!(this._definition && this._definition.self);\n  }\n\n  /** True if the object is valid */\n  valid(): boolean {\n    return !this.error();\n  }\n\n  /** If the object is invalid, returns the reason why */\n  error(): string {\n    const base = <any>this.options().relative;\n    if (!this._definition && !!base) {\n      const stateName = base.name ? base.name : base;\n      return `Could not resolve '${this.name()}' from state '${stateName}'`;\n    }\n    if (!this._definition) return `No such state '${this.name()}'`;\n    if (!this._definition.self) return `State '${this.name()}' has an invalid definition`;\n  }\n\n  toString() {\n    return `'${this.name()}'${stringify(this.params())}`;\n  }\n\n  /**\n   * Returns a copy of this TargetState which targets a different state.\n   * The new TargetState has the same parameter values and transition options.\n   *\n   * @param state The new state that should be targeted\n   */\n  withState(state: StateOrName): TargetState {\n    return new TargetState(this._stateRegistry, state, this._params, this._options);\n  }\n\n  /**\n   * Returns a copy of this TargetState, using the specified parameter values.\n   *\n   * @param params the new parameter values to use\n   * @param replace When false (default) the new parameter values will be merged with the current values.\n   *                When true the parameter values will be used instead of the current values.\n   */\n  withParams(params: RawParams, replace = false): TargetState {\n    const newParams: RawParams = replace ? params : extend({}, this._params, params);\n    return new TargetState(this._stateRegistry, this._identifier, newParams, this._options);\n  }\n\n  /**\n   * Returns a copy of this TargetState, using the specified Transition Options.\n   *\n   * @param options the new options to use\n   * @param replace When false (default) the new options will be merged with the current options.\n   *                When true the options will be used instead of the current options.\n   */\n  withOptions(options: TransitionOptions, replace = false): TargetState {\n    const newOpts = replace ? options : extend({}, this._options, options);\n    return new TargetState(this._stateRegistry, this._identifier, this._params, newOpts);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}