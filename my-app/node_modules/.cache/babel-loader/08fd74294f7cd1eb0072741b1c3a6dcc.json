{"ast":null,"code":"import { trace } from '../common/trace';\nimport { Rejection } from '../transition/rejectFactory';\n/**\n * A [[TransitionHookFn]] that skips a transition if it should be ignored\n *\n * This hook is invoked at the end of the onBefore phase.\n *\n * If the transition should be ignored (because no parameter or states changed)\n * then the transition is ignored and not processed.\n */\n\nfunction ignoredHook(trans) {\n  var ignoredReason = trans._ignoredReason();\n\n  if (!ignoredReason) return;\n  trace.traceTransitionIgnored(trans);\n  var pending = trans.router.globals.transition; // The user clicked a link going back to the *current state* ('A')\n  // However, there is also a pending transition in flight (to 'B')\n  // Abort the transition to 'B' because the user now wants to be back at 'A'.\n\n  if (ignoredReason === 'SameAsCurrent' && pending) {\n    pending.abort();\n  }\n\n  return Rejection.ignored().toPromise();\n}\n\nexport var registerIgnoredTransitionHook = function (transitionService) {\n  return transitionService.onBefore({}, ignoredHook, {\n    priority: -9999\n  });\n};","map":{"version":3,"mappings":"AAAA,SAASA,KAAT,QAAsB,iBAAtB;AACA,SAASC,SAAT,QAA0B,6BAA1B;AAIA;;;;;;;;;AAQA,SAASC,WAAT,CAAqBC,KAArB,EAAsC;EACpC,IAAMC,aAAa,GAAGD,KAAK,CAACE,cAAN,EAAtB;;EACA,IAAI,CAACD,aAAL,EAAoB;EAEpBJ,KAAK,CAACM,sBAAN,CAA6BH,KAA7B;EAEA,IAAMI,OAAO,GAAGJ,KAAK,CAACK,MAAN,CAAaC,OAAb,CAAqBC,UAArC,CANoC,CAQpC;EACA;EACA;;EACA,IAAIN,aAAa,KAAK,eAAlB,IAAqCG,OAAzC,EAAkD;IAChDA,OAAO,CAACI,KAAR;EACD;;EAED,OAAOV,SAAS,CAACW,OAAV,GAAoBC,SAApB,EAAP;AACD;;AAED,OAAO,IAAMC,6BAA6B,GAAG,UAACC,iBAAD,EAAqC;EAChF,wBAAiB,CAACC,QAAlB,CAA2B,EAA3B,EAA+Bd,WAA/B,EAA4C;IAAEe,QAAQ,EAAE,CAAC;EAAb,CAA5C;AAAgE,CAD3D","names":["trace","Rejection","ignoredHook","trans","ignoredReason","_ignoredReason","traceTransitionIgnored","pending","router","globals","transition","abort","ignored","toPromise","registerIgnoredTransitionHook","transitionService","onBefore","priority"],"sources":["C:\\Users\\huang\\node_modules\\@uirouter\\core\\lib-esm\\hooks\\@uirouter\\core\\hooks\\ignoredTransition.ts"],"sourcesContent":["import { trace } from '../common/trace';\nimport { Rejection } from '../transition/rejectFactory';\nimport { TransitionService } from '../transition/transitionService';\nimport { Transition } from '../transition/transition';\n\n/**\n * A [[TransitionHookFn]] that skips a transition if it should be ignored\n *\n * This hook is invoked at the end of the onBefore phase.\n *\n * If the transition should be ignored (because no parameter or states changed)\n * then the transition is ignored and not processed.\n */\nfunction ignoredHook(trans: Transition) {\n  const ignoredReason = trans._ignoredReason();\n  if (!ignoredReason) return;\n\n  trace.traceTransitionIgnored(trans);\n\n  const pending = trans.router.globals.transition;\n\n  // The user clicked a link going back to the *current state* ('A')\n  // However, there is also a pending transition in flight (to 'B')\n  // Abort the transition to 'B' because the user now wants to be back at 'A'.\n  if (ignoredReason === 'SameAsCurrent' && pending) {\n    pending.abort();\n  }\n\n  return Rejection.ignored().toPromise();\n}\n\nexport const registerIgnoredTransitionHook = (transitionService: TransitionService) =>\n  transitionService.onBefore({}, ignoredHook, { priority: -9999 });\n"]},"metadata":{},"sourceType":"module"}