{"ast":null,"code":"/** @publicapi @module ng1 */\n\n/** */\nimport { isDefined } from '@uirouter/core';\nimport { val, createProxyFunctions, removeFrom, isObject } from '@uirouter/core';\n/**\n * Implements UI-Router LocationServices and LocationConfig using Angular 1's $location service\n * @internalapi\n */\n\nvar Ng1LocationServices =\n/** @class */\nfunction () {\n  function Ng1LocationServices($locationProvider) {\n    // .onChange() registry\n    this._urlListeners = [];\n    this.$locationProvider = $locationProvider;\n\n    var _lp = val($locationProvider);\n\n    createProxyFunctions(_lp, this, _lp, ['hashPrefix']);\n  }\n  /**\n   * Applys ng1-specific path parameter encoding\n   *\n   * The Angular 1 `$location` service is a bit weird.\n   * It doesn't allow slashes to be encoded/decoded bi-directionally.\n   *\n   * See the writeup at https://github.com/angular-ui/ui-router/issues/2598\n   *\n   * This code patches the `path` parameter type so it encoded/decodes slashes as ~2F\n   *\n   * @param router\n   */\n\n\n  Ng1LocationServices.monkeyPatchPathParameterType = function (router) {\n    var pathType = router.urlMatcherFactory.type('path');\n\n    pathType.encode = function (x) {\n      return x != null ? x.toString().replace(/(~|\\/)/g, function (m) {\n        return {\n          '~': '~~',\n          '/': '~2F'\n        }[m];\n      }) : x;\n    };\n\n    pathType.decode = function (x) {\n      return x != null ? x.toString().replace(/(~~|~2F)/g, function (m) {\n        return {\n          '~~': '~',\n          '~2F': '/'\n        }[m];\n      }) : x;\n    };\n  }; // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n\n  Ng1LocationServices.prototype.dispose = function () {};\n\n  Ng1LocationServices.prototype.onChange = function (callback) {\n    var _this = this;\n\n    this._urlListeners.push(callback);\n\n    return function () {\n      return removeFrom(_this._urlListeners)(callback);\n    };\n  };\n\n  Ng1LocationServices.prototype.html5Mode = function () {\n    var html5Mode = this.$locationProvider.html5Mode();\n    html5Mode = isObject(html5Mode) ? html5Mode.enabled : html5Mode;\n    return html5Mode && this.$sniffer.history;\n  };\n\n  Ng1LocationServices.prototype.baseHref = function () {\n    return this._baseHref || (this._baseHref = this.$browser.baseHref() || this.$window.location.pathname);\n  };\n\n  Ng1LocationServices.prototype.url = function (newUrl, replace, state) {\n    if (replace === void 0) {\n      replace = false;\n    }\n\n    if (isDefined(newUrl)) this.$location.url(newUrl);\n    if (replace) this.$location.replace();\n    if (state) this.$location.state(state);\n    return this.$location.url();\n  };\n\n  Ng1LocationServices.prototype._runtimeServices = function ($rootScope, $location, $sniffer, $browser, $window) {\n    var _this = this;\n\n    this.$location = $location;\n    this.$sniffer = $sniffer;\n    this.$browser = $browser;\n    this.$window = $window; // Bind $locationChangeSuccess to the listeners registered in LocationService.onChange\n\n    $rootScope.$on('$locationChangeSuccess', function (evt) {\n      return _this._urlListeners.forEach(function (fn) {\n        return fn(evt);\n      });\n    });\n\n    var _loc = val($location); // Bind these LocationService functions to $location\n\n\n    createProxyFunctions(_loc, this, _loc, ['replace', 'path', 'search', 'hash']); // Bind these LocationConfig functions to $location\n\n    createProxyFunctions(_loc, this, _loc, ['port', 'protocol', 'host']);\n  };\n\n  return Ng1LocationServices;\n}();\n\nexport { Ng1LocationServices };","map":{"version":3,"mappings":"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","names":["isDefined","val","createProxyFunctions","removeFrom","isObject","$locationProvider","_lp","Ng1LocationServices","router","pathType","urlMatcherFactory","type","encode","x","toString","replace","m","decode","callback","_urlListeners","push","_this","html5Mode","enabled","$sniffer","history","_baseHref","$browser","baseHref","$window","location","pathname","newUrl","state","$location","url","$rootScope","$on","evt","forEach","fn","_loc"],"sources":["C:\\Users\\huang\\node_modules\\@uirouter\\angularjs\\lib-esm\\@uirouter\\angularjs\\locationServices.ts"],"sourcesContent":["/** @publicapi @module ng1 */ /** */\nimport { LocationConfig, LocationServices, UIRouter, ParamType, isDefined } from '@uirouter/core';\nimport { val, createProxyFunctions, removeFrom, isObject } from '@uirouter/core';\nimport { ILocationService, ILocationProvider, IWindowService } from 'angular';\n\n/**\n * Implements UI-Router LocationServices and LocationConfig using Angular 1's $location service\n * @internalapi\n */\nexport class Ng1LocationServices implements LocationConfig, LocationServices {\n  private $locationProvider: ILocationProvider;\n  private $location: ILocationService;\n  private $sniffer: any;\n  private $browser: any;\n  private $window: IWindowService;\n\n  path;\n  search;\n  hash;\n  hashPrefix;\n  port;\n  protocol;\n  host;\n\n  private _baseHref: string;\n\n  // .onChange() registry\n  private _urlListeners: Function[] = [];\n\n  /**\n   * Applys ng1-specific path parameter encoding\n   *\n   * The Angular 1 `$location` service is a bit weird.\n   * It doesn't allow slashes to be encoded/decoded bi-directionally.\n   *\n   * See the writeup at https://github.com/angular-ui/ui-router/issues/2598\n   *\n   * This code patches the `path` parameter type so it encoded/decodes slashes as ~2F\n   *\n   * @param router\n   */\n  static monkeyPatchPathParameterType(router: UIRouter) {\n    const pathType: ParamType = router.urlMatcherFactory.type('path');\n\n    pathType.encode = (x: any) =>\n      x != null ? x.toString().replace(/(~|\\/)/g, (m) => ({ '~': '~~', '/': '~2F' }[m])) : x;\n\n    pathType.decode = (x: string) =>\n      x != null ? x.toString().replace(/(~~|~2F)/g, (m) => ({ '~~': '~', '~2F': '/' }[m])) : x;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  dispose() {}\n\n  constructor($locationProvider: ILocationProvider) {\n    this.$locationProvider = $locationProvider;\n    const _lp = val($locationProvider);\n    createProxyFunctions(_lp, this, _lp, ['hashPrefix']);\n  }\n\n  onChange(callback: Function) {\n    this._urlListeners.push(callback);\n    return () => removeFrom(this._urlListeners)(callback);\n  }\n\n  html5Mode() {\n    let html5Mode: any = this.$locationProvider.html5Mode();\n    html5Mode = isObject(html5Mode) ? html5Mode.enabled : html5Mode;\n    return html5Mode && this.$sniffer.history;\n  }\n\n  baseHref() {\n    return this._baseHref || (this._baseHref = this.$browser.baseHref() || this.$window.location.pathname);\n  }\n\n  url(newUrl?: string, replace = false, state?) {\n    if (isDefined(newUrl)) this.$location.url(newUrl);\n    if (replace) this.$location.replace();\n    if (state) this.$location.state(state);\n    return this.$location.url();\n  }\n\n  _runtimeServices($rootScope, $location: ILocationService, $sniffer, $browser, $window: IWindowService) {\n    this.$location = $location;\n    this.$sniffer = $sniffer;\n    this.$browser = $browser;\n    this.$window = $window;\n\n    // Bind $locationChangeSuccess to the listeners registered in LocationService.onChange\n    $rootScope.$on('$locationChangeSuccess', (evt) => this._urlListeners.forEach((fn) => fn(evt)));\n    const _loc = val($location);\n\n    // Bind these LocationService functions to $location\n    createProxyFunctions(_loc, this, _loc, ['replace', 'path', 'search', 'hash']);\n    // Bind these LocationConfig functions to $location\n    createProxyFunctions(_loc, this, _loc, ['port', 'protocol', 'host']);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}