{"ast":null,"code":"/** @publicapi @module ng1 */\n\n/** */\nimport { services, ResolveContext, extend } from '@uirouter/core';\nimport { getLocals } from '../services';\n/**\n * This is a [[StateBuilder.builder]] function for angular1 `onEnter`, `onExit`,\n * `onRetain` callback hooks on a [[Ng1StateDeclaration]].\n *\n * When the [[StateBuilder]] builds a [[StateObject]] object from a raw [[StateDeclaration]], this builder\n * ensures that those hooks are injectable for @uirouter/angularjs (ng1).\n *\n * @internalapi\n */\n\nexport var getStateHookBuilder = function (hookName) {\n  return function stateHookBuilder(stateObject) {\n    var hook = stateObject[hookName];\n    var pathname = hookName === 'onExit' ? 'from' : 'to';\n\n    function decoratedNg1Hook(trans, state) {\n      var resolveContext = new ResolveContext(trans.treeChanges(pathname));\n      var subContext = resolveContext.subContext(state.$$state());\n      var locals = extend(getLocals(subContext), {\n        $state$: state,\n        $transition$: trans\n      });\n      return services.$injector.invoke(hook, this, locals);\n    }\n\n    return hook ? decoratedNg1Hook : undefined;\n  };\n};","map":{"version":3,"mappings":"AAAA;;AAA8B;AAC9B,SAKEA,QALF,EAMEC,cANF,EAOEC,MAPF,QAQO,gBARP;AASA,SAASC,SAAT,QAA0B,aAA1B;AAGA;;;;;;;;;;AASA,OAAO,IAAMC,mBAAmB,GAAG,UAACC,QAAD,EAA4C;EAC7E,gBAASC,gBAAT,CAA0BC,WAA1B,EAAkD;IAChD,IAAMC,IAAI,GAAGD,WAAW,CAACF,QAAD,CAAxB;IACA,IAAMI,QAAQ,GAAGJ,QAAQ,KAAK,QAAb,GAAwB,MAAxB,GAAiC,IAAlD;;IAEA,SAASK,gBAAT,CAA0BC,KAA1B,EAA6CC,KAA7C,EAAuE;MACrE,IAAMC,cAAc,GAAG,IAAIZ,cAAJ,CAAmBU,KAAK,CAACG,WAAN,CAAkBL,QAAlB,CAAnB,CAAvB;MACA,IAAMM,UAAU,GAAGF,cAAc,CAACE,UAAf,CAA0BH,KAAK,CAACI,OAAN,EAA1B,CAAnB;MACA,IAAMC,MAAM,GAAGf,MAAM,CAACC,SAAS,CAACY,UAAD,CAAV,EAAwB;QAAEG,OAAO,EAAEN,KAAX;QAAkBO,YAAY,EAAER;MAAhC,CAAxB,CAArB;MACA,OAAOX,QAAQ,CAACoB,SAAT,CAAmBC,MAAnB,CAA0Bb,IAA1B,EAAgC,IAAhC,EAAsCS,MAAtC,CAAP;IACD;;IAED,OAAOT,IAAI,GAAGE,gBAAH,GAAsBY,SAAjC;EACD,CAZD;AAYC,CAbI","names":["services","ResolveContext","extend","getLocals","getStateHookBuilder","hookName","stateHookBuilder","stateObject","hook","pathname","decoratedNg1Hook","trans","state","resolveContext","treeChanges","subContext","$$state","locals","$state$","$transition$","$injector","invoke","undefined"],"sources":["C:\\Users\\huang\\node_modules\\@uirouter\\angularjs\\lib-esm\\statebuilders\\@uirouter\\angularjs\\statebuilders\\onEnterExitRetain.ts"],"sourcesContent":["/** @publicapi @module ng1 */ /** */\nimport {\n  StateObject,\n  TransitionStateHookFn,\n  HookResult,\n  Transition,\n  services,\n  ResolveContext,\n  extend,\n} from '@uirouter/core';\nimport { getLocals } from '../services';\nimport { Ng1StateDeclaration } from '../interface';\n\n/**\n * This is a [[StateBuilder.builder]] function for angular1 `onEnter`, `onExit`,\n * `onRetain` callback hooks on a [[Ng1StateDeclaration]].\n *\n * When the [[StateBuilder]] builds a [[StateObject]] object from a raw [[StateDeclaration]], this builder\n * ensures that those hooks are injectable for @uirouter/angularjs (ng1).\n *\n * @internalapi\n */\nexport const getStateHookBuilder = (hookName: 'onEnter' | 'onExit' | 'onRetain') =>\n  function stateHookBuilder(stateObject: StateObject): TransitionStateHookFn {\n    const hook = stateObject[hookName];\n    const pathname = hookName === 'onExit' ? 'from' : 'to';\n\n    function decoratedNg1Hook(trans: Transition, state: Ng1StateDeclaration): HookResult {\n      const resolveContext = new ResolveContext(trans.treeChanges(pathname));\n      const subContext = resolveContext.subContext(state.$$state());\n      const locals = extend(getLocals(subContext), { $state$: state, $transition$: trans });\n      return services.$injector.invoke(hook, this, locals);\n    }\n\n    return hook ? decoratedNg1Hook : undefined;\n  };\n"]},"metadata":{},"sourceType":"module"}