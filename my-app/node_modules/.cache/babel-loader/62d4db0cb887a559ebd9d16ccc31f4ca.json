{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { BaseLocationServices } from './baseLocationService';\nimport { root, splitHash, splitQuery, stripLastPathElement } from '../common';\n/**\n * A `LocationServices` that gets/sets the current location using the browser's `location` and `history` apis\n *\n * Uses `history.pushState` and `history.replaceState`\n */\n\nvar PushStateLocationService =\n/** @class */\nfunction (_super) {\n  __extends(PushStateLocationService, _super);\n\n  function PushStateLocationService(router) {\n    var _this = _super.call(this, router, true) || this;\n\n    _this._config = router.urlService.config;\n    root.addEventListener('popstate', _this._listener, false);\n    return _this;\n  }\n  /**\n   * Gets the base prefix without:\n   * - trailing slash\n   * - trailing filename\n   * - protocol and hostname\n   *\n   * If <base href='/base/'>, this returns '/base'.\n   * If <base href='/foo/base/'>, this returns '/foo/base'.\n   * If <base href='/base/index.html'>, this returns '/base'.\n   * If <base href='http://localhost:8080/base/index.html'>, this returns '/base'.\n   * If <base href='/base'>, this returns ''.\n   * If <base href='http://localhost:8080'>, this returns ''.\n   * If <base href='http://localhost:8080/'>, this returns ''.\n   *\n   * See: https://html.spec.whatwg.org/dev/semantics.html#the-base-element\n   */\n\n\n  PushStateLocationService.prototype._getBasePrefix = function () {\n    return stripLastPathElement(this._config.baseHref());\n  };\n\n  PushStateLocationService.prototype._get = function () {\n    var _a = this._location,\n        pathname = _a.pathname,\n        hash = _a.hash,\n        search = _a.search;\n    search = splitQuery(search)[1]; // strip ? if found\n\n    hash = splitHash(hash)[1]; // strip # if found\n\n    var basePrefix = this._getBasePrefix();\n\n    var exactBaseHrefMatch = pathname === this._config.baseHref();\n\n    var startsWithBase = pathname.substr(0, basePrefix.length) === basePrefix;\n    pathname = exactBaseHrefMatch ? '/' : startsWithBase ? pathname.substring(basePrefix.length) : pathname;\n    return pathname + (search ? '?' + search : '') + (hash ? '#' + hash : '');\n  };\n\n  PushStateLocationService.prototype._set = function (state, title, url, replace) {\n    var basePrefix = this._getBasePrefix();\n\n    var slash = url && url[0] !== '/' ? '/' : '';\n    var fullUrl = url === '' || url === '/' ? this._config.baseHref() : basePrefix + slash + url;\n\n    if (replace) {\n      this._history.replaceState(state, title, fullUrl);\n    } else {\n      this._history.pushState(state, title, fullUrl);\n    }\n  };\n\n  PushStateLocationService.prototype.dispose = function (router) {\n    _super.prototype.dispose.call(this, router);\n\n    root.removeEventListener('popstate', this._listener);\n  };\n\n  return PushStateLocationService;\n}(BaseLocationServices);\n\nexport { PushStateLocationService };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA,SAASA,oBAAT,QAAqC,uBAArC;AACA,SAAyBC,IAAzB,EAA+BC,SAA/B,EAA0CC,UAA1C,EAAsDC,oBAAtD,QAAkF,WAAlF;AAEA;;;;;;AAKA;AAAA;AAAA;EAA8CC;;EAG5C,kCAAYC,MAAZ,EAA4B;IAA5B,YACEC,kBAAMD,MAAN,EAAc,IAAd,KAAmB,IADrB;;IAEEE,KAAI,CAACC,OAAL,GAAeH,MAAM,CAACI,UAAP,CAAkBC,MAAjC;IACAV,IAAI,CAACW,gBAAL,CAAsB,UAAtB,EAAkCJ,KAAI,CAACK,SAAvC,EAAkD,KAAlD;;EACD;EAED;;;;;;;;;;;;;;;;;;EAgBQC,oDAAR;IACE,OAAOV,oBAAoB,CAAC,KAAKK,OAAL,CAAaM,QAAb,EAAD,CAA3B;EACD,CAFO;;EAIED,0CAAV;IACM,SAA6B,KAAKE,SAAlC;IAAA,IAAEC,QAAQ,cAAV;IAAA,IAAYC,IAAI,UAAhB;IAAA,IAAkBC,MAAM,YAAxB;IACJA,MAAM,GAAGhB,UAAU,CAACgB,MAAD,CAAV,CAAmB,CAAnB,CAAT,CAFF,CAEkC;;IAChCD,IAAI,GAAGhB,SAAS,CAACgB,IAAD,CAAT,CAAgB,CAAhB,CAAP,CAHF,CAG6B;;IAE3B,IAAME,UAAU,GAAG,KAAKC,cAAL,EAAnB;;IACA,IAAMC,kBAAkB,GAAGL,QAAQ,KAAK,KAAKR,OAAL,CAAaM,QAAb,EAAxC;;IACA,IAAMQ,cAAc,GAAGN,QAAQ,CAACO,MAAT,CAAgB,CAAhB,EAAmBJ,UAAU,CAACK,MAA9B,MAA0CL,UAAjE;IACAH,QAAQ,GAAGK,kBAAkB,GAAG,GAAH,GAASC,cAAc,GAAGN,QAAQ,CAACS,SAAT,CAAmBN,UAAU,CAACK,MAA9B,CAAH,GAA2CR,QAA/F;IAEA,OAAOA,QAAQ,IAAIE,MAAM,GAAG,MAAMA,MAAT,GAAkB,EAA5B,CAAR,IAA2CD,IAAI,GAAG,MAAMA,IAAT,GAAgB,EAA/D,CAAP;EACD,CAXS;;EAaAJ,0CAAV,UAAea,KAAf,EAA2BC,KAA3B,EAA0CC,GAA1C,EAAuDC,OAAvD,EAAuE;IACrE,IAAMV,UAAU,GAAG,KAAKC,cAAL,EAAnB;;IACA,IAAMU,KAAK,GAAGF,GAAG,IAAIA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAlB,GAAwB,GAAxB,GAA8B,EAA5C;IACA,IAAMG,OAAO,GAAGH,GAAG,KAAK,EAAR,IAAcA,GAAG,KAAK,GAAtB,GAA4B,KAAKpB,OAAL,CAAaM,QAAb,EAA5B,GAAsDK,UAAU,GAAGW,KAAb,GAAqBF,GAA3F;;IAEA,IAAIC,OAAJ,EAAa;MACX,KAAKG,QAAL,CAAcC,YAAd,CAA2BP,KAA3B,EAAkCC,KAAlC,EAAyCI,OAAzC;IACD,CAFD,MAEO;MACL,KAAKC,QAAL,CAAcE,SAAd,CAAwBR,KAAxB,EAA+BC,KAA/B,EAAsCI,OAAtC;IACD;EACF,CAVS;;EAYHlB,6CAAP,UAAeR,MAAf,EAA+B;IAC7BC,iBAAM6B,OAAN,CAAaC,IAAb,CAAa,IAAb,EAAc/B,MAAd;;IACAL,IAAI,CAACqC,mBAAL,CAAyB,UAAzB,EAAqC,KAAKzB,SAA1C;EACD,CAHM;;EAIT;AAAC,CA1DD,CAA8Cb,oBAA9C","names":["BaseLocationServices","root","splitHash","splitQuery","stripLastPathElement","__extends","router","_super","_this","_config","urlService","config","addEventListener","_listener","PushStateLocationService","baseHref","_location","pathname","hash","search","basePrefix","_getBasePrefix","exactBaseHrefMatch","startsWithBase","substr","length","substring","state","title","url","replace","slash","fullUrl","_history","replaceState","pushState","dispose","call","removeEventListener"],"sources":["C:\\Users\\huang\\node_modules\\@uirouter\\core\\lib-esm\\vanilla\\@uirouter\\core\\vanilla\\pushStateLocationService.ts"],"sourcesContent":["import { UIRouter } from '../router';\nimport { BaseLocationServices } from './baseLocationService';\nimport { LocationConfig, root, splitHash, splitQuery, stripLastPathElement } from '../common';\n\n/**\n * A `LocationServices` that gets/sets the current location using the browser's `location` and `history` apis\n *\n * Uses `history.pushState` and `history.replaceState`\n */\nexport class PushStateLocationService extends BaseLocationServices {\n  _config: LocationConfig;\n\n  constructor(router: UIRouter) {\n    super(router, true);\n    this._config = router.urlService.config;\n    root.addEventListener('popstate', this._listener, false);\n  }\n\n  /**\n   * Gets the base prefix without:\n   * - trailing slash\n   * - trailing filename\n   * - protocol and hostname\n   *\n   * If <base href='/base/'>, this returns '/base'.\n   * If <base href='/foo/base/'>, this returns '/foo/base'.\n   * If <base href='/base/index.html'>, this returns '/base'.\n   * If <base href='http://localhost:8080/base/index.html'>, this returns '/base'.\n   * If <base href='/base'>, this returns ''.\n   * If <base href='http://localhost:8080'>, this returns ''.\n   * If <base href='http://localhost:8080/'>, this returns ''.\n   *\n   * See: https://html.spec.whatwg.org/dev/semantics.html#the-base-element\n   */\n  private _getBasePrefix() {\n    return stripLastPathElement(this._config.baseHref());\n  }\n\n  protected _get() {\n    let { pathname, hash, search } = this._location;\n    search = splitQuery(search)[1]; // strip ? if found\n    hash = splitHash(hash)[1]; // strip # if found\n\n    const basePrefix = this._getBasePrefix();\n    const exactBaseHrefMatch = pathname === this._config.baseHref();\n    const startsWithBase = pathname.substr(0, basePrefix.length) === basePrefix;\n    pathname = exactBaseHrefMatch ? '/' : startsWithBase ? pathname.substring(basePrefix.length) : pathname;\n\n    return pathname + (search ? '?' + search : '') + (hash ? '#' + hash : '');\n  }\n\n  protected _set(state: any, title: string, url: string, replace: boolean) {\n    const basePrefix = this._getBasePrefix();\n    const slash = url && url[0] !== '/' ? '/' : '';\n    const fullUrl = url === '' || url === '/' ? this._config.baseHref() : basePrefix + slash + url;\n\n    if (replace) {\n      this._history.replaceState(state, title, fullUrl);\n    } else {\n      this._history.pushState(state, title, fullUrl);\n    }\n  }\n\n  public dispose(router: UIRouter) {\n    super.dispose(router);\n    root.removeEventListener('popstate', this._listener);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}