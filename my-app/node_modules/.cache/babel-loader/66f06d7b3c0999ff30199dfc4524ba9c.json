{"ast":null,"code":"import { noop } from '../common/common';\nimport { services } from '../common/coreservices';\n/**\n * A [[TransitionHookFn]] which waits for the views to load\n *\n * Registered using `transitionService.onStart({}, loadEnteringViews);`\n *\n * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.\n * In angular 1, this includes loading the templates.\n */\n\nvar loadEnteringViews = function (transition) {\n  var $q = services.$q;\n  var enteringViews = transition.views('entering');\n  if (!enteringViews.length) return;\n  return $q.all(enteringViews.map(function (view) {\n    return $q.when(view.load());\n  })).then(noop);\n};\n\nexport var registerLoadEnteringViews = function (transitionService) {\n  return transitionService.onFinish({}, loadEnteringViews);\n};\n/**\n * A [[TransitionHookFn]] which activates the new views when a transition is successful.\n *\n * Registered using `transitionService.onSuccess({}, activateViews);`\n *\n * After a transition is complete, this hook deactivates the old views from the previous state,\n * and activates the new views from the destination state.\n *\n * See [[ViewService]]\n */\n\nvar activateViews = function (transition) {\n  var enteringViews = transition.views('entering');\n  var exitingViews = transition.views('exiting');\n  if (!enteringViews.length && !exitingViews.length) return;\n  var $view = transition.router.viewService;\n  exitingViews.forEach(function (vc) {\n    return $view.deactivateViewConfig(vc);\n  });\n  enteringViews.forEach(function (vc) {\n    return $view.activateViewConfig(vc);\n  });\n  $view.sync();\n};\n\nexport var registerActivateViews = function (transitionService) {\n  return transitionService.onSuccess({}, activateViews);\n};","map":{"version":3,"mappings":"AAAA,SAASA,IAAT,QAAqB,kBAArB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AAOA;;;;;;;;;AAQA,IAAMC,iBAAiB,GAAqB,UAACC,UAAD,EAAuB;EACjE,IAAMC,EAAE,GAAGH,QAAQ,CAACG,EAApB;EACA,IAAMC,aAAa,GAAGF,UAAU,CAACG,KAAX,CAAiB,UAAjB,CAAtB;EACA,IAAI,CAACD,aAAa,CAACE,MAAnB,EAA2B;EAC3B,OAAOH,EAAE,CAACI,GAAH,CAAOH,aAAa,CAACI,GAAd,CAAkB,UAACC,IAAD,EAAK;IAAK,SAAE,CAACC,IAAH,CAAQD,IAAI,CAACE,IAAL,EAAR;EAAoB,CAAhD,CAAP,EAA0DC,IAA1D,CAA+Db,IAA/D,CAAP;AACD,CALD;;AAOA,OAAO,IAAMc,yBAAyB,GAAG,UAACC,iBAAD,EAAqC;EAC5E,wBAAiB,CAACC,QAAlB,CAA2B,EAA3B,EAA+Bd,iBAA/B;AAAiD,CAD5C;AAGP;;;;;;;;;;;AAUA,IAAMe,aAAa,GAAqB,UAACd,UAAD,EAAuB;EAC7D,IAAME,aAAa,GAAGF,UAAU,CAACG,KAAX,CAAiB,UAAjB,CAAtB;EACA,IAAMY,YAAY,GAAGf,UAAU,CAACG,KAAX,CAAiB,SAAjB,CAArB;EACA,IAAI,CAACD,aAAa,CAACE,MAAf,IAAyB,CAACW,YAAY,CAACX,MAA3C,EAAmD;EAEnD,IAAMY,KAAK,GAAgBhB,UAAU,CAACiB,MAAX,CAAkBC,WAA7C;EAEAH,YAAY,CAACI,OAAb,CAAqB,UAACC,EAAD,EAAe;IAAK,YAAK,CAACC,oBAAN,CAA2BD,EAA3B;EAA8B,CAAvE;EACAlB,aAAa,CAACiB,OAAd,CAAsB,UAACC,EAAD,EAAe;IAAK,YAAK,CAACE,kBAAN,CAAyBF,EAAzB;EAA4B,CAAtE;EAEAJ,KAAK,CAACO,IAAN;AACD,CAXD;;AAaA,OAAO,IAAMC,qBAAqB,GAAG,UAACZ,iBAAD,EAAqC;EACxE,wBAAiB,CAACa,SAAlB,CAA4B,EAA5B,EAAgCX,aAAhC;AAA8C,CADzC","names":["noop","services","loadEnteringViews","transition","$q","enteringViews","views","length","all","map","view","when","load","then","registerLoadEnteringViews","transitionService","onFinish","activateViews","exitingViews","$view","router","viewService","forEach","vc","deactivateViewConfig","activateViewConfig","sync","registerActivateViews","onSuccess"],"sources":["C:\\Users\\huang\\node_modules\\@uirouter\\core\\lib-esm\\hooks\\@uirouter\\core\\hooks\\views.ts"],"sourcesContent":["import { noop } from '../common/common';\nimport { services } from '../common/coreservices';\nimport { Transition } from '../transition/transition';\nimport { ViewService } from '../view/view';\nimport { ViewConfig } from '../view/interface';\nimport { TransitionHookFn } from '../transition/interface';\nimport { TransitionService } from '../transition/transitionService';\n\n/**\n * A [[TransitionHookFn]] which waits for the views to load\n *\n * Registered using `transitionService.onStart({}, loadEnteringViews);`\n *\n * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.\n * In angular 1, this includes loading the templates.\n */\nconst loadEnteringViews: TransitionHookFn = (transition: Transition) => {\n  const $q = services.$q;\n  const enteringViews = transition.views('entering');\n  if (!enteringViews.length) return;\n  return $q.all(enteringViews.map((view) => $q.when(view.load()))).then(noop);\n};\n\nexport const registerLoadEnteringViews = (transitionService: TransitionService) =>\n  transitionService.onFinish({}, loadEnteringViews);\n\n/**\n * A [[TransitionHookFn]] which activates the new views when a transition is successful.\n *\n * Registered using `transitionService.onSuccess({}, activateViews);`\n *\n * After a transition is complete, this hook deactivates the old views from the previous state,\n * and activates the new views from the destination state.\n *\n * See [[ViewService]]\n */\nconst activateViews: TransitionHookFn = (transition: Transition) => {\n  const enteringViews = transition.views('entering');\n  const exitingViews = transition.views('exiting');\n  if (!enteringViews.length && !exitingViews.length) return;\n\n  const $view: ViewService = transition.router.viewService;\n\n  exitingViews.forEach((vc: ViewConfig) => $view.deactivateViewConfig(vc));\n  enteringViews.forEach((vc: ViewConfig) => $view.activateViewConfig(vc));\n\n  $view.sync();\n};\n\nexport const registerActivateViews = (transitionService: TransitionService) =>\n  transitionService.onSuccess({}, activateViews);\n"]},"metadata":{},"sourceType":"module"}