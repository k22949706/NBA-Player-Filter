{"ast":null,"code":"import { isString, isFunction } from '../common/predicates';\nimport { services } from '../common/coreservices';\nimport { TargetState } from '../state/targetState';\n/**\n * A [[TransitionHookFn]] that redirects to a different state or params\n *\n * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`\n *\n * See [[StateDeclaration.redirectTo]]\n */\n\nvar redirectToHook = function (trans) {\n  var redirect = trans.to().redirectTo;\n  if (!redirect) return;\n  var $state = trans.router.stateService;\n\n  function handleResult(result) {\n    if (!result) return;\n    if (result instanceof TargetState) return result;\n    if (isString(result)) return $state.target(result, trans.params(), trans.options());\n    if (result['state'] || result['params']) return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());\n  }\n\n  if (isFunction(redirect)) {\n    return services.$q.when(redirect(trans)).then(handleResult);\n  }\n\n  return handleResult(redirect);\n};\n\nexport var registerRedirectToHook = function (transitionService) {\n  return transitionService.onStart({\n    to: function (state) {\n      return !!state.redirectTo;\n    }\n  }, redirectToHook);\n};","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,sBAArC;AAEA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAIA;;;;;;;;AAOA,IAAMC,cAAc,GAAqB,UAACC,KAAD,EAAkB;EACzD,IAAMC,QAAQ,GAAGD,KAAK,CAACE,EAAN,GAAWC,UAA5B;EACA,IAAI,CAACF,QAAL,EAAe;EAEf,IAAMG,MAAM,GAAGJ,KAAK,CAACK,MAAN,CAAaC,YAA5B;;EAEA,SAASC,YAAT,CAAsBC,MAAtB,EAAiC;IAC/B,IAAI,CAACA,MAAL,EAAa;IACb,IAAIA,MAAM,YAAYV,WAAtB,EAAmC,OAAOU,MAAP;IACnC,IAAIb,QAAQ,CAACa,MAAD,CAAZ,EAAsB,OAAOJ,MAAM,CAACK,MAAP,CAAmBD,MAAnB,EAA2BR,KAAK,CAACU,MAAN,EAA3B,EAA2CV,KAAK,CAACW,OAAN,EAA3C,CAAP;IACtB,IAAIH,MAAM,CAAC,OAAD,CAAN,IAAmBA,MAAM,CAAC,QAAD,CAA7B,EACE,OAAOJ,MAAM,CAACK,MAAP,CAAcD,MAAM,CAAC,OAAD,CAAN,IAAmBR,KAAK,CAACE,EAAN,EAAjC,EAA6CM,MAAM,CAAC,QAAD,CAAN,IAAoBR,KAAK,CAACU,MAAN,EAAjE,EAAiFV,KAAK,CAACW,OAAN,EAAjF,CAAP;EACH;;EAED,IAAIf,UAAU,CAACK,QAAD,CAAd,EAA0B;IACxB,OAAOJ,QAAQ,CAACe,EAAT,CAAYC,IAAZ,CAAiBZ,QAAQ,CAACD,KAAD,CAAzB,EAAkCc,IAAlC,CAAuCP,YAAvC,CAAP;EACD;;EACD,OAAOA,YAAY,CAACN,QAAD,CAAnB;AACD,CAlBD;;AAoBA,OAAO,IAAMc,sBAAsB,GAAG,UAACC,iBAAD,EAAqC;EACzE,wBAAiB,CAACC,OAAlB,CAA0B;IAAEf,EAAE,EAAE,UAACgB,KAAD,EAAM;MAAK,QAAC,CAACA,KAAK,CAACf,UAAR;IAAkB;EAAnC,CAA1B,EAAiEJ,cAAjE;AAAgF,CAD3E","names":["isString","isFunction","services","TargetState","redirectToHook","trans","redirect","to","redirectTo","$state","router","stateService","handleResult","result","target","params","options","$q","when","then","registerRedirectToHook","transitionService","onStart","state"],"sources":["C:\\Users\\huang\\node_modules\\@uirouter\\core\\lib-esm\\hooks\\@uirouter\\core\\hooks\\redirectTo.ts"],"sourcesContent":["import { isString, isFunction } from '../common/predicates';\nimport { Transition } from '../transition/transition';\nimport { services } from '../common/coreservices';\nimport { TargetState } from '../state/targetState';\nimport { TransitionService } from '../transition/transitionService';\nimport { TransitionHookFn } from '../transition/interface';\n\n/**\n * A [[TransitionHookFn]] that redirects to a different state or params\n *\n * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`\n *\n * See [[StateDeclaration.redirectTo]]\n */\nconst redirectToHook: TransitionHookFn = (trans: Transition) => {\n  const redirect = trans.to().redirectTo;\n  if (!redirect) return;\n\n  const $state = trans.router.stateService;\n\n  function handleResult(result: any) {\n    if (!result) return;\n    if (result instanceof TargetState) return result;\n    if (isString(result)) return $state.target(<any>result, trans.params(), trans.options());\n    if (result['state'] || result['params'])\n      return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());\n  }\n\n  if (isFunction(redirect)) {\n    return services.$q.when(redirect(trans)).then(handleResult);\n  }\n  return handleResult(redirect);\n};\n\nexport const registerRedirectToHook = (transitionService: TransitionService) =>\n  transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectToHook);\n"]},"metadata":{},"sourceType":"module"}