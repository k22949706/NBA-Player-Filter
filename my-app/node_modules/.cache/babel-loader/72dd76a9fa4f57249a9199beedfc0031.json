{"ast":null,"code":"import { TransitionHookScope, TransitionHookPhase } from './interface';\nimport { Transition } from './transition';\nimport { makeEvent } from './hookRegistry';\nimport { registerAddCoreResolvables, treeChangesCleanup } from '../hooks/coreResolvables';\nimport { registerRedirectToHook } from '../hooks/redirectTo';\nimport { registerOnExitHook, registerOnRetainHook, registerOnEnterHook } from '../hooks/onEnterExitRetain';\nimport { registerEagerResolvePath, registerLazyResolveState, registerResolveRemaining } from '../hooks/resolve';\nimport { registerLoadEnteringViews, registerActivateViews } from '../hooks/views';\nimport { registerUpdateGlobalState } from '../hooks/updateGlobals';\nimport { registerUpdateUrl } from '../hooks/url';\nimport { registerLazyLoadHook } from '../hooks/lazyLoad';\nimport { TransitionEventType } from './transitionEventType';\nimport { TransitionHook } from './transitionHook';\nimport { isDefined } from '../common/predicates';\nimport { removeFrom, values, createProxyFunctions } from '../common/common';\nimport { val } from '../common/hof';\nimport { registerIgnoredTransitionHook } from '../hooks/ignoredTransition';\nimport { registerInvalidTransitionHook } from '../hooks/invalidTransition';\n/**\n * The default [[Transition]] options.\n *\n * Include this object when applying custom defaults:\n * let reloadOpts = { reload: true, notify: true }\n * let options = defaults(theirOpts, customDefaults, defaultOptions);\n */\n\nexport var defaultTransOpts = {\n  location: true,\n  relative: null,\n  inherit: false,\n  notify: true,\n  reload: false,\n  supercede: true,\n  custom: {},\n  current: function () {\n    return null;\n  },\n  source: 'unknown'\n};\n/**\n * This class provides services related to Transitions.\n *\n * - Most importantly, it allows global Transition Hooks to be registered.\n * - It allows the default transition error handler to be set.\n * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).\n *\n * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.\n *\n * This API is located at `router.transitionService` ([[UIRouter.transitionService]])\n */\n\nvar TransitionService =\n/** @class */\nfunction () {\n  /** @internal */\n  function TransitionService(_router) {\n    /** @internal */\n    this._transitionCount = 0;\n    /** The transition hook types, such as `onEnter`, `onStart`, etc */\n\n    this._eventTypes = [];\n    /** @internal The registered transition hooks */\n\n    this._registeredHooks = {};\n    /** The  paths on a criteria object */\n\n    this._criteriaPaths = {};\n    this._router = _router;\n    this.$view = _router.viewService;\n    this._deregisterHookFns = {};\n    this._pluginapi = createProxyFunctions(val(this), {}, val(this), ['_definePathType', '_defineEvent', '_getPathTypes', '_getEvents', 'getHooks']);\n\n    this._defineCorePaths();\n\n    this._defineCoreEvents();\n\n    this._registerCoreTransitionHooks();\n\n    _router.globals.successfulTransitions.onEvict(treeChangesCleanup);\n  }\n  /**\n   * Registers a [[TransitionHookFn]], called *while a transition is being constructed*.\n   *\n   * Registers a transition lifecycle hook, which is invoked during transition construction.\n   *\n   * This low level hook should only be used by plugins.\n   * This can be a useful time for plugins to add resolves or mutate the transition as needed.\n   * The Sticky States plugin uses this hook to modify the treechanges.\n   *\n   * ### Lifecycle\n   *\n   * `onCreate` hooks are invoked *while a transition is being constructed*.\n   *\n   * ### Return value\n   *\n   * The hook's return value is ignored\n   *\n   * @internal\n   * @param criteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be invoked.\n   * @param options the registration options\n   * @returns a function which deregisters the hook.\n   */\n\n\n  TransitionService.prototype.onCreate = function (criteria, callback, options) {\n    return;\n  };\n  /** @inheritdoc */\n\n\n  TransitionService.prototype.onBefore = function (criteria, callback, options) {\n    return;\n  };\n  /** @inheritdoc */\n\n\n  TransitionService.prototype.onStart = function (criteria, callback, options) {\n    return;\n  };\n  /** @inheritdoc */\n\n\n  TransitionService.prototype.onExit = function (criteria, callback, options) {\n    return;\n  };\n  /** @inheritdoc */\n\n\n  TransitionService.prototype.onRetain = function (criteria, callback, options) {\n    return;\n  };\n  /** @inheritdoc */\n\n\n  TransitionService.prototype.onEnter = function (criteria, callback, options) {\n    return;\n  };\n  /** @inheritdoc */\n\n\n  TransitionService.prototype.onFinish = function (criteria, callback, options) {\n    return;\n  };\n  /** @inheritdoc */\n\n\n  TransitionService.prototype.onSuccess = function (criteria, callback, options) {\n    return;\n  };\n  /** @inheritdoc */\n\n\n  TransitionService.prototype.onError = function (criteria, callback, options) {\n    return;\n  };\n  /**\n   * dispose\n   * @internal\n   */\n\n\n  TransitionService.prototype.dispose = function (router) {\n    values(this._registeredHooks).forEach(function (hooksArray) {\n      return hooksArray.forEach(function (hook) {\n        hook._deregistered = true;\n        removeFrom(hooksArray, hook);\n      });\n    });\n  };\n  /**\n   * Creates a new [[Transition]] object\n   *\n   * This is a factory function for creating new Transition objects.\n   * It is used internally by the [[StateService]] and should generally not be called by application code.\n   *\n   * @internal\n   * @param fromPath the path to the current state (the from state)\n   * @param targetState the target state (destination)\n   * @returns a Transition\n   */\n\n\n  TransitionService.prototype.create = function (fromPath, targetState) {\n    return new Transition(fromPath, targetState, this._router);\n  };\n  /** @internal */\n\n\n  TransitionService.prototype._defineCoreEvents = function () {\n    var Phase = TransitionHookPhase;\n    var TH = TransitionHook;\n    var paths = this._criteriaPaths;\n    var NORMAL_SORT = false,\n        REVERSE_SORT = true;\n    var SYNCHRONOUS = true;\n\n    this._defineEvent('onCreate', Phase.CREATE, 0, paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.THROW_ERROR, SYNCHRONOUS);\n\n    this._defineEvent('onBefore', Phase.BEFORE, 0, paths.to);\n\n    this._defineEvent('onStart', Phase.RUN, 0, paths.to);\n\n    this._defineEvent('onExit', Phase.RUN, 100, paths.exiting, REVERSE_SORT);\n\n    this._defineEvent('onRetain', Phase.RUN, 200, paths.retained);\n\n    this._defineEvent('onEnter', Phase.RUN, 300, paths.entering);\n\n    this._defineEvent('onFinish', Phase.RUN, 400, paths.to);\n\n    this._defineEvent('onSuccess', Phase.SUCCESS, 0, paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.LOG_ERROR, SYNCHRONOUS);\n\n    this._defineEvent('onError', Phase.ERROR, 0, paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.LOG_ERROR, SYNCHRONOUS);\n  };\n  /** @internal */\n\n\n  TransitionService.prototype._defineCorePaths = function () {\n    var STATE = TransitionHookScope.STATE,\n        TRANSITION = TransitionHookScope.TRANSITION;\n\n    this._definePathType('to', TRANSITION);\n\n    this._definePathType('from', TRANSITION);\n\n    this._definePathType('exiting', STATE);\n\n    this._definePathType('retained', STATE);\n\n    this._definePathType('entering', STATE);\n  };\n  /** @internal */\n\n\n  TransitionService.prototype._defineEvent = function (name, hookPhase, hookOrder, criteriaMatchPath, reverseSort, getResultHandler, getErrorHandler, synchronous) {\n    if (reverseSort === void 0) {\n      reverseSort = false;\n    }\n\n    if (getResultHandler === void 0) {\n      getResultHandler = TransitionHook.HANDLE_RESULT;\n    }\n\n    if (getErrorHandler === void 0) {\n      getErrorHandler = TransitionHook.REJECT_ERROR;\n    }\n\n    if (synchronous === void 0) {\n      synchronous = false;\n    }\n\n    var eventType = new TransitionEventType(name, hookPhase, hookOrder, criteriaMatchPath, reverseSort, getResultHandler, getErrorHandler, synchronous);\n\n    this._eventTypes.push(eventType);\n\n    makeEvent(this, this, eventType);\n  };\n  /** @internal */\n\n\n  TransitionService.prototype._getEvents = function (phase) {\n    var transitionHookTypes = isDefined(phase) ? this._eventTypes.filter(function (type) {\n      return type.hookPhase === phase;\n    }) : this._eventTypes.slice();\n    return transitionHookTypes.sort(function (l, r) {\n      var cmpByPhase = l.hookPhase - r.hookPhase;\n      return cmpByPhase === 0 ? l.hookOrder - r.hookOrder : cmpByPhase;\n    });\n  };\n  /**\n   * Adds a Path to be used as a criterion against a TreeChanges path\n   *\n   * For example: the `exiting` path in [[HookMatchCriteria]] is a STATE scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('exiting', TransitionHookScope.STATE)`\n   * Each state in the exiting path is checked against the criteria and returned as part of the match.\n   *\n   * Another example: the `to` path in [[HookMatchCriteria]] is a TRANSITION scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('to', TransitionHookScope.TRANSITION)`\n   * Only the tail of the `to` path is checked against the criteria and returned as part of the match.\n   *\n   * @internal\n   */\n\n\n  TransitionService.prototype._definePathType = function (name, hookScope) {\n    this._criteriaPaths[name] = {\n      name: name,\n      scope: hookScope\n    };\n  };\n  /** @internal */\n  // tslint:disable-next-line\n\n\n  TransitionService.prototype._getPathTypes = function () {\n    return this._criteriaPaths;\n  };\n  /** @internal */\n\n\n  TransitionService.prototype.getHooks = function (hookName) {\n    return this._registeredHooks[hookName];\n  };\n  /** @internal */\n\n\n  TransitionService.prototype._registerCoreTransitionHooks = function () {\n    var fns = this._deregisterHookFns;\n    fns.addCoreResolves = registerAddCoreResolvables(this);\n    fns.ignored = registerIgnoredTransitionHook(this);\n    fns.invalid = registerInvalidTransitionHook(this); // Wire up redirectTo hook\n\n    fns.redirectTo = registerRedirectToHook(this); // Wire up onExit/Retain/Enter state hooks\n\n    fns.onExit = registerOnExitHook(this);\n    fns.onRetain = registerOnRetainHook(this);\n    fns.onEnter = registerOnEnterHook(this); // Wire up Resolve hooks\n\n    fns.eagerResolve = registerEagerResolvePath(this);\n    fns.lazyResolve = registerLazyResolveState(this);\n    fns.resolveAll = registerResolveRemaining(this); // Wire up the View management hooks\n\n    fns.loadViews = registerLoadEnteringViews(this);\n    fns.activateViews = registerActivateViews(this); // Updates global state after a transition\n\n    fns.updateGlobals = registerUpdateGlobalState(this); // After globals.current is updated at priority: 10000\n\n    fns.updateUrl = registerUpdateUrl(this); // Lazy load state trees\n\n    fns.lazyLoad = registerLazyLoadHook(this);\n  };\n\n  return TransitionService;\n}();\n\nexport { TransitionService };","map":{"version":3,"mappings":"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","names":["TransitionHookScope","TransitionHookPhase","Transition","makeEvent","registerAddCoreResolvables","treeChangesCleanup","registerRedirectToHook","registerOnExitHook","registerOnRetainHook","registerOnEnterHook","registerEagerResolvePath","registerLazyResolveState","registerResolveRemaining","registerLoadEnteringViews","registerActivateViews","registerUpdateGlobalState","registerUpdateUrl","registerLazyLoadHook","TransitionEventType","TransitionHook","isDefined","removeFrom","values","createProxyFunctions","val","registerIgnoredTransitionHook","registerInvalidTransitionHook","defaultTransOpts","location","relative","inherit","notify","reload","supercede","custom","current","source","_router","$view","viewService","_deregisterHookFns","_pluginapi","_defineCorePaths","_defineCoreEvents","_registerCoreTransitionHooks","globals","successfulTransitions","onEvict","TransitionService","criteria","callback","options","router","_registeredHooks","forEach","hooksArray","hook","_deregistered","fromPath","targetState","Phase","TH","paths","_criteriaPaths","NORMAL_SORT","REVERSE_SORT","SYNCHRONOUS","_defineEvent","CREATE","to","LOG_REJECTED_RESULT","THROW_ERROR","BEFORE","RUN","exiting","retained","entering","SUCCESS","LOG_ERROR","ERROR","TRANSITION","_definePathType","STATE","name","hookPhase","hookOrder","criteriaMatchPath","reverseSort","getResultHandler","getErrorHandler","synchronous","HANDLE_RESULT","REJECT_ERROR","eventType","_eventTypes","push","phase","transitionHookTypes","filter","type","slice","sort","l","r","cmpByPhase","hookScope","scope","hookName","fns","addCoreResolves","ignored","invalid","redirectTo","onExit","onRetain","onEnter","eagerResolve","lazyResolve","resolveAll","loadViews","activateViews","updateGlobals","updateUrl","lazyLoad"],"sources":["C:\\Users\\huang\\node_modules\\@uirouter\\core\\lib-esm\\transition\\@uirouter\\core\\transition\\transitionService.ts"],"sourcesContent":["import {\n  IHookRegistry,\n  TransitionOptions,\n  TransitionHookScope,\n  TransitionHookPhase,\n  TransitionCreateHookFn,\n  HookMatchCriteria,\n  HookRegOptions,\n  PathTypes,\n  PathType,\n  RegisteredHooks,\n  TransitionHookFn,\n  TransitionStateHookFn,\n} from './interface';\nimport { Transition } from './transition';\nimport { makeEvent, RegisteredHook } from './hookRegistry';\nimport { TargetState } from '../state/targetState';\nimport { PathNode } from '../path/pathNode';\nimport { ViewService } from '../view/view';\nimport { UIRouter } from '../router';\nimport { registerAddCoreResolvables, treeChangesCleanup } from '../hooks/coreResolvables';\nimport { registerRedirectToHook } from '../hooks/redirectTo';\nimport { registerOnExitHook, registerOnRetainHook, registerOnEnterHook } from '../hooks/onEnterExitRetain';\nimport { registerEagerResolvePath, registerLazyResolveState, registerResolveRemaining } from '../hooks/resolve';\nimport { registerLoadEnteringViews, registerActivateViews } from '../hooks/views';\nimport { registerUpdateGlobalState } from '../hooks/updateGlobals';\nimport { registerUpdateUrl } from '../hooks/url';\nimport { registerLazyLoadHook } from '../hooks/lazyLoad';\nimport { TransitionEventType } from './transitionEventType';\nimport { TransitionHook, GetResultHandler, GetErrorHandler } from './transitionHook';\nimport { isDefined } from '../common/predicates';\nimport { removeFrom, values, createProxyFunctions } from '../common/common';\nimport { Disposable } from '../interface'; // has or is using\nimport { val } from '../common/hof';\nimport { registerIgnoredTransitionHook } from '../hooks/ignoredTransition';\nimport { registerInvalidTransitionHook } from '../hooks/invalidTransition';\n\n/**\n * The default [[Transition]] options.\n *\n * Include this object when applying custom defaults:\n * let reloadOpts = { reload: true, notify: true }\n * let options = defaults(theirOpts, customDefaults, defaultOptions);\n */\nexport let defaultTransOpts: TransitionOptions = {\n  location: true,\n  relative: null,\n  inherit: false,\n  notify: true,\n  reload: false,\n  supercede: true,\n  custom: {},\n  current: () => null,\n  source: 'unknown',\n};\n\n/**\n * Plugin API for Transition Service\n */\nexport interface TransitionServicePluginAPI {\n  /**\n   * Adds a Path to be used as a criterion against a TreeChanges path\n   *\n   * For example: the `exiting` path in [[HookMatchCriteria]] is a STATE scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('exiting', TransitionHookScope.STATE)`\n   * Each state in the exiting path is checked against the criteria and returned as part of the match.\n   *\n   * Another example: the `to` path in [[HookMatchCriteria]] is a TRANSITION scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('to', TransitionHookScope.TRANSITION)`\n   * Only the tail of the `to` path is checked against the criteria and returned as part of the match.\n   */\n  _definePathType(name: string, hookScope: TransitionHookScope);\n\n  /**\n   * Gets a Path definition used as a criterion against a TreeChanges path\n   */\n  _getPathTypes(): PathTypes;\n\n  /**\n   * Defines a transition hook type and returns a transition hook registration\n   * function (which can then be used to register hooks of this type).\n   */\n  _defineEvent(\n    name: string,\n    hookPhase: TransitionHookPhase,\n    hookOrder: number,\n    criteriaMatchPath: PathType,\n    reverseSort?: boolean,\n    getResultHandler?: GetResultHandler,\n    getErrorHandler?: GetErrorHandler,\n    rejectIfSuperseded?: boolean\n  );\n\n  /**\n   * Returns the known event types, such as `onBefore`\n   * If a phase argument is provided, returns only events for the given phase.\n   */\n  _getEvents(phase?: TransitionHookPhase): TransitionEventType[];\n\n  /** Returns the hooks registered for the given hook name */\n  getHooks(hookName: string): RegisteredHook[];\n}\n\n/**\n * This class provides services related to Transitions.\n *\n * - Most importantly, it allows global Transition Hooks to be registered.\n * - It allows the default transition error handler to be set.\n * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).\n *\n * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.\n *\n * This API is located at `router.transitionService` ([[UIRouter.transitionService]])\n */\nexport class TransitionService implements IHookRegistry, Disposable {\n  /** @internal */\n  _transitionCount = 0;\n\n  /** @internal */\n  public $view: ViewService;\n\n  /** The transition hook types, such as `onEnter`, `onStart`, etc */\n  private _eventTypes: TransitionEventType[] = [];\n  /** @internal The registered transition hooks */\n  _registeredHooks = {} as RegisteredHooks;\n  /** The  paths on a criteria object */\n  private _criteriaPaths = {} as PathTypes;\n  private _router: UIRouter;\n\n  /** @internal */\n  _pluginapi: TransitionServicePluginAPI;\n\n  /**\n   * This object has hook de-registration functions for the built-in hooks.\n   * This can be used by third parties libraries that wish to customize the behaviors\n   *\n   * @internal\n   */\n  _deregisterHookFns: {\n    addCoreResolves: Function;\n    ignored: Function;\n    invalid: Function;\n    redirectTo: Function;\n    onExit: Function;\n    onRetain: Function;\n    onEnter: Function;\n    eagerResolve: Function;\n    lazyResolve: Function;\n    resolveAll: Function;\n    loadViews: Function;\n    activateViews: Function;\n    updateGlobals: Function;\n    updateUrl: Function;\n    lazyLoad: Function;\n  };\n\n  /** @internal */\n  constructor(_router: UIRouter) {\n    this._router = _router;\n    this.$view = _router.viewService;\n    this._deregisterHookFns = <any>{};\n    this._pluginapi = <TransitionServicePluginAPI>(\n      createProxyFunctions(val(this), {}, val(this), [\n        '_definePathType',\n        '_defineEvent',\n        '_getPathTypes',\n        '_getEvents',\n        'getHooks',\n      ])\n    );\n\n    this._defineCorePaths();\n    this._defineCoreEvents();\n    this._registerCoreTransitionHooks();\n    _router.globals.successfulTransitions.onEvict(treeChangesCleanup);\n  }\n\n  /**\n   * Registers a [[TransitionHookFn]], called *while a transition is being constructed*.\n   *\n   * Registers a transition lifecycle hook, which is invoked during transition construction.\n   *\n   * This low level hook should only be used by plugins.\n   * This can be a useful time for plugins to add resolves or mutate the transition as needed.\n   * The Sticky States plugin uses this hook to modify the treechanges.\n   *\n   * ### Lifecycle\n   *\n   * `onCreate` hooks are invoked *while a transition is being constructed*.\n   *\n   * ### Return value\n   *\n   * The hook's return value is ignored\n   *\n   * @internal\n   * @param criteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be invoked.\n   * @param options the registration options\n   * @returns a function which deregisters the hook.\n   */\n  onCreate(criteria: HookMatchCriteria, callback: TransitionCreateHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onBefore(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onStart(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onExit(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onRetain(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onEnter(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onFinish(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onSuccess(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n  /** @inheritdoc */\n  onError(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function {\n    return;\n  }\n\n  /**\n   * dispose\n   * @internal\n   */\n  dispose(router: UIRouter) {\n    values(this._registeredHooks).forEach((hooksArray: RegisteredHook[]) =>\n      hooksArray.forEach((hook) => {\n        hook._deregistered = true;\n        removeFrom(hooksArray, hook);\n      })\n    );\n  }\n\n  /**\n   * Creates a new [[Transition]] object\n   *\n   * This is a factory function for creating new Transition objects.\n   * It is used internally by the [[StateService]] and should generally not be called by application code.\n   *\n   * @internal\n   * @param fromPath the path to the current state (the from state)\n   * @param targetState the target state (destination)\n   * @returns a Transition\n   */\n  create(fromPath: PathNode[], targetState: TargetState): Transition {\n    return new Transition(fromPath, targetState, this._router);\n  }\n\n  /** @internal */\n  private _defineCoreEvents() {\n    const Phase = TransitionHookPhase;\n    const TH = TransitionHook;\n    const paths = this._criteriaPaths;\n    const NORMAL_SORT = false,\n      REVERSE_SORT = true;\n    const SYNCHRONOUS = true;\n\n    this._defineEvent(\n      'onCreate',\n      Phase.CREATE,\n      0,\n      paths.to,\n      NORMAL_SORT,\n      TH.LOG_REJECTED_RESULT,\n      TH.THROW_ERROR,\n      SYNCHRONOUS\n    );\n\n    this._defineEvent('onBefore', Phase.BEFORE, 0, paths.to);\n\n    this._defineEvent('onStart', Phase.RUN, 0, paths.to);\n    this._defineEvent('onExit', Phase.RUN, 100, paths.exiting, REVERSE_SORT);\n    this._defineEvent('onRetain', Phase.RUN, 200, paths.retained);\n    this._defineEvent('onEnter', Phase.RUN, 300, paths.entering);\n    this._defineEvent('onFinish', Phase.RUN, 400, paths.to);\n\n    this._defineEvent(\n      'onSuccess',\n      Phase.SUCCESS,\n      0,\n      paths.to,\n      NORMAL_SORT,\n      TH.LOG_REJECTED_RESULT,\n      TH.LOG_ERROR,\n      SYNCHRONOUS\n    );\n    this._defineEvent(\n      'onError',\n      Phase.ERROR,\n      0,\n      paths.to,\n      NORMAL_SORT,\n      TH.LOG_REJECTED_RESULT,\n      TH.LOG_ERROR,\n      SYNCHRONOUS\n    );\n  }\n\n  /** @internal */\n  private _defineCorePaths() {\n    const { STATE, TRANSITION } = TransitionHookScope;\n\n    this._definePathType('to', TRANSITION);\n    this._definePathType('from', TRANSITION);\n    this._definePathType('exiting', STATE);\n    this._definePathType('retained', STATE);\n    this._definePathType('entering', STATE);\n  }\n\n  /** @internal */\n  _defineEvent(\n    name: string,\n    hookPhase: TransitionHookPhase,\n    hookOrder: number,\n    criteriaMatchPath: PathType,\n    reverseSort = false,\n    getResultHandler: GetResultHandler = TransitionHook.HANDLE_RESULT,\n    getErrorHandler: GetErrorHandler = TransitionHook.REJECT_ERROR,\n    synchronous = false\n  ) {\n    const eventType = new TransitionEventType(\n      name,\n      hookPhase,\n      hookOrder,\n      criteriaMatchPath,\n      reverseSort,\n      getResultHandler,\n      getErrorHandler,\n      synchronous\n    );\n\n    this._eventTypes.push(eventType);\n    makeEvent(this, this, eventType);\n  }\n\n  /** @internal */\n  private _getEvents(phase?: TransitionHookPhase): TransitionEventType[] {\n    const transitionHookTypes = isDefined(phase)\n      ? this._eventTypes.filter((type) => type.hookPhase === phase)\n      : this._eventTypes.slice();\n\n    return transitionHookTypes.sort((l, r) => {\n      const cmpByPhase = l.hookPhase - r.hookPhase;\n      return cmpByPhase === 0 ? l.hookOrder - r.hookOrder : cmpByPhase;\n    });\n  }\n\n  /**\n   * Adds a Path to be used as a criterion against a TreeChanges path\n   *\n   * For example: the `exiting` path in [[HookMatchCriteria]] is a STATE scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('exiting', TransitionHookScope.STATE)`\n   * Each state in the exiting path is checked against the criteria and returned as part of the match.\n   *\n   * Another example: the `to` path in [[HookMatchCriteria]] is a TRANSITION scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('to', TransitionHookScope.TRANSITION)`\n   * Only the tail of the `to` path is checked against the criteria and returned as part of the match.\n   *\n   * @internal\n   */\n  private _definePathType(name: string, hookScope: TransitionHookScope) {\n    this._criteriaPaths[name] = { name, scope: hookScope };\n  }\n\n  /** @internal */\n  // tslint:disable-next-line\n  private _getPathTypes(): PathTypes {\n    return this._criteriaPaths;\n  }\n\n  /** @internal */\n  public getHooks(hookName: string): RegisteredHook[] {\n    return this._registeredHooks[hookName];\n  }\n\n  /** @internal */\n  private _registerCoreTransitionHooks() {\n    const fns = this._deregisterHookFns;\n\n    fns.addCoreResolves = registerAddCoreResolvables(this);\n    fns.ignored = registerIgnoredTransitionHook(this);\n    fns.invalid = registerInvalidTransitionHook(this);\n\n    // Wire up redirectTo hook\n    fns.redirectTo = registerRedirectToHook(this);\n\n    // Wire up onExit/Retain/Enter state hooks\n    fns.onExit = registerOnExitHook(this);\n    fns.onRetain = registerOnRetainHook(this);\n    fns.onEnter = registerOnEnterHook(this);\n\n    // Wire up Resolve hooks\n    fns.eagerResolve = registerEagerResolvePath(this);\n    fns.lazyResolve = registerLazyResolveState(this);\n    fns.resolveAll = registerResolveRemaining(this);\n\n    // Wire up the View management hooks\n    fns.loadViews = registerLoadEnteringViews(this);\n    fns.activateViews = registerActivateViews(this);\n\n    // Updates global state after a transition\n    fns.updateGlobals = registerUpdateGlobalState(this);\n\n    // After globals.current is updated at priority: 10000\n    fns.updateUrl = registerUpdateUrl(this);\n\n    // Lazy load state trees\n    fns.lazyLoad = registerLazyLoadHook(this);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}