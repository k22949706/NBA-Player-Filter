{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable prefer-const */\n\n/**\n * # Angular 1 Directives\n *\n * These are the directives included in UI-Router for Angular 1.\n * These directives are used in templates to create viewports and link/navigate to states.\n *\n * @preferred @publicapi @module directives\n */\n\n/** */\nimport { ng as angular } from '../angular';\nimport { extend, forEach, tail, isString, isObject, isArray, parse, noop, unnestR, identity, uniqR, inArray, removeFrom } from '@uirouter/core';\n/** @hidden */\n\nfunction parseStateRef(ref) {\n  var paramsOnly = ref.match(/^\\s*({[^}]*})\\s*$/);\n  if (paramsOnly) ref = '(' + paramsOnly[1] + ')';\n  var parsed = ref.replace(/\\n/g, ' ').match(/^\\s*([^(]*?)\\s*(\\((.*)\\))?\\s*$/);\n  if (!parsed || parsed.length !== 4) throw new Error(\"Invalid state ref '\" + ref + \"'\");\n  return {\n    state: parsed[1] || null,\n    paramExpr: parsed[3] || null\n  };\n}\n/** @hidden */\n\n\nfunction stateContext(el) {\n  var $uiView = el.parent().inheritedData('$uiView');\n  var path = parse('$cfg.path')($uiView);\n  return path ? tail(path).state.name : undefined;\n}\n/** @hidden */\n\n\nfunction processedDef($state, $element, def) {\n  var uiState = def.uiState || $state.current.name;\n  var uiStateOpts = extend(defaultOpts($element, $state), def.uiStateOpts || {});\n  var href = $state.href(uiState, def.uiStateParams, uiStateOpts);\n  return {\n    uiState: uiState,\n    uiStateParams: def.uiStateParams,\n    uiStateOpts: uiStateOpts,\n    href: href\n  };\n}\n/** @hidden */\n\n\nfunction getTypeInfo(el) {\n  // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.\n  var isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';\n  var isForm = el[0].nodeName === 'FORM';\n  return {\n    attr: isForm ? 'action' : isSvg ? 'xlink:href' : 'href',\n    isAnchor: el.prop('tagName').toUpperCase() === 'A',\n    clickable: !isForm\n  };\n}\n/** @hidden */\n\n\nfunction clickHook(el, $state, $timeout, type, getDef) {\n  return function (e) {\n    var button = e.which || e.button,\n        target = getDef();\n\n    if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || e.altKey || el.attr('target'))) {\n      // HACK: This is to allow ng-clicks to be processed before the transition is initiated:\n      var transition_1 = $timeout(function () {\n        if (!el.attr('disabled')) {\n          $state.go(target.uiState, target.uiStateParams, target.uiStateOpts);\n        }\n      });\n      e.preventDefault(); // if the state has no URL, ignore one preventDefault from the <a> directive.\n\n      var ignorePreventDefaultCount_1 = type.isAnchor && !target.href ? 1 : 0;\n\n      e.preventDefault = function () {\n        if (ignorePreventDefaultCount_1-- <= 0) $timeout.cancel(transition_1);\n      };\n    }\n  };\n}\n/** @hidden */\n\n\nfunction defaultOpts(el, $state) {\n  return {\n    relative: stateContext(el) || $state.$current,\n    inherit: true,\n    source: 'sref'\n  };\n}\n/** @hidden */\n\n\nfunction bindEvents(element, scope, hookFn, uiStateOpts) {\n  var events;\n\n  if (uiStateOpts) {\n    events = uiStateOpts.events;\n  }\n\n  if (!isArray(events)) {\n    events = ['click'];\n  }\n\n  var on = element.on ? 'on' : 'bind';\n\n  for (var _i = 0, events_1 = events; _i < events_1.length; _i++) {\n    var event_1 = events_1[_i];\n    element[on](event_1, hookFn);\n  }\n\n  scope.$on('$destroy', function () {\n    var off = element.off ? 'off' : 'unbind';\n\n    for (var _i = 0, events_2 = events; _i < events_2.length; _i++) {\n      var event_2 = events_2[_i];\n      element[off](event_2, hookFn);\n    }\n  });\n}\n/**\n * `ui-sref`: A directive for linking to a state\n *\n * A directive which links to a state (and optionally, parameters).\n * When clicked, this directive activates the linked state with the supplied parameter values.\n *\n * ### Linked State\n * The attribute value of the `ui-sref` is the name of the state to link to.\n *\n * #### Example:\n * This will activate the `home` state when the link is clicked.\n * ```html\n * <a ui-sref=\"home\">Home</a>\n * ```\n *\n * ### Relative Links\n * You can also use relative state paths within `ui-sref`, just like a relative path passed to `$state.go()` ([[StateService.go]]).\n * You just need to be aware that the path is relative to the state that *created* the link.\n * This allows a state to create a relative `ui-sref` which always targets the same destination.\n *\n * #### Example:\n * Both these links are relative to the parent state, even when a child state is currently active.\n * ```html\n * <a ui-sref=\".child1\">child 1 state</a>\n * <a ui-sref=\".child2\">child 2 state</a>\n * ```\n *\n * This link activates the parent state.\n * ```html\n * <a ui-sref=\"^\">Return</a>\n * ```\n *\n * ### hrefs\n * If the linked state has a URL, the directive will automatically generate and\n * update the `href` attribute (using the [[StateService.href]]  method).\n *\n * #### Example:\n * Assuming the `users` state has a url of `/users/`\n * ```html\n * <a ui-sref=\"users\" href=\"/users/\">Users</a>\n * ```\n *\n * ### Parameter Values\n * In addition to the state name, a `ui-sref` can include parameter values which are applied when activating the state.\n * Param values can be provided in the `ui-sref` value after the state name, enclosed by parentheses.\n * The content inside the parentheses is an expression, evaluated to the parameter values.\n *\n * #### Example:\n * This example renders a list of links to users.\n * The state's `userId` parameter value comes from each user's `user.id` property.\n * ```html\n * <li ng-repeat=\"user in users\">\n *   <a ui-sref=\"users.detail({ userId: user.id })\">{{ user.displayName }}</a>\n * </li>\n * ```\n *\n * Note:\n * The parameter values expression is `$watch`ed for updates.\n *\n * ### Transition Options\n * You can specify [[TransitionOptions]] to pass to [[StateService.go]] by using the `ui-sref-opts` attribute.\n * Options are restricted to `location`, `inherit`, and `reload`.\n *\n * #### Example:\n * ```html\n * <a ui-sref=\"home\" ui-sref-opts=\"{ reload: true }\">Home</a>\n * ```\n *\n * ### Other DOM Events\n *\n * You can also customize which DOM events to respond to (instead of `click`) by\n * providing an `events` array in the `ui-sref-opts` attribute.\n *\n * #### Example:\n * ```html\n * <input type=\"text\" ui-sref=\"contacts\" ui-sref-opts=\"{ events: ['change', 'blur'] }\">\n * ```\n *\n * ### Highlighting the active link\n * This directive can be used in conjunction with [[uiSrefActive]] to highlight the active link.\n *\n * ### Examples\n * If you have the following template:\n *\n * ```html\n * <a ui-sref=\"home\">Home</a>\n * <a ui-sref=\"about\">About</a>\n * <a ui-sref=\"{page: 2}\">Next page</a>\n *\n * <ul>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a ui-sref=\"contacts.detail({ id: contact.id })\">{{ contact.name }}</a>\n *     </li>\n * </ul>\n * ```\n *\n * Then (assuming the current state is `contacts`) the rendered html including hrefs would be:\n *\n * ```html\n * <a href=\"#/home\" ui-sref=\"home\">Home</a>\n * <a href=\"#/about\" ui-sref=\"about\">About</a>\n * <a href=\"#/contacts?page=2\" ui-sref=\"{page: 2}\">Next page</a>\n *\n * <ul>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/1\" ui-sref=\"contacts.detail({ id: contact.id })\">Joe</a>\n *     </li>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/2\" ui-sref=\"contacts.detail({ id: contact.id })\">Alice</a>\n *     </li>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/3\" ui-sref=\"contacts.detail({ id: contact.id })\">Bob</a>\n *     </li>\n * </ul>\n *\n * <a href=\"#/home\" ui-sref=\"home\" ui-sref-opts=\"{reload: true}\">Home</a>\n * ```\n *\n * ### Notes\n *\n * - You can use `ui-sref` to change **only the parameter values** by omitting the state name and parentheses.\n * #### Example:\n * Sets the `lang` parameter to `en` and remains on the same state.\n *\n * ```html\n * <a ui-sref=\"{ lang: 'en' }\">English</a>\n * ```\n *\n * - A middle-click, right-click, or ctrl-click is handled (natively) by the browser to open the href in a new window, for example.\n *\n * - Unlike the parameter values expression, the state name is not `$watch`ed (for performance reasons).\n * If you need to dynamically update the state being linked to, use the fully dynamic [[uiState]] directive.\n */\n\n\nvar uiSrefDirective;\nuiSrefDirective = ['$uiRouter', '$timeout', function $StateRefDirective($uiRouter, $timeout) {\n  var $state = $uiRouter.stateService;\n  return {\n    restrict: 'A',\n    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n    link: function (scope, element, attrs, uiSrefActive) {\n      var type = getTypeInfo(element);\n      var active = uiSrefActive[1] || uiSrefActive[0];\n      var unlinkInfoFn = null;\n      var rawDef = {};\n\n      var getDef = function () {\n        return processedDef($state, element, rawDef);\n      };\n\n      var ref = parseStateRef(attrs.uiSref);\n      rawDef.uiState = ref.state;\n      rawDef.uiStateOpts = attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {};\n\n      function update() {\n        var def = getDef();\n        if (unlinkInfoFn) unlinkInfoFn();\n        if (active) unlinkInfoFn = active.$$addStateInfo(def.uiState, def.uiStateParams);\n        if (def.href != null) attrs.$set(type.attr, def.href);\n      }\n\n      if (ref.paramExpr) {\n        scope.$watch(ref.paramExpr, function (val) {\n          rawDef.uiStateParams = extend({}, val);\n          update();\n        }, true);\n        rawDef.uiStateParams = extend({}, scope.$eval(ref.paramExpr));\n      }\n\n      update();\n      scope.$on('$destroy', $uiRouter.stateRegistry.onStatesChanged(update));\n      scope.$on('$destroy', $uiRouter.transitionService.onSuccess({}, update));\n      if (!type.clickable) return;\n      var hookFn = clickHook(element, $state, $timeout, type, getDef);\n      bindEvents(element, scope, hookFn, rawDef.uiStateOpts);\n    }\n  };\n}];\n/**\n * `ui-state`: A fully dynamic directive for linking to a state\n *\n * A directive which links to a state (and optionally, parameters).\n * When clicked, this directive activates the linked state with the supplied parameter values.\n *\n * **This directive is very similar to [[uiSref]], but it `$observe`s and `$watch`es/evaluates all its inputs.**\n *\n * A directive which links to a state (and optionally, parameters).\n * When clicked, this directive activates the linked state with the supplied parameter values.\n *\n * ### Linked State\n * The attribute value of `ui-state` is an expression which is `$watch`ed and evaluated as the state to link to.\n * **This is in contrast with `ui-sref`, which takes a state name as a string literal.**\n *\n * #### Example:\n * Create a list of links.\n * ```html\n * <li ng-repeat=\"link in navlinks\">\n *   <a ui-state=\"link.state\">{{ link.displayName }}</a>\n * </li>\n * ```\n *\n * ### Relative Links\n * If the expression evaluates to a relative path, it is processed like [[uiSref]].\n * You just need to be aware that the path is relative to the state that *created* the link.\n * This allows a state to create relative `ui-state` which always targets the same destination.\n *\n * ### hrefs\n * If the linked state has a URL, the directive will automatically generate and\n * update the `href` attribute (using the [[StateService.href]]  method).\n *\n * ### Parameter Values\n * In addition to the state name expression, a `ui-state` can include parameter values which are applied when activating the state.\n * Param values should be provided using the `ui-state-params` attribute.\n * The `ui-state-params` attribute value is `$watch`ed and evaluated as an expression.\n *\n * #### Example:\n * This example renders a list of links with param values.\n * The state's `userId` parameter value comes from each user's `user.id` property.\n * ```html\n * <li ng-repeat=\"link in navlinks\">\n *   <a ui-state=\"link.state\" ui-state-params=\"link.params\">{{ link.displayName }}</a>\n * </li>\n * ```\n *\n * ### Transition Options\n * You can specify [[TransitionOptions]] to pass to [[StateService.go]] by using the `ui-state-opts` attribute.\n * Options are restricted to `location`, `inherit`, and `reload`.\n * The value of the `ui-state-opts` is `$watch`ed and evaluated as an expression.\n *\n * #### Example:\n * ```html\n * <a ui-state=\"returnto.state\" ui-state-opts=\"{ reload: true }\">Home</a>\n * ```\n *\n * ### Other DOM Events\n *\n * You can also customize which DOM events to respond to (instead of `click`) by\n * providing an `events` array in the `ui-state-opts` attribute.\n *\n * #### Example:\n * ```html\n * <input type=\"text\" ui-state=\"contacts\" ui-state-opts=\"{ events: ['change', 'blur'] }\">\n * ```\n *\n * ### Highlighting the active link\n * This directive can be used in conjunction with [[uiSrefActive]] to highlight the active link.\n *\n * ### Notes\n *\n * - You can use `ui-params` to change **only the parameter values** by omitting the state name and supplying only `ui-state-params`.\n *   However, it might be simpler to use [[uiSref]] parameter-only links.\n *\n * #### Example:\n * Sets the `lang` parameter to `en` and remains on the same state.\n *\n * ```html\n * <a ui-state=\"\" ui-state-params=\"{ lang: 'en' }\">English</a>\n * ```\n *\n * - A middle-click, right-click, or ctrl-click is handled (natively) by the browser to open the href in a new window, for example.\n * ```\n */\n\nvar uiStateDirective;\nuiStateDirective = ['$uiRouter', '$timeout', function $StateRefDynamicDirective($uiRouter, $timeout) {\n  var $state = $uiRouter.stateService;\n  return {\n    restrict: 'A',\n    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n    link: function (scope, element, attrs, uiSrefActive) {\n      var type = getTypeInfo(element);\n      var active = uiSrefActive[1] || uiSrefActive[0];\n      var unlinkInfoFn = null;\n      var hookFn;\n      var rawDef = {};\n\n      var getDef = function () {\n        return processedDef($state, element, rawDef);\n      };\n\n      var inputAttrs = ['uiState', 'uiStateParams', 'uiStateOpts'];\n      var watchDeregFns = inputAttrs.reduce(function (acc, attr) {\n        return acc[attr] = noop, acc;\n      }, {});\n\n      function update() {\n        var def = getDef();\n        if (unlinkInfoFn) unlinkInfoFn();\n        if (active) unlinkInfoFn = active.$$addStateInfo(def.uiState, def.uiStateParams);\n        if (def.href != null) attrs.$set(type.attr, def.href);\n      }\n\n      inputAttrs.forEach(function (field) {\n        rawDef[field] = attrs[field] ? scope.$eval(attrs[field]) : null;\n        attrs.$observe(field, function (expr) {\n          watchDeregFns[field]();\n          watchDeregFns[field] = scope.$watch(expr, function (newval) {\n            rawDef[field] = newval;\n            update();\n          }, true);\n        });\n      });\n      update();\n      scope.$on('$destroy', $uiRouter.stateRegistry.onStatesChanged(update));\n      scope.$on('$destroy', $uiRouter.transitionService.onSuccess({}, update));\n      if (!type.clickable) return;\n      hookFn = clickHook(element, $state, $timeout, type, getDef);\n      bindEvents(element, scope, hookFn, rawDef.uiStateOpts);\n    }\n  };\n}];\n/**\n * `ui-sref-active` and `ui-sref-active-eq`: A directive that adds a CSS class when a `ui-sref` is active\n *\n * A directive working alongside [[uiSref]] and [[uiState]] to add classes to an element when the\n * related directive's state is active (and remove them when it is inactive).\n *\n * The primary use-case is to highlight the active link in navigation menus,\n * distinguishing it from the inactive menu items.\n *\n * ### Linking to a `ui-sref` or `ui-state`\n * `ui-sref-active` can live on the same element as `ui-sref`/`ui-state`, or it can be on a parent element.\n * If a `ui-sref-active` is a parent to more than one `ui-sref`/`ui-state`, it will apply the CSS class when **any of the links are active**.\n *\n * ### Matching\n *\n * The `ui-sref-active` directive applies the CSS class when the `ui-sref`/`ui-state`'s target state **or any child state is active**.\n * This is a \"fuzzy match\" which uses [[StateService.includes]].\n *\n * The `ui-sref-active-eq` directive applies the CSS class when the `ui-sref`/`ui-state`'s target state is directly active (not when child states are active).\n * This is an \"exact match\" which uses [[StateService.is]].\n *\n * ### Parameter values\n * If the `ui-sref`/`ui-state` includes parameter values, the current parameter values must match the link's values for the link to be highlighted.\n * This allows a list of links to the same state with different parameters to be rendered, and the correct one highlighted.\n *\n * #### Example:\n * ```html\n * <li ng-repeat=\"user in users\" ui-sref-active=\"active\">\n *   <a ui-sref=\"user.details({ userId: user.id })\">{{ user.lastName }}</a>\n * </li>\n * ```\n *\n * ### Examples\n *\n * Given the following template:\n * #### Example:\n * ```html\n * <ul>\n *   <li ui-sref-active=\"active\" class=\"item\">\n *     <a href ui-sref=\"app.user({user: 'bilbobaggins'})\">@bilbobaggins</a>\n *   </li>\n * </ul>\n * ```\n *\n * When the app state is `app.user` (or any child state),\n * and contains the state parameter \"user\" with value \"bilbobaggins\",\n * the resulting HTML will appear as (note the 'active' class):\n *\n * ```html\n * <ul>\n *   <li ui-sref-active=\"active\" class=\"item active\">\n *     <a ui-sref=\"app.user({user: 'bilbobaggins'})\" href=\"/users/bilbobaggins\">@bilbobaggins</a>\n *   </li>\n * </ul>\n * ```\n *\n * ### Glob mode\n *\n * It is possible to pass `ui-sref-active` an expression that evaluates to an object.\n * The objects keys represent active class names and values represent the respective state names/globs.\n * `ui-sref-active` will match if the current active state **includes** any of\n * the specified state names/globs, even the abstract ones.\n *\n * #### Example:\n * Given the following template, with \"admin\" being an abstract state:\n * ```html\n * <div ui-sref-active=\"{'active': 'admin.**'}\">\n *   <a ui-sref-active=\"active\" ui-sref=\"admin.roles\">Roles</a>\n * </div>\n * ```\n *\n * Arrays are also supported as values in the `ngClass`-like interface.\n * This allows multiple states to add `active` class.\n *\n * #### Example:\n * Given the following template, with \"admin.roles\" being the current state, the class will be added too:\n * ```html\n * <div ui-sref-active=\"{'active': ['owner.**', 'admin.**']}\">\n *   <a ui-sref-active=\"active\" ui-sref=\"admin.roles\">Roles</a>\n * </div>\n * ```\n *\n * When the current state is \"admin.roles\" the \"active\" class will be applied to both the `<div>` and `<a>` elements.\n * It is important to note that the state names/globs passed to `ui-sref-active` override any state provided by a linked `ui-sref`.\n *\n * ### Notes:\n *\n * - The class name is interpolated **once** during the directives link time (any further changes to the\n * interpolated value are ignored).\n *\n * - Multiple classes may be specified in a space-separated format: `ui-sref-active='class1 class2 class3'`\n */\n\nvar uiSrefActiveDirective;\nuiSrefActiveDirective = ['$state', '$stateParams', '$interpolate', '$uiRouter', function $StateRefActiveDirective($state, $stateParams, $interpolate, $uiRouter) {\n  return {\n    restrict: 'A',\n    controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\n      var states = [];\n      var activeEqClass;\n      var uiSrefActive; // There probably isn't much point in $observing this\n      // uiSrefActive and uiSrefActiveEq share the same directive object with some\n      // slight difference in logic routing\n\n      activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);\n\n      try {\n        uiSrefActive = $scope.$eval($attrs.uiSrefActive);\n      } catch (e) {// Do nothing. uiSrefActive is not a valid expression.\n        // Fall back to using $interpolate below\n      }\n\n      uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);\n      setStatesFromDefinitionObject(uiSrefActive); // Allow uiSref to communicate with uiSrefActive[Equals]\n\n      this.$$addStateInfo = function (newState, newParams) {\n        // we already got an explicit state provided by ui-sref-active, so we\n        // shadow the one that comes from ui-sref\n        if (isObject(uiSrefActive) && states.length > 0) {\n          return;\n        }\n\n        var deregister = addState(newState, newParams, uiSrefActive);\n        update();\n        return deregister;\n      };\n\n      function updateAfterTransition(trans) {\n        trans.promise.then(update, noop);\n      }\n\n      $scope.$on('$destroy', setupEventListeners());\n\n      if ($uiRouter.globals.transition) {\n        updateAfterTransition($uiRouter.globals.transition);\n      }\n\n      function setupEventListeners() {\n        var deregisterStatesChangedListener = $uiRouter.stateRegistry.onStatesChanged(handleStatesChanged);\n        var deregisterOnStartListener = $uiRouter.transitionService.onStart({}, updateAfterTransition);\n        var deregisterStateChangeSuccessListener = $scope.$on('$stateChangeSuccess', update);\n        return function cleanUp() {\n          deregisterStatesChangedListener();\n          deregisterOnStartListener();\n          deregisterStateChangeSuccessListener();\n        };\n      }\n\n      function handleStatesChanged() {\n        setStatesFromDefinitionObject(uiSrefActive);\n      }\n\n      function setStatesFromDefinitionObject(statesDefinition) {\n        if (isObject(statesDefinition)) {\n          states = [];\n          forEach(statesDefinition, function (stateOrName, activeClass) {\n            // Helper function to abstract adding state.\n            var addStateForClass = function (stateOrName, activeClass) {\n              var ref = parseStateRef(stateOrName);\n              addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);\n            };\n\n            if (isString(stateOrName)) {\n              // If state is string, just add it.\n              addStateForClass(stateOrName, activeClass);\n            } else if (isArray(stateOrName)) {\n              // If state is an array, iterate over it and add each array item individually.\n              forEach(stateOrName, function (stateOrName) {\n                addStateForClass(stateOrName, activeClass);\n              });\n            }\n          });\n        }\n      }\n\n      function addState(stateName, stateParams, activeClass) {\n        var state = $state.get(stateName, stateContext($element));\n        var stateInfo = {\n          state: state || {\n            name: stateName\n          },\n          params: stateParams,\n          activeClass: activeClass\n        };\n        states.push(stateInfo);\n        return function removeState() {\n          removeFrom(states)(stateInfo);\n        };\n      } // Update route state\n\n\n      function update() {\n        var splitClasses = function (str) {\n          return str.split(/\\s/).filter(identity);\n        };\n\n        var getClasses = function (stateList) {\n          return stateList.map(function (x) {\n            return x.activeClass;\n          }).map(splitClasses).reduce(unnestR, []);\n        };\n\n        var allClasses = getClasses(states).concat(splitClasses(activeEqClass)).reduce(uniqR, []);\n        var fuzzyClasses = getClasses(states.filter(function (x) {\n          return $state.includes(x.state.name, x.params);\n        }));\n        var exactlyMatchesAny = !!states.filter(function (x) {\n          return $state.is(x.state.name, x.params);\n        }).length;\n        var exactClasses = exactlyMatchesAny ? splitClasses(activeEqClass) : [];\n        var addClasses = fuzzyClasses.concat(exactClasses).reduce(uniqR, []);\n        var removeClasses = allClasses.filter(function (cls) {\n          return !inArray(addClasses, cls);\n        });\n        $scope.$evalAsync(function () {\n          addClasses.forEach(function (className) {\n            return $element.addClass(className);\n          });\n          removeClasses.forEach(function (className) {\n            return $element.removeClass(className);\n          });\n        });\n      }\n\n      update();\n    }]\n  };\n}];\nangular.module('ui.router.state').directive('uiSref', uiSrefDirective).directive('uiSrefActive', uiSrefActiveDirective).directive('uiSrefActiveEq', uiSrefActiveDirective).directive('uiState', uiStateDirective);","map":{"version":3,"mappings":"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","names":["ng","angular","extend","forEach","tail","isString","isObject","isArray","parse","noop","unnestR","identity","uniqR","inArray","removeFrom","parseStateRef","ref","paramsOnly","match","parsed","replace","length","Error","state","paramExpr","stateContext","el","$uiView","parent","inheritedData","path","name","undefined","processedDef","$state","$element","def","uiState","current","uiStateOpts","defaultOpts","href","uiStateParams","getTypeInfo","isSvg","Object","prototype","toString","call","prop","isForm","nodeName","attr","isAnchor","toUpperCase","clickable","clickHook","$timeout","type","getDef","e","button","which","target","ctrlKey","metaKey","shiftKey","altKey","transition_1","go","preventDefault","ignorePreventDefaultCount_1","cancel","relative","$current","inherit","source","bindEvents","element","scope","hookFn","events","on","_i","event_1","$on","off","event_2","uiSrefDirective","$StateRefDirective","$uiRouter","stateService","restrict","require","link","attrs","uiSrefActive","active","unlinkInfoFn","rawDef","uiSref","uiSrefOpts","$eval","update","$$addStateInfo","$set","$watch","val","stateRegistry","onStatesChanged","transitionService","onSuccess","uiStateDirective","$StateRefDynamicDirective","inputAttrs","watchDeregFns","reduce","acc","field","$observe","expr","newval","uiSrefActiveDirective","$StateRefActiveDirective","$stateParams","$interpolate","controller","$scope","$attrs","states","activeEqClass","uiSrefActiveEq","setStatesFromDefinitionObject","newState","newParams","deregister","addState","updateAfterTransition","trans","promise","then","setupEventListeners","globals","transition","deregisterStatesChangedListener","handleStatesChanged","deregisterOnStartListener","onStart","deregisterStateChangeSuccessListener","cleanUp","statesDefinition","stateOrName","activeClass","addStateForClass","stateName","stateParams","get","stateInfo","params","push","removeState","splitClasses","str","split","filter","getClasses","stateList","map","x","allClasses","concat","fuzzyClasses","includes","exactlyMatchesAny","is","exactClasses","addClasses","removeClasses","cls","$evalAsync","className","addClass","removeClass","module","directive"],"sources":["C:\\Users\\huang\\node_modules\\@uirouter\\angularjs\\lib-esm\\directives\\@uirouter\\angularjs\\directives\\stateDirectives.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable prefer-const */\n/**\n * # Angular 1 Directives\n *\n * These are the directives included in UI-Router for Angular 1.\n * These directives are used in templates to create viewports and link/navigate to states.\n *\n * @preferred @publicapi @module directives\n */ /** */\nimport { ng as angular } from '../angular';\nimport { IAugmentedJQuery, ITimeoutService, IScope, IInterpolateService } from 'angular';\n\nimport {\n  Obj,\n  extend,\n  forEach,\n  tail,\n  isString,\n  isObject,\n  isArray,\n  parse,\n  noop,\n  unnestR,\n  identity,\n  uniqR,\n  inArray,\n  removeFrom,\n  RawParams,\n  PathNode,\n  StateOrName,\n  StateService,\n  StateDeclaration,\n  UIRouter,\n} from '@uirouter/core';\nimport { UIViewData } from './viewDirective';\n\n/** @hidden Used for typedoc */\nexport interface ng1_directive {}\n\n/** @hidden */\nfunction parseStateRef(ref: string) {\n  const paramsOnly = ref.match(/^\\s*({[^}]*})\\s*$/);\n  if (paramsOnly) ref = '(' + paramsOnly[1] + ')';\n\n  const parsed = ref.replace(/\\n/g, ' ').match(/^\\s*([^(]*?)\\s*(\\((.*)\\))?\\s*$/);\n  if (!parsed || parsed.length !== 4) throw new Error(\"Invalid state ref '\" + ref + \"'\");\n  return { state: parsed[1] || null, paramExpr: parsed[3] || null };\n}\n\n/** @hidden */\nfunction stateContext(el: IAugmentedJQuery) {\n  const $uiView: UIViewData = (el.parent() as IAugmentedJQuery).inheritedData('$uiView');\n  const path: PathNode[] = parse('$cfg.path')($uiView);\n  return path ? tail(path).state.name : undefined;\n}\n\n/** @hidden */\nfunction processedDef($state: StateService, $element: IAugmentedJQuery, def: Def): Def {\n  const uiState = def.uiState || $state.current.name;\n  const uiStateOpts = extend(defaultOpts($element, $state), def.uiStateOpts || {});\n  const href = $state.href(uiState, def.uiStateParams, uiStateOpts);\n  return { uiState, uiStateParams: def.uiStateParams, uiStateOpts, href };\n}\n\n/** @hidden */\ninterface TypeInfo {\n  attr: string;\n  isAnchor: boolean;\n  clickable: boolean;\n}\n\n/** @hidden */\nfunction getTypeInfo(el: IAugmentedJQuery): TypeInfo {\n  // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.\n  const isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';\n  const isForm = el[0].nodeName === 'FORM';\n\n  return {\n    attr: isForm ? 'action' : isSvg ? 'xlink:href' : 'href',\n    isAnchor: el.prop('tagName').toUpperCase() === 'A',\n    clickable: !isForm,\n  };\n}\n\n/** @hidden */\nfunction clickHook(\n  el: IAugmentedJQuery,\n  $state: StateService,\n  $timeout: ITimeoutService,\n  type: TypeInfo,\n  getDef: () => Def\n) {\n  return function (e: JQueryMouseEventObject) {\n    const button = e.which || e.button,\n      target = getDef();\n\n    if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || e.altKey || el.attr('target'))) {\n      // HACK: This is to allow ng-clicks to be processed before the transition is initiated:\n      const transition = $timeout(function () {\n        if (!el.attr('disabled')) {\n          $state.go(target.uiState, target.uiStateParams, target.uiStateOpts);\n        }\n      });\n      e.preventDefault();\n\n      // if the state has no URL, ignore one preventDefault from the <a> directive.\n      let ignorePreventDefaultCount = type.isAnchor && !target.href ? 1 : 0;\n\n      e.preventDefault = function () {\n        if (ignorePreventDefaultCount-- <= 0) $timeout.cancel(transition);\n      };\n    }\n  };\n}\n\n/** @hidden */\nfunction defaultOpts(el: IAugmentedJQuery, $state: StateService) {\n  return {\n    relative: stateContext(el) || $state.$current,\n    inherit: true,\n    source: 'sref',\n  };\n}\n\n/** @hidden */\nfunction bindEvents(element: IAugmentedJQuery, scope: IScope, hookFn: EventListener, uiStateOpts: any): void {\n  let events;\n\n  if (uiStateOpts) {\n    events = uiStateOpts.events;\n  }\n\n  if (!isArray(events)) {\n    events = ['click'];\n  }\n\n  const on = element.on ? 'on' : 'bind';\n  for (const event of events) {\n    element[on](event, hookFn);\n  }\n\n  scope.$on('$destroy', function () {\n    const off = element.off ? 'off' : 'unbind';\n    for (const event of events) {\n      element[off](event, hookFn as any);\n    }\n  });\n}\n\n/**\n * `ui-sref`: A directive for linking to a state\n *\n * A directive which links to a state (and optionally, parameters).\n * When clicked, this directive activates the linked state with the supplied parameter values.\n *\n * ### Linked State\n * The attribute value of the `ui-sref` is the name of the state to link to.\n *\n * #### Example:\n * This will activate the `home` state when the link is clicked.\n * ```html\n * <a ui-sref=\"home\">Home</a>\n * ```\n *\n * ### Relative Links\n * You can also use relative state paths within `ui-sref`, just like a relative path passed to `$state.go()` ([[StateService.go]]).\n * You just need to be aware that the path is relative to the state that *created* the link.\n * This allows a state to create a relative `ui-sref` which always targets the same destination.\n *\n * #### Example:\n * Both these links are relative to the parent state, even when a child state is currently active.\n * ```html\n * <a ui-sref=\".child1\">child 1 state</a>\n * <a ui-sref=\".child2\">child 2 state</a>\n * ```\n *\n * This link activates the parent state.\n * ```html\n * <a ui-sref=\"^\">Return</a>\n * ```\n *\n * ### hrefs\n * If the linked state has a URL, the directive will automatically generate and\n * update the `href` attribute (using the [[StateService.href]]  method).\n *\n * #### Example:\n * Assuming the `users` state has a url of `/users/`\n * ```html\n * <a ui-sref=\"users\" href=\"/users/\">Users</a>\n * ```\n *\n * ### Parameter Values\n * In addition to the state name, a `ui-sref` can include parameter values which are applied when activating the state.\n * Param values can be provided in the `ui-sref` value after the state name, enclosed by parentheses.\n * The content inside the parentheses is an expression, evaluated to the parameter values.\n *\n * #### Example:\n * This example renders a list of links to users.\n * The state's `userId` parameter value comes from each user's `user.id` property.\n * ```html\n * <li ng-repeat=\"user in users\">\n *   <a ui-sref=\"users.detail({ userId: user.id })\">{{ user.displayName }}</a>\n * </li>\n * ```\n *\n * Note:\n * The parameter values expression is `$watch`ed for updates.\n *\n * ### Transition Options\n * You can specify [[TransitionOptions]] to pass to [[StateService.go]] by using the `ui-sref-opts` attribute.\n * Options are restricted to `location`, `inherit`, and `reload`.\n *\n * #### Example:\n * ```html\n * <a ui-sref=\"home\" ui-sref-opts=\"{ reload: true }\">Home</a>\n * ```\n *\n * ### Other DOM Events\n *\n * You can also customize which DOM events to respond to (instead of `click`) by\n * providing an `events` array in the `ui-sref-opts` attribute.\n *\n * #### Example:\n * ```html\n * <input type=\"text\" ui-sref=\"contacts\" ui-sref-opts=\"{ events: ['change', 'blur'] }\">\n * ```\n *\n * ### Highlighting the active link\n * This directive can be used in conjunction with [[uiSrefActive]] to highlight the active link.\n *\n * ### Examples\n * If you have the following template:\n *\n * ```html\n * <a ui-sref=\"home\">Home</a>\n * <a ui-sref=\"about\">About</a>\n * <a ui-sref=\"{page: 2}\">Next page</a>\n *\n * <ul>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a ui-sref=\"contacts.detail({ id: contact.id })\">{{ contact.name }}</a>\n *     </li>\n * </ul>\n * ```\n *\n * Then (assuming the current state is `contacts`) the rendered html including hrefs would be:\n *\n * ```html\n * <a href=\"#/home\" ui-sref=\"home\">Home</a>\n * <a href=\"#/about\" ui-sref=\"about\">About</a>\n * <a href=\"#/contacts?page=2\" ui-sref=\"{page: 2}\">Next page</a>\n *\n * <ul>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/1\" ui-sref=\"contacts.detail({ id: contact.id })\">Joe</a>\n *     </li>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/2\" ui-sref=\"contacts.detail({ id: contact.id })\">Alice</a>\n *     </li>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/3\" ui-sref=\"contacts.detail({ id: contact.id })\">Bob</a>\n *     </li>\n * </ul>\n *\n * <a href=\"#/home\" ui-sref=\"home\" ui-sref-opts=\"{reload: true}\">Home</a>\n * ```\n *\n * ### Notes\n *\n * - You can use `ui-sref` to change **only the parameter values** by omitting the state name and parentheses.\n * #### Example:\n * Sets the `lang` parameter to `en` and remains on the same state.\n *\n * ```html\n * <a ui-sref=\"{ lang: 'en' }\">English</a>\n * ```\n *\n * - A middle-click, right-click, or ctrl-click is handled (natively) by the browser to open the href in a new window, for example.\n *\n * - Unlike the parameter values expression, the state name is not `$watch`ed (for performance reasons).\n * If you need to dynamically update the state being linked to, use the fully dynamic [[uiState]] directive.\n */\nlet uiSrefDirective: ng1_directive;\nuiSrefDirective = [\n  '$uiRouter',\n  '$timeout',\n  function $StateRefDirective($uiRouter: UIRouter, $timeout: ITimeoutService) {\n    const $state = $uiRouter.stateService;\n\n    return {\n      restrict: 'A',\n      require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n      link: function (scope: IScope, element: IAugmentedJQuery, attrs: any, uiSrefActive: any) {\n        const type = getTypeInfo(element);\n        const active = uiSrefActive[1] || uiSrefActive[0];\n        let unlinkInfoFn: Function = null;\n\n        const rawDef = {} as Def;\n        const getDef = () => processedDef($state, element, rawDef);\n\n        const ref = parseStateRef(attrs.uiSref);\n        rawDef.uiState = ref.state;\n        rawDef.uiStateOpts = attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {};\n\n        function update() {\n          const def = getDef();\n          if (unlinkInfoFn) unlinkInfoFn();\n          if (active) unlinkInfoFn = active.$$addStateInfo(def.uiState, def.uiStateParams);\n          if (def.href != null) attrs.$set(type.attr, def.href);\n        }\n\n        if (ref.paramExpr) {\n          scope.$watch(\n            ref.paramExpr,\n            function (val) {\n              rawDef.uiStateParams = extend({}, val);\n              update();\n            },\n            true\n          );\n          rawDef.uiStateParams = extend({}, scope.$eval(ref.paramExpr));\n        }\n\n        update();\n\n        scope.$on('$destroy', <any>$uiRouter.stateRegistry.onStatesChanged(update));\n        scope.$on('$destroy', <any>$uiRouter.transitionService.onSuccess({}, update));\n\n        if (!type.clickable) return;\n        const hookFn = clickHook(element, $state, $timeout, type, getDef);\n        bindEvents(element, scope, hookFn, rawDef.uiStateOpts);\n      },\n    };\n  },\n];\n\n/**\n * `ui-state`: A fully dynamic directive for linking to a state\n *\n * A directive which links to a state (and optionally, parameters).\n * When clicked, this directive activates the linked state with the supplied parameter values.\n *\n * **This directive is very similar to [[uiSref]], but it `$observe`s and `$watch`es/evaluates all its inputs.**\n *\n * A directive which links to a state (and optionally, parameters).\n * When clicked, this directive activates the linked state with the supplied parameter values.\n *\n * ### Linked State\n * The attribute value of `ui-state` is an expression which is `$watch`ed and evaluated as the state to link to.\n * **This is in contrast with `ui-sref`, which takes a state name as a string literal.**\n *\n * #### Example:\n * Create a list of links.\n * ```html\n * <li ng-repeat=\"link in navlinks\">\n *   <a ui-state=\"link.state\">{{ link.displayName }}</a>\n * </li>\n * ```\n *\n * ### Relative Links\n * If the expression evaluates to a relative path, it is processed like [[uiSref]].\n * You just need to be aware that the path is relative to the state that *created* the link.\n * This allows a state to create relative `ui-state` which always targets the same destination.\n *\n * ### hrefs\n * If the linked state has a URL, the directive will automatically generate and\n * update the `href` attribute (using the [[StateService.href]]  method).\n *\n * ### Parameter Values\n * In addition to the state name expression, a `ui-state` can include parameter values which are applied when activating the state.\n * Param values should be provided using the `ui-state-params` attribute.\n * The `ui-state-params` attribute value is `$watch`ed and evaluated as an expression.\n *\n * #### Example:\n * This example renders a list of links with param values.\n * The state's `userId` parameter value comes from each user's `user.id` property.\n * ```html\n * <li ng-repeat=\"link in navlinks\">\n *   <a ui-state=\"link.state\" ui-state-params=\"link.params\">{{ link.displayName }}</a>\n * </li>\n * ```\n *\n * ### Transition Options\n * You can specify [[TransitionOptions]] to pass to [[StateService.go]] by using the `ui-state-opts` attribute.\n * Options are restricted to `location`, `inherit`, and `reload`.\n * The value of the `ui-state-opts` is `$watch`ed and evaluated as an expression.\n *\n * #### Example:\n * ```html\n * <a ui-state=\"returnto.state\" ui-state-opts=\"{ reload: true }\">Home</a>\n * ```\n *\n * ### Other DOM Events\n *\n * You can also customize which DOM events to respond to (instead of `click`) by\n * providing an `events` array in the `ui-state-opts` attribute.\n *\n * #### Example:\n * ```html\n * <input type=\"text\" ui-state=\"contacts\" ui-state-opts=\"{ events: ['change', 'blur'] }\">\n * ```\n *\n * ### Highlighting the active link\n * This directive can be used in conjunction with [[uiSrefActive]] to highlight the active link.\n *\n * ### Notes\n *\n * - You can use `ui-params` to change **only the parameter values** by omitting the state name and supplying only `ui-state-params`.\n *   However, it might be simpler to use [[uiSref]] parameter-only links.\n *\n * #### Example:\n * Sets the `lang` parameter to `en` and remains on the same state.\n *\n * ```html\n * <a ui-state=\"\" ui-state-params=\"{ lang: 'en' }\">English</a>\n * ```\n *\n * - A middle-click, right-click, or ctrl-click is handled (natively) by the browser to open the href in a new window, for example.\n * ```\n */\nlet uiStateDirective: ng1_directive;\nuiStateDirective = [\n  '$uiRouter',\n  '$timeout',\n  function $StateRefDynamicDirective($uiRouter: UIRouter, $timeout: ITimeoutService) {\n    const $state = $uiRouter.stateService;\n\n    return {\n      restrict: 'A',\n      require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n      link: function (scope: IScope, element: IAugmentedJQuery, attrs: any, uiSrefActive: any) {\n        const type = getTypeInfo(element);\n        const active = uiSrefActive[1] || uiSrefActive[0];\n        let unlinkInfoFn: Function = null;\n        let hookFn;\n\n        const rawDef = {} as Def;\n        const getDef = () => processedDef($state, element, rawDef);\n\n        const inputAttrs = ['uiState', 'uiStateParams', 'uiStateOpts'];\n        const watchDeregFns = inputAttrs.reduce((acc, attr) => ((acc[attr] = noop), acc), {});\n\n        function update() {\n          const def = getDef();\n          if (unlinkInfoFn) unlinkInfoFn();\n          if (active) unlinkInfoFn = active.$$addStateInfo(def.uiState, def.uiStateParams);\n          if (def.href != null) attrs.$set(type.attr, def.href);\n        }\n\n        inputAttrs.forEach((field) => {\n          rawDef[field] = attrs[field] ? scope.$eval(attrs[field]) : null;\n\n          attrs.$observe(field, (expr) => {\n            watchDeregFns[field]();\n            watchDeregFns[field] = scope.$watch(\n              expr,\n              (newval) => {\n                rawDef[field] = newval;\n                update();\n              },\n              true\n            );\n          });\n        });\n\n        update();\n\n        scope.$on('$destroy', <any>$uiRouter.stateRegistry.onStatesChanged(update));\n        scope.$on('$destroy', <any>$uiRouter.transitionService.onSuccess({}, update));\n\n        if (!type.clickable) return;\n        hookFn = clickHook(element, $state, $timeout, type, getDef);\n        bindEvents(element, scope, hookFn, rawDef.uiStateOpts);\n      },\n    };\n  },\n];\n\n/**\n * `ui-sref-active` and `ui-sref-active-eq`: A directive that adds a CSS class when a `ui-sref` is active\n *\n * A directive working alongside [[uiSref]] and [[uiState]] to add classes to an element when the\n * related directive's state is active (and remove them when it is inactive).\n *\n * The primary use-case is to highlight the active link in navigation menus,\n * distinguishing it from the inactive menu items.\n *\n * ### Linking to a `ui-sref` or `ui-state`\n * `ui-sref-active` can live on the same element as `ui-sref`/`ui-state`, or it can be on a parent element.\n * If a `ui-sref-active` is a parent to more than one `ui-sref`/`ui-state`, it will apply the CSS class when **any of the links are active**.\n *\n * ### Matching\n *\n * The `ui-sref-active` directive applies the CSS class when the `ui-sref`/`ui-state`'s target state **or any child state is active**.\n * This is a \"fuzzy match\" which uses [[StateService.includes]].\n *\n * The `ui-sref-active-eq` directive applies the CSS class when the `ui-sref`/`ui-state`'s target state is directly active (not when child states are active).\n * This is an \"exact match\" which uses [[StateService.is]].\n *\n * ### Parameter values\n * If the `ui-sref`/`ui-state` includes parameter values, the current parameter values must match the link's values for the link to be highlighted.\n * This allows a list of links to the same state with different parameters to be rendered, and the correct one highlighted.\n *\n * #### Example:\n * ```html\n * <li ng-repeat=\"user in users\" ui-sref-active=\"active\">\n *   <a ui-sref=\"user.details({ userId: user.id })\">{{ user.lastName }}</a>\n * </li>\n * ```\n *\n * ### Examples\n *\n * Given the following template:\n * #### Example:\n * ```html\n * <ul>\n *   <li ui-sref-active=\"active\" class=\"item\">\n *     <a href ui-sref=\"app.user({user: 'bilbobaggins'})\">@bilbobaggins</a>\n *   </li>\n * </ul>\n * ```\n *\n * When the app state is `app.user` (or any child state),\n * and contains the state parameter \"user\" with value \"bilbobaggins\",\n * the resulting HTML will appear as (note the 'active' class):\n *\n * ```html\n * <ul>\n *   <li ui-sref-active=\"active\" class=\"item active\">\n *     <a ui-sref=\"app.user({user: 'bilbobaggins'})\" href=\"/users/bilbobaggins\">@bilbobaggins</a>\n *   </li>\n * </ul>\n * ```\n *\n * ### Glob mode\n *\n * It is possible to pass `ui-sref-active` an expression that evaluates to an object.\n * The objects keys represent active class names and values represent the respective state names/globs.\n * `ui-sref-active` will match if the current active state **includes** any of\n * the specified state names/globs, even the abstract ones.\n *\n * #### Example:\n * Given the following template, with \"admin\" being an abstract state:\n * ```html\n * <div ui-sref-active=\"{'active': 'admin.**'}\">\n *   <a ui-sref-active=\"active\" ui-sref=\"admin.roles\">Roles</a>\n * </div>\n * ```\n *\n * Arrays are also supported as values in the `ngClass`-like interface.\n * This allows multiple states to add `active` class.\n *\n * #### Example:\n * Given the following template, with \"admin.roles\" being the current state, the class will be added too:\n * ```html\n * <div ui-sref-active=\"{'active': ['owner.**', 'admin.**']}\">\n *   <a ui-sref-active=\"active\" ui-sref=\"admin.roles\">Roles</a>\n * </div>\n * ```\n *\n * When the current state is \"admin.roles\" the \"active\" class will be applied to both the `<div>` and `<a>` elements.\n * It is important to note that the state names/globs passed to `ui-sref-active` override any state provided by a linked `ui-sref`.\n *\n * ### Notes:\n *\n * - The class name is interpolated **once** during the directives link time (any further changes to the\n * interpolated value are ignored).\n *\n * - Multiple classes may be specified in a space-separated format: `ui-sref-active='class1 class2 class3'`\n */\nlet uiSrefActiveDirective: ng1_directive;\nuiSrefActiveDirective = [\n  '$state',\n  '$stateParams',\n  '$interpolate',\n  '$uiRouter',\n  function $StateRefActiveDirective(\n    $state: StateService,\n    $stateParams: Obj,\n    $interpolate: IInterpolateService,\n    $uiRouter: UIRouter\n  ) {\n    return {\n      restrict: 'A',\n      controller: [\n        '$scope',\n        '$element',\n        '$attrs',\n        function ($scope: IScope, $element: IAugmentedJQuery, $attrs: any) {\n          let states: StateData[] = [];\n          let activeEqClass: string;\n          let uiSrefActive: any;\n\n          // There probably isn't much point in $observing this\n          // uiSrefActive and uiSrefActiveEq share the same directive object with some\n          // slight difference in logic routing\n          activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);\n\n          try {\n            uiSrefActive = $scope.$eval($attrs.uiSrefActive);\n          } catch (e) {\n            // Do nothing. uiSrefActive is not a valid expression.\n            // Fall back to using $interpolate below\n          }\n          uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);\n          setStatesFromDefinitionObject(uiSrefActive);\n\n          // Allow uiSref to communicate with uiSrefActive[Equals]\n          this.$$addStateInfo = function (newState: string, newParams: Obj) {\n            // we already got an explicit state provided by ui-sref-active, so we\n            // shadow the one that comes from ui-sref\n            if (isObject(uiSrefActive) && states.length > 0) {\n              return;\n            }\n            const deregister = addState(newState, newParams, uiSrefActive);\n            update();\n            return deregister;\n          };\n\n          function updateAfterTransition(trans) {\n            trans.promise.then(update, noop);\n          }\n          $scope.$on('$destroy', setupEventListeners());\n          if ($uiRouter.globals.transition) {\n            updateAfterTransition($uiRouter.globals.transition);\n          }\n\n          function setupEventListeners() {\n            const deregisterStatesChangedListener = $uiRouter.stateRegistry.onStatesChanged(handleStatesChanged);\n            const deregisterOnStartListener = $uiRouter.transitionService.onStart({}, updateAfterTransition);\n            const deregisterStateChangeSuccessListener = $scope.$on('$stateChangeSuccess', update);\n            return function cleanUp() {\n              deregisterStatesChangedListener();\n              deregisterOnStartListener();\n              deregisterStateChangeSuccessListener();\n            };\n          }\n\n          function handleStatesChanged() {\n            setStatesFromDefinitionObject(uiSrefActive);\n          }\n\n          function setStatesFromDefinitionObject(statesDefinition: Obj) {\n            if (isObject(statesDefinition)) {\n              states = [];\n              forEach(statesDefinition, function (stateOrName: StateOrName | Array<StateOrName>, activeClass: string) {\n                // Helper function to abstract adding state.\n                const addStateForClass = function (stateOrName: string, activeClass: string) {\n                  const ref = parseStateRef(stateOrName);\n                  addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);\n                };\n\n                if (isString(stateOrName)) {\n                  // If state is string, just add it.\n                  addStateForClass(stateOrName as string, activeClass);\n                } else if (isArray(stateOrName)) {\n                  // If state is an array, iterate over it and add each array item individually.\n                  forEach(stateOrName, function (stateOrName: string) {\n                    addStateForClass(stateOrName, activeClass);\n                  });\n                }\n              });\n            }\n          }\n\n          function addState(stateName: string, stateParams: Obj, activeClass: string) {\n            const state = $state.get(stateName, stateContext($element));\n\n            const stateInfo = {\n              state: state || { name: stateName },\n              params: stateParams,\n              activeClass: activeClass,\n            };\n\n            states.push(stateInfo);\n\n            return function removeState() {\n              removeFrom(states)(stateInfo);\n            };\n          }\n\n          // Update route state\n          function update() {\n            const splitClasses = (str) => str.split(/\\s/).filter(identity);\n            const getClasses = (stateList: StateData[]) =>\n              stateList\n                .map((x) => x.activeClass)\n                .map(splitClasses)\n                .reduce(unnestR, []);\n\n            const allClasses = getClasses(states).concat(splitClasses(activeEqClass)).reduce(uniqR, []);\n            const fuzzyClasses = getClasses(states.filter((x) => $state.includes(x.state.name, x.params)));\n            const exactlyMatchesAny = !!states.filter((x) => $state.is(x.state.name, x.params)).length;\n            const exactClasses = exactlyMatchesAny ? splitClasses(activeEqClass) : [];\n\n            const addClasses = fuzzyClasses.concat(exactClasses).reduce(uniqR, []);\n            const removeClasses = allClasses.filter((cls) => !inArray(addClasses, cls));\n\n            $scope.$evalAsync(() => {\n              addClasses.forEach((className) => $element.addClass(className));\n              removeClasses.forEach((className) => $element.removeClass(className));\n            });\n          }\n\n          update();\n        },\n      ],\n    };\n  },\n];\n\n/** @hidden */\ninterface Def {\n  uiState: string;\n  href: string;\n  uiStateParams: Obj;\n  uiStateOpts: any;\n}\n/** @hidden */\ninterface StateData {\n  state: StateDeclaration;\n  params: RawParams;\n  activeClass: string;\n}\n\nangular\n  .module('ui.router.state')\n  .directive('uiSref', uiSrefDirective)\n  .directive('uiSrefActive', uiSrefActiveDirective)\n  .directive('uiSrefActiveEq', uiSrefActiveDirective)\n  .directive('uiState', uiStateDirective);\n"]},"metadata":{},"sourceType":"module"}