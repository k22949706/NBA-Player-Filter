{"ast":null,"code":"import { defaults, values, find, inherit } from '../common/common';\nimport { propEq } from '../common/hof';\nimport { Glob } from '../common/glob';\nimport { isObject, isFunction } from '../common/predicates';\n/**\n * Internal representation of a UI-Router state.\n *\n * Instances of this class are created when a [[StateDeclaration]] is registered with the [[StateRegistry]].\n *\n * A registered [[StateDeclaration]] is augmented with a getter ([[StateDeclaration.$$state]]) which returns the corresponding [[StateObject]] object.\n *\n * This class prototypally inherits from the corresponding [[StateDeclaration]].\n * Each of its own properties (i.e., `hasOwnProperty`) are built using builders from the [[StateBuilder]].\n */\n\nvar StateObject =\n/** @class */\nfunction () {\n  /** @deprecated use State.create() */\n  function StateObject(config) {\n    return StateObject.create(config || {});\n  }\n  /**\n   * Create a state object to put the private/internal implementation details onto.\n   * The object's prototype chain looks like:\n   * (Internal State Object) -> (Copy of State.prototype) -> (State Declaration object) -> (State Declaration's prototype...)\n   *\n   * @param stateDecl the user-supplied State Declaration\n   * @returns {StateObject} an internal State object\n   */\n\n\n  StateObject.create = function (stateDecl) {\n    stateDecl = StateObject.isStateClass(stateDecl) ? new stateDecl() : stateDecl;\n    var state = inherit(inherit(stateDecl, StateObject.prototype));\n\n    stateDecl.$$state = function () {\n      return state;\n    };\n\n    state.self = stateDecl;\n    state.__stateObjectCache = {\n      nameGlob: Glob.fromString(state.name)\n    };\n    return state;\n  };\n  /**\n   * Returns true if the provided parameter is the same state.\n   *\n   * Compares the identity of the state against the passed value, which is either an object\n   * reference to the actual `State` instance, the original definition object passed to\n   * `$stateProvider.state()`, or the fully-qualified name.\n   *\n   * @param ref Can be one of (a) a `State` instance, (b) an object that was passed\n   *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.\n   * @returns Returns `true` if `ref` matches the current `State` instance.\n   */\n\n\n  StateObject.prototype.is = function (ref) {\n    return this === ref || this.self === ref || this.fqn() === ref;\n  };\n  /**\n   * @deprecated this does not properly handle dot notation\n   * @returns Returns a dot-separated name of the state.\n   */\n\n\n  StateObject.prototype.fqn = function () {\n    if (!this.parent || !(this.parent instanceof this.constructor)) return this.name;\n    var name = this.parent.fqn();\n    return name ? name + '.' + this.name : this.name;\n  };\n  /**\n   * Returns the root node of this state's tree.\n   *\n   * @returns The root of this state's tree.\n   */\n\n\n  StateObject.prototype.root = function () {\n    return this.parent && this.parent.root() || this;\n  };\n  /**\n   * Gets the state's `Param` objects\n   *\n   * Gets the list of [[Param]] objects owned by the state.\n   * If `opts.inherit` is true, it also includes the ancestor states' [[Param]] objects.\n   * If `opts.matchingKeys` exists, returns only `Param`s whose `id` is a key on the `matchingKeys` object\n   *\n   * @param opts options\n   */\n\n\n  StateObject.prototype.parameters = function (opts) {\n    opts = defaults(opts, {\n      inherit: true,\n      matchingKeys: null\n    });\n    var inherited = opts.inherit && this.parent && this.parent.parameters() || [];\n    return inherited.concat(values(this.params)).filter(function (param) {\n      return !opts.matchingKeys || opts.matchingKeys.hasOwnProperty(param.id);\n    });\n  };\n  /**\n   * Returns a single [[Param]] that is owned by the state\n   *\n   * If `opts.inherit` is true, it also searches the ancestor states` [[Param]]s.\n   * @param id the name of the [[Param]] to return\n   * @param opts options\n   */\n\n\n  StateObject.prototype.parameter = function (id, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return this.url && this.url.parameter(id, opts) || find(values(this.params), propEq('id', id)) || opts.inherit && this.parent && this.parent.parameter(id);\n  };\n\n  StateObject.prototype.toString = function () {\n    return this.fqn();\n  };\n  /** Predicate which returns true if the object is an class with @State() decorator */\n\n\n  StateObject.isStateClass = function (stateDecl) {\n    return isFunction(stateDecl) && stateDecl['__uiRouterState'] === true;\n  };\n  /** Predicate which returns true if the object is a [[StateDeclaration]] object */\n\n\n  StateObject.isStateDeclaration = function (obj) {\n    return isFunction(obj['$$state']);\n  };\n  /** Predicate which returns true if the object is an internal [[StateObject]] object */\n\n\n  StateObject.isState = function (obj) {\n    return isObject(obj['__stateObjectCache']);\n  };\n\n  return StateObject;\n}();\n\nexport { StateObject };","map":{"version":3,"mappings":"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","names":["defaults","values","find","inherit","propEq","Glob","isObject","isFunction","config","StateObject","create","stateDecl","isStateClass","state","prototype","$$state","self","__stateObjectCache","nameGlob","fromString","name","ref","fqn","parent","constructor","root","opts","matchingKeys","inherited","parameters","concat","params","filter","param","hasOwnProperty","id","url","parameter","obj"],"sources":["C:\\Users\\huang\\node_modules\\@uirouter\\core\\lib-esm\\state\\@uirouter\\core\\state\\stateObject.ts"],"sourcesContent":["import { StateDeclaration, _ViewDeclaration, _StateDeclaration, LazyLoadResult } from './interface';\nimport { defaults, values, find, inherit } from '../common/common';\nimport { propEq } from '../common/hof';\nimport { Param } from '../params/param';\nimport { UrlMatcher } from '../url/urlMatcher';\nimport { Resolvable } from '../resolve/resolvable';\nimport { TransitionStateHookFn } from '../transition/interface';\nimport { TargetState } from './targetState';\nimport { Transition } from '../transition/transition';\nimport { Glob } from '../common/glob';\nimport { isObject, isFunction } from '../common/predicates';\n\n/**\n * Internal representation of a UI-Router state.\n *\n * Instances of this class are created when a [[StateDeclaration]] is registered with the [[StateRegistry]].\n *\n * A registered [[StateDeclaration]] is augmented with a getter ([[StateDeclaration.$$state]]) which returns the corresponding [[StateObject]] object.\n *\n * This class prototypally inherits from the corresponding [[StateDeclaration]].\n * Each of its own properties (i.e., `hasOwnProperty`) are built using builders from the [[StateBuilder]].\n */\nexport class StateObject {\n  /** The parent [[StateObject]] */\n  public parent: StateObject;\n\n  /** The name used to register the state */\n  public name: string;\n\n  /** Prototypally inherits from [[StateDeclaration.abstract]] */\n  public abstract: boolean;\n\n  /** Prototypally inherits from [[StateDeclaration.resolve]] */\n  public resolve: { [key: string]: string | any[] | Function } | any[];\n\n  /** A list of [[Resolvable]] objects.  The internal representation of [[resolve]]. */\n  public resolvables: Resolvable[];\n\n  /** Prototypally inherits from [[StateDeclaration.resolvePolicy]] */\n  public resolvePolicy: any;\n\n  /** A compiled URLMatcher which detects when the state's URL is matched */\n  public url: UrlMatcher;\n\n  /** The parameters for the state, built from the URL and [[StateDeclaration.params]] */\n  public params: { [key: string]: Param };\n\n  /**\n   * The views for the state.\n   * Note: `@uirouter/core` does not register a builder for views.\n   * The framework specific code should register a `views` builder.\n   */\n  public views: { [key: string]: _ViewDeclaration };\n\n  /**\n   * The original [[StateDeclaration]] used to build this [[StateObject]].\n   * Note: `this` object also prototypally inherits from the `self` declaration object.\n   */\n  public self: StateDeclaration;\n\n  /** The nearest parent [[StateObject]] which has a URL */\n  public navigable: StateObject;\n\n  /** The parent [[StateObject]] objects from this state up to the root */\n  public path: StateObject[];\n\n  /**\n   * Prototypally inherits from [[StateDeclaration.data]]\n   * Note: This is the only field on the [[StateDeclaration]] which is mutated.\n   * The definition object's `data` field is replaced with a new object\n   * which prototypally inherits from the parent state definition's `data` field.\n   */\n  public data: any;\n\n  /**\n   * An object containing the parent States' names as keys and\n   * true as their values.\n   */\n  public includes: { [name: string]: boolean };\n\n  /** Prototypally inherits from [[StateDeclaration.onExit]] */\n  public onExit: TransitionStateHookFn;\n  /** Prototypally inherits from [[StateDeclaration.onRetain]] */\n  public onRetain: TransitionStateHookFn;\n  /** Prototypally inherits from [[StateDeclaration.onEnter]] */\n  public onEnter: TransitionStateHookFn;\n\n  /** Prototypally inherits from [[StateDeclaration.lazyLoad]] */\n  public lazyLoad: (transition: Transition, state: StateDeclaration) => Promise<LazyLoadResult>;\n\n  /** Prototypally inherits from [[StateDeclaration.redirectTo]] */\n  redirectTo:\n    | string\n    | (($transition$: Transition) => TargetState)\n    | { state: string | StateDeclaration; params: { [key: string]: any } };\n\n  /** @internal */\n  __stateObjectCache: {\n    /** Might be null */\n    nameGlob?: Glob;\n  };\n\n  /**\n   * Create a state object to put the private/internal implementation details onto.\n   * The object's prototype chain looks like:\n   * (Internal State Object) -> (Copy of State.prototype) -> (State Declaration object) -> (State Declaration's prototype...)\n   *\n   * @param stateDecl the user-supplied State Declaration\n   * @returns {StateObject} an internal State object\n   */\n  static create(stateDecl: _StateDeclaration): StateObject {\n    stateDecl = StateObject.isStateClass(stateDecl) ? new stateDecl() : stateDecl;\n\n    const state = inherit(inherit(stateDecl, StateObject.prototype)) as StateObject;\n    stateDecl.$$state = () => state;\n    state.self = stateDecl;\n    state.__stateObjectCache = {\n      nameGlob: Glob.fromString(state.name), // might return null\n    };\n    return state;\n  }\n\n  /** Predicate which returns true if the object is an class with @State() decorator */\n  static isStateClass = (stateDecl: _StateDeclaration): stateDecl is { new (): StateDeclaration } =>\n    isFunction(stateDecl) && stateDecl['__uiRouterState'] === true;\n\n  /** Predicate which returns true if the object is a [[StateDeclaration]] object */\n  static isStateDeclaration = (obj: any): obj is StateDeclaration => isFunction(obj['$$state']);\n\n  /** Predicate which returns true if the object is an internal [[StateObject]] object */\n  static isState = (obj: any): obj is StateObject => isObject(obj['__stateObjectCache']);\n\n  /** @deprecated use State.create() */\n  constructor(config?: StateDeclaration) {\n    return StateObject.create(config || {});\n  }\n\n  /**\n   * Returns true if the provided parameter is the same state.\n   *\n   * Compares the identity of the state against the passed value, which is either an object\n   * reference to the actual `State` instance, the original definition object passed to\n   * `$stateProvider.state()`, or the fully-qualified name.\n   *\n   * @param ref Can be one of (a) a `State` instance, (b) an object that was passed\n   *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.\n   * @returns Returns `true` if `ref` matches the current `State` instance.\n   */\n  is(ref: StateObject | StateDeclaration | string): boolean {\n    return this === ref || this.self === ref || this.fqn() === ref;\n  }\n\n  /**\n   * @deprecated this does not properly handle dot notation\n   * @returns Returns a dot-separated name of the state.\n   */\n  fqn(): string {\n    if (!this.parent || !(this.parent instanceof this.constructor)) return this.name;\n    const name = this.parent.fqn();\n    return name ? name + '.' + this.name : this.name;\n  }\n\n  /**\n   * Returns the root node of this state's tree.\n   *\n   * @returns The root of this state's tree.\n   */\n  root(): StateObject {\n    return (this.parent && this.parent.root()) || this;\n  }\n\n  /**\n   * Gets the state's `Param` objects\n   *\n   * Gets the list of [[Param]] objects owned by the state.\n   * If `opts.inherit` is true, it also includes the ancestor states' [[Param]] objects.\n   * If `opts.matchingKeys` exists, returns only `Param`s whose `id` is a key on the `matchingKeys` object\n   *\n   * @param opts options\n   */\n  parameters(opts?: { inherit?: boolean; matchingKeys?: any }): Param[] {\n    opts = defaults(opts, { inherit: true, matchingKeys: null });\n    const inherited = (opts.inherit && this.parent && this.parent.parameters()) || [];\n    return inherited\n      .concat(values(this.params))\n      .filter((param) => !opts.matchingKeys || opts.matchingKeys.hasOwnProperty(param.id));\n  }\n\n  /**\n   * Returns a single [[Param]] that is owned by the state\n   *\n   * If `opts.inherit` is true, it also searches the ancestor states` [[Param]]s.\n   * @param id the name of the [[Param]] to return\n   * @param opts options\n   */\n  parameter(id: string, opts: { inherit?: boolean } = {}): Param {\n    return (\n      (this.url && this.url.parameter(id, opts)) ||\n      find(values(this.params), propEq('id', id)) ||\n      (opts.inherit && this.parent && this.parent.parameter(id))\n    );\n  }\n\n  toString() {\n    return this.fqn();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}