{"ast":null,"code":"import { ParamTypes } from '../params';\nimport { isDefined, isString } from '../common';\n/**\n * An API to customize the URL behavior and retrieve URL configuration\n *\n * This API is used to customize the behavior of the URL.\n * This includes optional trailing slashes ([[strictMode]]), case sensitivity ([[caseInsensitive]]),\n * and custom parameter encoding (custom [[type]]).\n *\n * It also has information about the location (url) configuration such as [[port]] and [[baseHref]].\n * This information can be used to build absolute URLs, such as\n * `https://example.com:443/basepath/state/substate?param1=a#hashvalue`;\n *\n * This API is found at `router.urlService.config` (see: [[UIRouter.urlService]], [[URLService.config]])\n */\n\nvar UrlConfig =\n/** @class */\nfunction () {\n  /** @internal */\n  function UrlConfig(\n  /** @internal */\n  router) {\n    var _this = this;\n\n    this.router = router;\n    /** @internal */\n\n    this.paramTypes = new ParamTypes();\n    /** @internal */\n\n    this._decodeParams = true;\n    /** @internal */\n\n    this._isCaseInsensitive = false;\n    /** @internal */\n\n    this._isStrictMode = true;\n    /** @internal */\n\n    this._defaultSquashPolicy = false;\n    /** @internal */\n\n    this.dispose = function () {\n      return _this.paramTypes.dispose();\n    }; // Delegate these calls to the current LocationConfig implementation\n\n    /**\n     * Gets the base Href, e.g., `http://localhost/approot/`\n     *\n     * @return the application's base href\n     */\n\n\n    this.baseHref = function () {\n      return _this.router.locationConfig.baseHref();\n    };\n    /**\n     * Gets or sets the hashPrefix\n     *\n     * This only applies when not running in [[html5Mode]] (pushstate mode)\n     *\n     * If the current url is `http://localhost/app#!/uirouter/path/#anchor`, it returns `!` which is the prefix for the \"hashbang\" portion.\n     *\n     * @return the hash prefix\n     */\n\n\n    this.hashPrefix = function (newprefix) {\n      return _this.router.locationConfig.hashPrefix(newprefix);\n    };\n    /**\n     * Gets the host, e.g., `localhost`\n     *\n     * @return the protocol\n     */\n\n\n    this.host = function () {\n      return _this.router.locationConfig.host();\n    };\n    /**\n     * Returns true when running in pushstate mode\n     *\n     * @return true when running in html5 mode (pushstate mode).\n     */\n\n\n    this.html5Mode = function () {\n      return _this.router.locationConfig.html5Mode();\n    };\n    /**\n     * Gets the port, e.g., `80`\n     *\n     * @return the port number\n     */\n\n\n    this.port = function () {\n      return _this.router.locationConfig.port();\n    };\n    /**\n     * Gets the protocol, e.g., `http`\n     *\n     * @return the protocol\n     */\n\n\n    this.protocol = function () {\n      return _this.router.locationConfig.protocol();\n    };\n  }\n  /**\n   * Defines whether URL matching should be case sensitive (the default behavior), or not.\n   *\n   * #### Example:\n   * ```js\n   * // Allow case insensitive url matches\n   * urlService.config.caseInsensitive(true);\n   * ```\n   *\n   * @param value `false` to match URL in a case sensitive manner; otherwise `true`;\n   * @returns the current value of caseInsensitive\n   */\n\n\n  UrlConfig.prototype.caseInsensitive = function (value) {\n    return this._isCaseInsensitive = isDefined(value) ? value : this._isCaseInsensitive;\n  };\n  /**\n   * Sets the default behavior when generating or matching URLs with default parameter values.\n   *\n   * #### Example:\n   * ```js\n   * // Remove default parameter values from the url\n   * urlService.config.defaultSquashPolicy(true);\n   * ```\n   *\n   * @param value A string that defines the default parameter URL squashing behavior.\n   *    - `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL\n   *    - `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the\n   *      parameter is surrounded by slashes, squash (remove) one slash from the URL\n   *    - any other string, e.g. \"~\": When generating an href with a default parameter value, squash (remove)\n   *      the parameter value from the URL and replace it with this string.\n   * @returns the current value of defaultSquashPolicy\n   */\n\n\n  UrlConfig.prototype.defaultSquashPolicy = function (value) {\n    if (isDefined(value) && value !== true && value !== false && !isString(value)) throw new Error(\"Invalid squash policy: \" + value + \". Valid policies: false, true, arbitrary-string\");\n    return this._defaultSquashPolicy = isDefined(value) ? value : this._defaultSquashPolicy;\n  };\n  /**\n   * Defines whether URLs should match trailing slashes, or not (the default behavior).\n   *\n   * #### Example:\n   * ```js\n   * // Allow optional trailing slashes\n   * urlService.config.strictMode(false);\n   * ```\n   *\n   * @param value `false` to match trailing slashes in URLs, otherwise `true`.\n   * @returns the current value of strictMode\n   */\n\n\n  UrlConfig.prototype.strictMode = function (value) {\n    return this._isStrictMode = isDefined(value) ? value : this._isStrictMode;\n  };\n  /**\n   * Creates and registers a custom [[ParamType]] object\n   *\n   * A custom parameter type can be used to generate URLs with typed parameters or custom encoding/decoding.\n   *\n   * #### Note: Register custom types *before using them* in a state definition.\n   *\n   * #### Example:\n   * ```js\n   * // Encode object parameter as JSON string\n   * urlService.config.type('myjson', {\n   *   encode: (obj) => JSON.stringify(obj),\n   *   decode: (str) => JSON.parse(str),\n   *   is: (val) => typeof(val) === 'object',\n   *   pattern: /[^/]+/,\n   *   equals: (a, b) => _.isEqual(a, b),\n   * });\n   * ```\n   *\n   * See [[ParamTypeDefinition]] for more examples\n   *\n   * @param name The type name.\n   * @param definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.\n   * @param definitionFn A function that is injected before the app runtime starts.\n   *        The result of this function should be a [[ParamTypeDefinition]].\n   *        The result is merged into the existing `definition`.\n   *        See [[ParamType]] for information on the values accepted.\n   *\n   * @returns if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined\n   */\n\n\n  UrlConfig.prototype.type = function (name, definition, definitionFn) {\n    var type = this.paramTypes.type(name, definition, definitionFn);\n    return !isDefined(definition) ? type : this;\n  };\n\n  return UrlConfig;\n}();\n\nexport { UrlConfig };","map":{"version":3,"mappings":"AAEA,SAA8BA,UAA9B,QAAgD,WAAhD;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,WAApC;AAEA;;;;;;;;;;;;;;AAaA;AAAA;AAAA;EAOE;EAAiB;EAAY;EAAyBC,MAArC,EAAqD;IAArD;;IAAqC;IANtD;;IAAiB,kBAAa,IAAIH,UAAJ,EAAb;IACjB;;IAAiB,qBAAgB,IAAhB;IACjB;;IAAiB,0BAAqB,KAArB;IACjB;;IAAiB,qBAAgB,IAAhB;IACjB;;IAAiB,4BAAyC,KAAzC;IAGjB;;IAAwB,eAAU;MAAM,YAAI,CAACI,UAAL,CAAgBC,OAAhB;IAAyB,CAAzC,CAD8C,CAGtE;;IAEA;;;;;;;IAKO,gBAAW;MAAc,YAAI,CAACF,MAAL,CAAYG,cAAZ,CAA2BC,QAA3B;IAAqC,CAA9D;IAEP;;;;;;;;;;;IAUO,kBAAa,UAACC,SAAD,EAAmB;MAAa,YAAI,CAACL,MAAL,CAAYG,cAAZ,CAA2BG,UAA3B,CAAsCD,SAAtC;IAAgD,CAA7F;IACP;;;;;;;IAKO,YAAO;MAAc,YAAI,CAACL,MAAL,CAAYG,cAAZ,CAA2BI,IAA3B;IAAiC,CAAtD;IAEP;;;;;;;IAKO,iBAAY;MAAe,YAAI,CAACP,MAAL,CAAYG,cAAZ,CAA2BK,SAA3B;IAAsC,CAAjE;IAEP;;;;;;;IAKO,YAAO;MAAc,YAAI,CAACR,MAAL,CAAYG,cAAZ,CAA2BM,IAA3B;IAAiC,CAAtD;IAEP;;;;;;;IAKO,gBAAW;MAAc,YAAI,CAACT,MAAL,CAAYG,cAAZ,CAA2BO,QAA3B;IAAqC,CAA9D;EAjDmE;EAmD1E;;;;;;;;;;;;;;EAYOC,sCAAP,UAAuBC,KAAvB,EAAsC;IACpC,OAAQ,KAAKC,kBAAL,GAA0Bf,SAAS,CAACc,KAAD,CAAT,GAAmBA,KAAnB,GAA2B,KAAKC,kBAAlE;EACD,CAFM;EAIP;;;;;;;;;;;;;;;;;;;EAiBOF,0CAAP,UAA2BC,KAA3B,EAAmD;IACjD,IAAId,SAAS,CAACc,KAAD,CAAT,IAAoBA,KAAK,KAAK,IAA9B,IAAsCA,KAAK,KAAK,KAAhD,IAAyD,CAACb,QAAQ,CAACa,KAAD,CAAtE,EACE,MAAM,IAAIE,KAAJ,CAAU,4BAA0BF,KAA1B,GAA+B,iDAAzC,CAAN;IACF,OAAQ,KAAKG,oBAAL,GAA4BjB,SAAS,CAACc,KAAD,CAAT,GAAmBA,KAAnB,GAA2B,KAAKG,oBAApE;EACD,CAJM;EAMP;;;;;;;;;;;;;;EAYOJ,iCAAP,UAAkBC,KAAlB,EAAiC;IAC/B,OAAQ,KAAKI,aAAL,GAAqBlB,SAAS,CAACc,KAAD,CAAT,GAAmBA,KAAnB,GAA2B,KAAKI,aAA7D;EACD,CAFM;EAIP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BAL,qCAAKM,IAAL,EAAmBC,UAAnB,EAAqDC,YAArD,EAA6F;IAC3F,IAAMC,IAAI,GAAG,KAAKnB,UAAL,CAAgBmB,IAAhB,CAAqBH,IAArB,EAA2BC,UAA3B,EAAuCC,YAAvC,CAAb;IACA,OAAO,CAACrB,SAAS,CAACoB,UAAD,CAAV,GAAyBE,IAAzB,GAAgC,IAAvC;EACD,CAHD;;EAIF;AAAC,CAnJD","names":["ParamTypes","isDefined","isString","router","paramTypes","dispose","locationConfig","baseHref","newprefix","hashPrefix","host","html5Mode","port","protocol","UrlConfig","value","_isCaseInsensitive","Error","_defaultSquashPolicy","_isStrictMode","name","definition","definitionFn","type"],"sources":["C:\\Users\\huang\\node_modules\\@uirouter\\core\\lib-esm\\url\\@uirouter\\core\\url\\urlConfig.ts"],"sourcesContent":["import { Disposable } from '../interface';\nimport { UIRouter } from '../router';\nimport { ParamTypeDefinition, ParamTypes } from '../params';\nimport { isDefined, isString } from '../common';\n\n/**\n * An API to customize the URL behavior and retrieve URL configuration\n *\n * This API is used to customize the behavior of the URL.\n * This includes optional trailing slashes ([[strictMode]]), case sensitivity ([[caseInsensitive]]),\n * and custom parameter encoding (custom [[type]]).\n *\n * It also has information about the location (url) configuration such as [[port]] and [[baseHref]].\n * This information can be used to build absolute URLs, such as\n * `https://example.com:443/basepath/state/substate?param1=a#hashvalue`;\n *\n * This API is found at `router.urlService.config` (see: [[UIRouter.urlService]], [[URLService.config]])\n */\nexport class UrlConfig implements Disposable {\n  /** @internal */ paramTypes = new ParamTypes();\n  /** @internal */ _decodeParams = true;\n  /** @internal */ _isCaseInsensitive = false;\n  /** @internal */ _isStrictMode = true;\n  /** @internal */ _defaultSquashPolicy: boolean | string = false;\n\n  /** @internal */ constructor(/** @internal */ private router: UIRouter) {}\n  /** @internal */ public dispose = () => this.paramTypes.dispose();\n\n  // Delegate these calls to the current LocationConfig implementation\n\n  /**\n   * Gets the base Href, e.g., `http://localhost/approot/`\n   *\n   * @return the application's base href\n   */\n  public baseHref = (): string => this.router.locationConfig.baseHref();\n\n  /**\n   * Gets or sets the hashPrefix\n   *\n   * This only applies when not running in [[html5Mode]] (pushstate mode)\n   *\n   * If the current url is `http://localhost/app#!/uirouter/path/#anchor`, it returns `!` which is the prefix for the \"hashbang\" portion.\n   *\n   * @return the hash prefix\n   */\n\n  public hashPrefix = (newprefix?: string): string => this.router.locationConfig.hashPrefix(newprefix);\n  /**\n   * Gets the host, e.g., `localhost`\n   *\n   * @return the protocol\n   */\n  public host = (): string => this.router.locationConfig.host();\n\n  /**\n   * Returns true when running in pushstate mode\n   *\n   * @return true when running in html5 mode (pushstate mode).\n   */\n  public html5Mode = (): boolean => this.router.locationConfig.html5Mode();\n\n  /**\n   * Gets the port, e.g., `80`\n   *\n   * @return the port number\n   */\n  public port = (): number => this.router.locationConfig.port();\n\n  /**\n   * Gets the protocol, e.g., `http`\n   *\n   * @return the protocol\n   */\n  public protocol = (): string => this.router.locationConfig.protocol();\n\n  /**\n   * Defines whether URL matching should be case sensitive (the default behavior), or not.\n   *\n   * #### Example:\n   * ```js\n   * // Allow case insensitive url matches\n   * urlService.config.caseInsensitive(true);\n   * ```\n   *\n   * @param value `false` to match URL in a case sensitive manner; otherwise `true`;\n   * @returns the current value of caseInsensitive\n   */\n  public caseInsensitive(value?: boolean): boolean {\n    return (this._isCaseInsensitive = isDefined(value) ? value : this._isCaseInsensitive);\n  }\n\n  /**\n   * Sets the default behavior when generating or matching URLs with default parameter values.\n   *\n   * #### Example:\n   * ```js\n   * // Remove default parameter values from the url\n   * urlService.config.defaultSquashPolicy(true);\n   * ```\n   *\n   * @param value A string that defines the default parameter URL squashing behavior.\n   *    - `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL\n   *    - `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the\n   *      parameter is surrounded by slashes, squash (remove) one slash from the URL\n   *    - any other string, e.g. \"~\": When generating an href with a default parameter value, squash (remove)\n   *      the parameter value from the URL and replace it with this string.\n   * @returns the current value of defaultSquashPolicy\n   */\n  public defaultSquashPolicy(value?: boolean | string) {\n    if (isDefined(value) && value !== true && value !== false && !isString(value))\n      throw new Error(`Invalid squash policy: ${value}. Valid policies: false, true, arbitrary-string`);\n    return (this._defaultSquashPolicy = isDefined(value) ? value : this._defaultSquashPolicy);\n  }\n\n  /**\n   * Defines whether URLs should match trailing slashes, or not (the default behavior).\n   *\n   * #### Example:\n   * ```js\n   * // Allow optional trailing slashes\n   * urlService.config.strictMode(false);\n   * ```\n   *\n   * @param value `false` to match trailing slashes in URLs, otherwise `true`.\n   * @returns the current value of strictMode\n   */\n  public strictMode(value?: boolean): boolean {\n    return (this._isStrictMode = isDefined(value) ? value : this._isStrictMode);\n  }\n\n  /**\n   * Creates and registers a custom [[ParamType]] object\n   *\n   * A custom parameter type can be used to generate URLs with typed parameters or custom encoding/decoding.\n   *\n   * #### Note: Register custom types *before using them* in a state definition.\n   *\n   * #### Example:\n   * ```js\n   * // Encode object parameter as JSON string\n   * urlService.config.type('myjson', {\n   *   encode: (obj) => JSON.stringify(obj),\n   *   decode: (str) => JSON.parse(str),\n   *   is: (val) => typeof(val) === 'object',\n   *   pattern: /[^/]+/,\n   *   equals: (a, b) => _.isEqual(a, b),\n   * });\n   * ```\n   *\n   * See [[ParamTypeDefinition]] for more examples\n   *\n   * @param name The type name.\n   * @param definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.\n   * @param definitionFn A function that is injected before the app runtime starts.\n   *        The result of this function should be a [[ParamTypeDefinition]].\n   *        The result is merged into the existing `definition`.\n   *        See [[ParamType]] for information on the values accepted.\n   *\n   * @returns if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined\n   */\n  type(name: string, definition?: ParamTypeDefinition, definitionFn?: () => ParamTypeDefinition) {\n    const type = this.paramTypes.type(name, definition, definitionFn);\n    return !isDefined(definition) ? type : this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}