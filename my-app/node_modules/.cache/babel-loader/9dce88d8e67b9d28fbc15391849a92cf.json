{"ast":null,"code":"import { isArray, isObject } from '../common/index';\n/**\n * An angular1-like promise api\n *\n * This object implements four methods similar to the\n * [angular 1 promise api](https://docs.angularjs.org/api/ng/service/$q)\n *\n * UI-Router evolved from an angular 1 library to a framework agnostic library.\n * However, some of the `@uirouter/core` code uses these ng1 style APIs to support ng1 style dependency injection.\n *\n * This API provides native ES6 promise support wrapped as a $q-like API.\n * Internally, UI-Router uses this $q object to perform promise operations.\n * The `angular-ui-router` (ui-router for angular 1) uses the $q API provided by angular.\n *\n * $q-like promise api\n */\n\nexport var $q = {\n  /** Normalizes a value as a promise */\n  when: function (val) {\n    return new Promise(function (resolve, reject) {\n      return resolve(val);\n    });\n  },\n\n  /** Normalizes a value as a promise rejection */\n  reject: function (val) {\n    return new Promise(function (resolve, reject) {\n      reject(val);\n    });\n  },\n\n  /** @returns a deferred object, which has `resolve` and `reject` functions */\n  defer: function () {\n    var deferred = {};\n    deferred.promise = new Promise(function (resolve, reject) {\n      deferred.resolve = resolve;\n      deferred.reject = reject;\n    });\n    return deferred;\n  },\n\n  /** Like Promise.all(), but also supports object key/promise notation like $q */\n  all: function (promises) {\n    if (isArray(promises)) {\n      return Promise.all(promises);\n    }\n\n    if (isObject(promises)) {\n      // Convert promises map to promises array.\n      // When each promise resolves, map it to a tuple { key: key, val: val }\n      var chain = Object.keys(promises).map(function (key) {\n        return promises[key].then(function (val) {\n          return {\n            key: key,\n            val: val\n          };\n        });\n      }); // Then wait for all promises to resolve, and convert them back to an object\n\n      return $q.all(chain).then(function (values) {\n        return values.reduce(function (acc, tuple) {\n          acc[tuple.key] = tuple.val;\n          return acc;\n        }, {});\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,EAAkBC,QAAlB,QAA0C,iBAA1C;AAEA;;;;;;;;;;;;;;;;AAeA,OAAO,IAAMC,EAAE,GAAG;EAChB;EACAC,IAAI,EAAE,UAACC,GAAD,EAAI;IAAK,WAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;MAAK,cAAO,CAACH,GAAD,CAAP;IAAY,CAA7C;EAA8C,CAF7C;;EAIhB;EACAG,MAAM,EAAE,UAACH,GAAD,EAAI;IACV,WAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;MAC1BA,MAAM,CAACH,GAAD,CAAN;IACD,CAFD;EAEE,CARY;;EAUhB;EACAI,KAAK,EAAE;IACL,IAAMC,QAAQ,GAAQ,EAAtB;IACAA,QAAQ,CAACC,OAAT,GAAmB,IAAIL,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAgB;MAC7CE,QAAQ,CAACH,OAAT,GAAmBA,OAAnB;MACAG,QAAQ,CAACF,MAAT,GAAkBA,MAAlB;IACD,CAHkB,CAAnB;IAIA,OAAOE,QAAP;EACD,CAlBe;;EAoBhB;EACAE,GAAG,EAAE,UAACC,QAAD,EAA2D;IAC9D,IAAIZ,OAAO,CAACY,QAAD,CAAX,EAAuB;MACrB,OAAOP,OAAO,CAACM,GAAR,CAAYC,QAAZ,CAAP;IACD;;IAED,IAAIX,QAAQ,CAACW,QAAD,CAAZ,EAAwB;MACtB;MACA;MACA,IAAMC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYH,QAAZ,EAAsBI,GAAtB,CAA0B,UAACC,GAAD,EAAI;QAAK,eAAQ,CAACA,GAAD,CAAR,CAAcC,IAAd,CAAmB,UAACd,GAAD,EAAI;UAAK,OAAC;YAAEa,GAAG,KAAL;YAAOb,GAAG;UAAV,CAAD;QAAc,CAA1C;MAA2C,CAA9E,CAAd,CAHsB,CAKtB;;MACA,OAAOF,EAAE,CAACS,GAAH,CAAOE,KAAP,EAAcK,IAAd,CAAmB,UAACC,MAAD,EAAO;QAC/B,aAAM,CAACC,MAAP,CAAc,UAACC,GAAD,EAAMC,KAAN,EAAW;UACvBD,GAAG,CAACC,KAAK,CAACL,GAAP,CAAH,GAAiBK,KAAK,CAAClB,GAAvB;UACA,OAAOiB,GAAP;QACD,CAHD,EAGG,EAHH;MAGM,CAJD,CAAP;IAMD;EACF;AAvCe,CAAX","names":["isArray","isObject","$q","when","val","Promise","resolve","reject","defer","deferred","promise","all","promises","chain","Object","keys","map","key","then","values","reduce","acc","tuple"],"sources":["C:\\Users\\huang\\node_modules\\@uirouter\\core\\lib-esm\\vanilla\\@uirouter\\core\\vanilla\\q.ts"],"sourcesContent":["import { isArray, isObject, $QLike } from '../common/index';\n\n/**\n * An angular1-like promise api\n *\n * This object implements four methods similar to the\n * [angular 1 promise api](https://docs.angularjs.org/api/ng/service/$q)\n *\n * UI-Router evolved from an angular 1 library to a framework agnostic library.\n * However, some of the `@uirouter/core` code uses these ng1 style APIs to support ng1 style dependency injection.\n *\n * This API provides native ES6 promise support wrapped as a $q-like API.\n * Internally, UI-Router uses this $q object to perform promise operations.\n * The `angular-ui-router` (ui-router for angular 1) uses the $q API provided by angular.\n *\n * $q-like promise api\n */\nexport const $q = {\n  /** Normalizes a value as a promise */\n  when: (val) => new Promise((resolve, reject) => resolve(val)),\n\n  /** Normalizes a value as a promise rejection */\n  reject: (val) =>\n    new Promise((resolve, reject) => {\n      reject(val);\n    }),\n\n  /** @returns a deferred object, which has `resolve` and `reject` functions */\n  defer: () => {\n    const deferred: any = {};\n    deferred.promise = new Promise((resolve, reject) => {\n      deferred.resolve = resolve;\n      deferred.reject = reject;\n    });\n    return deferred;\n  },\n\n  /** Like Promise.all(), but also supports object key/promise notation like $q */\n  all: (promises: { [key: string]: Promise<any> } | Promise<any>[]) => {\n    if (isArray(promises)) {\n      return Promise.all(promises);\n    }\n\n    if (isObject(promises)) {\n      // Convert promises map to promises array.\n      // When each promise resolves, map it to a tuple { key: key, val: val }\n      const chain = Object.keys(promises).map((key) => promises[key].then((val) => ({ key, val })));\n\n      // Then wait for all promises to resolve, and convert them back to an object\n      return $q.all(chain).then((values) =>\n        values.reduce((acc, tuple) => {\n          acc[tuple.key] = tuple.val;\n          return acc;\n        }, {})\n      );\n    }\n  },\n} as $QLike;\n"]},"metadata":{},"sourceType":"module"}