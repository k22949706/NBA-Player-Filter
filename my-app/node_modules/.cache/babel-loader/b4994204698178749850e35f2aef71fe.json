{"ast":null,"code":"/**\n * Functions that manipulate strings\n *\n * Although these functions are exported, they are subject to change without notice.\n *\n * @packageDocumentation\n */\nimport { isArray, isFunction, isInjectable, isNull, isObject, isPromise, isString, isUndefined } from './predicates';\nimport { Rejection } from '../transition/rejectFactory';\nimport { identity, pushR, tail } from './common';\nimport { pattern, val } from './hof';\n/**\n * Returns a string shortened to a maximum length\n *\n * If the string is already less than the `max` length, return the string.\n * Else return the string, shortened to `max - 3` and append three dots (\"...\").\n *\n * @param max the maximum length of the string to return\n * @param str the input string\n */\n\nexport function maxLength(max, str) {\n  if (str.length <= max) return str;\n  return str.substr(0, max - 3) + '...';\n}\n/**\n * Returns a string, with spaces added to the end, up to a desired str length\n *\n * If the string is already longer than the desired length, return the string.\n * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\n *\n * @param length the desired length of the string to return\n * @param str the input string\n */\n\nexport function padString(length, str) {\n  while (str.length < length) str += ' ';\n\n  return str;\n}\nexport function kebobString(camelCase) {\n  return camelCase.replace(/^([A-Z])/, function ($1) {\n    return $1.toLowerCase();\n  }) // replace first char\n  .replace(/([A-Z])/g, function ($1) {\n    return '-' + $1.toLowerCase();\n  }); // replace rest\n}\nexport function functionToString(fn) {\n  var fnStr = fnToString(fn);\n  var namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\n  var toStr = namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\n  var fnName = fn['name'] || '';\n\n  if (fnName && toStr.match(/function \\(/)) {\n    return 'function ' + fnName + toStr.substr(9);\n  }\n\n  return toStr;\n}\nexport function fnToString(fn) {\n  var _fn = isArray(fn) ? fn.slice(-1)[0] : fn;\n\n  return _fn && _fn.toString() || 'undefined';\n}\nexport function stringify(o) {\n  var seen = [];\n  var isRejection = Rejection.isRejectionPromise;\n\n  var hasToString = function (obj) {\n    return isObject(obj) && !isArray(obj) && obj.constructor !== Object && isFunction(obj.toString);\n  };\n\n  var stringifyPattern = pattern([[isUndefined, val('undefined')], [isNull, val('null')], [isPromise, val('[Promise]')], [isRejection, function (x) {\n    return x._transitionRejection.toString();\n  }], [hasToString, function (x) {\n    return x.toString();\n  }], [isInjectable, functionToString], [val(true), identity]]);\n\n  function format(value) {\n    if (isObject(value)) {\n      if (seen.indexOf(value) !== -1) return '[circular ref]';\n      seen.push(value);\n    }\n\n    return stringifyPattern(value);\n  }\n\n  if (isUndefined(o)) {\n    // Workaround for IE & Edge Spec incompatibility where replacer function would not be called when JSON.stringify\n    // is given `undefined` as value. To work around that, we simply detect `undefined` and bail out early by\n    // manually stringifying it.\n    return format(o);\n  }\n\n  return JSON.stringify(o, function (key, value) {\n    return format(value);\n  }).replace(/\\\\\"/g, '\"');\n}\n/** Returns a function that splits a string on a character or substring */\n\nexport var beforeAfterSubstr = function (char) {\n  return function (str) {\n    if (!str) return ['', ''];\n    var idx = str.indexOf(char);\n    if (idx === -1) return [str, ''];\n    return [str.substr(0, idx), str.substr(idx + 1)];\n  };\n};\nexport var hostRegex = new RegExp('^(?:[a-z]+:)?//[^/]+/');\nexport var stripLastPathElement = function (str) {\n  return str.replace(/\\/[^/]*$/, '');\n};\nexport var splitHash = beforeAfterSubstr('#');\nexport var splitQuery = beforeAfterSubstr('?');\nexport var splitEqual = beforeAfterSubstr('=');\nexport var trimHashVal = function (str) {\n  return str ? str.replace(/^#/, '') : '';\n};\n/**\n * Splits on a delimiter, but returns the delimiters in the array\n *\n * #### Example:\n * ```js\n * var splitOnSlashes = splitOnDelim('/');\n * splitOnSlashes(\"/foo\"); // [\"/\", \"foo\"]\n * splitOnSlashes(\"/foo/\"); // [\"/\", \"foo\", \"/\"]\n * ```\n */\n\nexport function splitOnDelim(delim) {\n  var re = new RegExp('(' + delim + ')', 'g');\n  return function (str) {\n    return str.split(re).filter(identity);\n  };\n}\n/**\n * Reduce fn that joins neighboring strings\n *\n * Given an array of strings, returns a new array\n * where all neighboring strings have been joined.\n *\n * #### Example:\n * ```js\n * let arr = [\"foo\", \"bar\", 1, \"baz\", \"\", \"qux\" ];\n * arr.reduce(joinNeighborsR, []) // [\"foobar\", 1, \"bazqux\" ]\n * ```\n */\n\nexport function joinNeighborsR(acc, x) {\n  if (isString(tail(acc)) && isString(x)) return acc.slice(0, -1).concat(tail(acc) + x);\n  return pushR(acc, x);\n}","map":{"version":3,"mappings":"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","names":["isArray","isFunction","isInjectable","isNull","isObject","isPromise","isString","isUndefined","Rejection","identity","pushR","tail","pattern","val","maxLength","max","str","length","substr","padString","kebobString","camelCase","replace","$1","toLowerCase","functionToString","fn","fnStr","fnToString","namedFunctionMatch","match","toStr","fnName","_fn","slice","toString","stringify","o","seen","isRejection","isRejectionPromise","hasToString","obj","constructor","Object","stringifyPattern","x","_transitionRejection","format","value","indexOf","push","JSON","key","beforeAfterSubstr","char","idx","hostRegex","RegExp","stripLastPathElement","splitHash","splitQuery","splitEqual","trimHashVal","splitOnDelim","delim","re","split","filter","joinNeighborsR","acc","concat"],"sources":["C:\\Users\\huang\\node_modules\\@uirouter\\core\\lib-esm\\common\\@uirouter\\core\\common\\strings.ts"],"sourcesContent":["/**\n * Functions that manipulate strings\n *\n * Although these functions are exported, they are subject to change without notice.\n *\n * @packageDocumentation\n */\n\nimport { isArray, isFunction, isInjectable, isNull, isObject, isPromise, isString, isUndefined } from './predicates';\nimport { Rejection } from '../transition/rejectFactory';\nimport { identity, IInjectable, pushR, tail } from './common';\nimport { pattern, val } from './hof';\n\n/**\n * Returns a string shortened to a maximum length\n *\n * If the string is already less than the `max` length, return the string.\n * Else return the string, shortened to `max - 3` and append three dots (\"...\").\n *\n * @param max the maximum length of the string to return\n * @param str the input string\n */\nexport function maxLength(max: number, str: string) {\n  if (str.length <= max) return str;\n  return str.substr(0, max - 3) + '...';\n}\n\n/**\n * Returns a string, with spaces added to the end, up to a desired str length\n *\n * If the string is already longer than the desired length, return the string.\n * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\n *\n * @param length the desired length of the string to return\n * @param str the input string\n */\nexport function padString(length: number, str: string) {\n  while (str.length < length) str += ' ';\n  return str;\n}\n\nexport function kebobString(camelCase: string) {\n  return camelCase\n    .replace(/^([A-Z])/, ($1) => $1.toLowerCase()) // replace first char\n    .replace(/([A-Z])/g, ($1) => '-' + $1.toLowerCase()); // replace rest\n}\n\nexport function functionToString(fn: Function) {\n  const fnStr = fnToString(fn);\n  const namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\n  const toStr = namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\n\n  const fnName = fn['name'] || '';\n  if (fnName && toStr.match(/function \\(/)) {\n    return 'function ' + fnName + toStr.substr(9);\n  }\n  return toStr;\n}\n\nexport function fnToString(fn: IInjectable) {\n  const _fn = isArray(fn) ? fn.slice(-1)[0] : fn;\n  return (_fn && _fn.toString()) || 'undefined';\n}\n\nexport function stringify(o: any) {\n  const seen: any[] = [];\n\n  const isRejection = Rejection.isRejectionPromise;\n  const hasToString = (obj: any) =>\n    isObject(obj) && !isArray(obj) && obj.constructor !== Object && isFunction(obj.toString);\n\n  const stringifyPattern = pattern([\n    [isUndefined, val('undefined')],\n    [isNull, val('null')],\n    [isPromise, val('[Promise]')],\n    [isRejection, (x: any) => x._transitionRejection.toString()],\n    [hasToString, (x: object) => x.toString()],\n    [isInjectable, functionToString],\n    [val(true), identity],\n  ]) as (val: any) => string;\n\n  function format(value: any) {\n    if (isObject(value)) {\n      if (seen.indexOf(value) !== -1) return '[circular ref]';\n      seen.push(value);\n    }\n    return stringifyPattern(value);\n  }\n\n  if (isUndefined(o)) {\n    // Workaround for IE & Edge Spec incompatibility where replacer function would not be called when JSON.stringify\n    // is given `undefined` as value. To work around that, we simply detect `undefined` and bail out early by\n    // manually stringifying it.\n    return format(o);\n  }\n\n  return JSON.stringify(o, (key, value) => format(value)).replace(/\\\\\"/g, '\"');\n}\n\n/** Returns a function that splits a string on a character or substring */\nexport const beforeAfterSubstr =\n  (char: string) =>\n  (str: string): string[] => {\n    if (!str) return ['', ''];\n    const idx = str.indexOf(char);\n    if (idx === -1) return [str, ''];\n    return [str.substr(0, idx), str.substr(idx + 1)];\n  };\n\nexport const hostRegex = new RegExp('^(?:[a-z]+:)?//[^/]+/');\nexport const stripLastPathElement = (str: string) => str.replace(/\\/[^/]*$/, '');\nexport const splitHash = beforeAfterSubstr('#');\nexport const splitQuery = beforeAfterSubstr('?');\nexport const splitEqual = beforeAfterSubstr('=');\nexport const trimHashVal = (str: string) => (str ? str.replace(/^#/, '') : '');\n\n/**\n * Splits on a delimiter, but returns the delimiters in the array\n *\n * #### Example:\n * ```js\n * var splitOnSlashes = splitOnDelim('/');\n * splitOnSlashes(\"/foo\"); // [\"/\", \"foo\"]\n * splitOnSlashes(\"/foo/\"); // [\"/\", \"foo\", \"/\"]\n * ```\n */\nexport function splitOnDelim(delim: string) {\n  const re = new RegExp('(' + delim + ')', 'g');\n  return (str: string) => str.split(re).filter(identity);\n}\n\n/**\n * Reduce fn that joins neighboring strings\n *\n * Given an array of strings, returns a new array\n * where all neighboring strings have been joined.\n *\n * #### Example:\n * ```js\n * let arr = [\"foo\", \"bar\", 1, \"baz\", \"\", \"qux\" ];\n * arr.reduce(joinNeighborsR, []) // [\"foobar\", 1, \"bazqux\" ]\n * ```\n */\nexport function joinNeighborsR(acc: any[], x: any) {\n  if (isString(tail(acc)) && isString(x)) return acc.slice(0, -1).concat(tail(acc) + x);\n  return pushR(acc, x);\n}\n"]},"metadata":{},"sourceType":"module"}