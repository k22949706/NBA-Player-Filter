{"ast":null,"code":"/**\n * A factory which creates an onEnter, onExit or onRetain transition hook function\n *\n * The returned function invokes the (for instance) state.onEnter hook when the\n * state is being entered.\n */\nfunction makeEnterExitRetainHook(hookName) {\n  return function (transition, state) {\n    var _state = state.$$state();\n\n    var hookFn = _state[hookName];\n    return hookFn(transition, state);\n  };\n}\n/**\n * The [[TransitionStateHookFn]] for onExit\n *\n * When the state is being exited, the state's .onExit function is invoked.\n *\n * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`\n *\n * See: [[IHookRegistry.onExit]]\n */\n\n\nvar onExitHook = makeEnterExitRetainHook('onExit');\nexport var registerOnExitHook = function (transitionService) {\n  return transitionService.onExit({\n    exiting: function (state) {\n      return !!state.onExit;\n    }\n  }, onExitHook);\n};\n/**\n * The [[TransitionStateHookFn]] for onRetain\n *\n * When the state was already entered, and is not being exited or re-entered, the state's .onRetain function is invoked.\n *\n * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`\n *\n * See: [[IHookRegistry.onRetain]]\n */\n\nvar onRetainHook = makeEnterExitRetainHook('onRetain');\nexport var registerOnRetainHook = function (transitionService) {\n  return transitionService.onRetain({\n    retained: function (state) {\n      return !!state.onRetain;\n    }\n  }, onRetainHook);\n};\n/**\n * The [[TransitionStateHookFn]] for onEnter\n *\n * When the state is being entered, the state's .onEnter function is invoked.\n *\n * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`\n *\n * See: [[IHookRegistry.onEnter]]\n */\n\nvar onEnterHook = makeEnterExitRetainHook('onEnter');\nexport var registerOnEnterHook = function (transitionService) {\n  return transitionService.onEnter({\n    entering: function (state) {\n      return !!state.onEnter;\n    }\n  }, onEnterHook);\n};","map":{"version":3,"mappings":"AAMA;;;;;;AAMA,SAASA,uBAAT,CAAiCC,QAAjC,EAAiD;EAC/C,OAAO,UAACC,UAAD,EAAyBC,KAAzB,EAAgD;IACrD,IAAMC,MAAM,GAAgBD,KAAK,CAACE,OAAN,EAA5B;;IACA,IAAMC,MAAM,GAA0BF,MAAM,CAACH,QAAD,CAA5C;IACA,OAAOK,MAAM,CAACJ,UAAD,EAAaC,KAAb,CAAb;EACD,CAJD;AAKD;AAED;;;;;;;;;;;AASA,IAAMI,UAAU,GAA0BP,uBAAuB,CAAC,QAAD,CAAjE;AACA,OAAO,IAAMQ,kBAAkB,GAAG,UAACC,iBAAD,EAAqC;EACrE,wBAAiB,CAACC,MAAlB,CAAyB;IAAEC,OAAO,EAAE,UAACR,KAAD,EAAM;MAAK,QAAC,CAACA,KAAK,CAACO,MAAR;IAAc;EAApC,CAAzB,EAAiEH,UAAjE;AAA4E,CADvE;AAGP;;;;;;;;;;AASA,IAAMK,YAAY,GAA0BZ,uBAAuB,CAAC,UAAD,CAAnE;AACA,OAAO,IAAMa,oBAAoB,GAAG,UAACJ,iBAAD,EAAqC;EACvE,wBAAiB,CAACK,QAAlB,CAA2B;IAAEC,QAAQ,EAAE,UAACZ,KAAD,EAAM;MAAK,QAAC,CAACA,KAAK,CAACW,QAAR;IAAgB;EAAvC,CAA3B,EAAsEF,YAAtE;AAAmF,CAD9E;AAGP;;;;;;;;;;AASA,IAAMI,WAAW,GAA0BhB,uBAAuB,CAAC,SAAD,CAAlE;AACA,OAAO,IAAMiB,mBAAmB,GAAG,UAACR,iBAAD,EAAqC;EACtE,wBAAiB,CAACS,OAAlB,CAA0B;IAAEC,QAAQ,EAAE,UAAChB,KAAD,EAAM;MAAK,QAAC,CAACA,KAAK,CAACe,OAAR;IAAe;EAAtC,CAA1B,EAAoEF,WAApE;AAAgF,CAD3E","names":["makeEnterExitRetainHook","hookName","transition","state","_state","$$state","hookFn","onExitHook","registerOnExitHook","transitionService","onExit","exiting","onRetainHook","registerOnRetainHook","onRetain","retained","onEnterHook","registerOnEnterHook","onEnter","entering"],"sources":["C:\\Users\\huang\\node_modules\\@uirouter\\core\\lib-esm\\hooks\\@uirouter\\core\\hooks\\onEnterExitRetain.ts"],"sourcesContent":["import { TransitionStateHookFn } from '../transition/interface';\nimport { Transition } from '../transition/transition';\nimport { TransitionService } from '../transition/transitionService';\nimport { StateDeclaration } from '../state/interface';\nimport { StateObject } from '../state/stateObject';\n\n/**\n * A factory which creates an onEnter, onExit or onRetain transition hook function\n *\n * The returned function invokes the (for instance) state.onEnter hook when the\n * state is being entered.\n */\nfunction makeEnterExitRetainHook(hookName: string): TransitionStateHookFn {\n  return (transition: Transition, state: StateDeclaration) => {\n    const _state: StateObject = state.$$state();\n    const hookFn: TransitionStateHookFn = _state[hookName];\n    return hookFn(transition, state);\n  };\n}\n\n/**\n * The [[TransitionStateHookFn]] for onExit\n *\n * When the state is being exited, the state's .onExit function is invoked.\n *\n * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`\n *\n * See: [[IHookRegistry.onExit]]\n */\nconst onExitHook: TransitionStateHookFn = makeEnterExitRetainHook('onExit');\nexport const registerOnExitHook = (transitionService: TransitionService) =>\n  transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);\n\n/**\n * The [[TransitionStateHookFn]] for onRetain\n *\n * When the state was already entered, and is not being exited or re-entered, the state's .onRetain function is invoked.\n *\n * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`\n *\n * See: [[IHookRegistry.onRetain]]\n */\nconst onRetainHook: TransitionStateHookFn = makeEnterExitRetainHook('onRetain');\nexport const registerOnRetainHook = (transitionService: TransitionService) =>\n  transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);\n\n/**\n * The [[TransitionStateHookFn]] for onEnter\n *\n * When the state is being entered, the state's .onEnter function is invoked.\n *\n * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`\n *\n * See: [[IHookRegistry.onEnter]]\n */\nconst onEnterHook: TransitionStateHookFn = makeEnterExitRetainHook('onEnter');\nexport const registerOnEnterHook = (transitionService: TransitionService) =>\n  transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);\n"]},"metadata":{},"sourceType":"module"}