{"ast":null,"code":"'use strict';\n\nimport { extend, silentRejection } from '../common/common';\nimport { stringify } from '../common/strings';\nimport { is } from '../common/hof';\n/** An enum for Transition Rejection reasons */\n\nvar RejectType;\n\n(function (RejectType) {\n  /**\n   * A new transition superseded this one.\n   *\n   * While this transition was running, a new transition started.\n   * This transition is cancelled because it was superseded by new transition.\n   */\n  RejectType[RejectType[\"SUPERSEDED\"] = 2] = \"SUPERSEDED\";\n  /**\n   * The transition was aborted\n   *\n   * The transition was aborted by a hook which returned `false`\n   */\n\n  RejectType[RejectType[\"ABORTED\"] = 3] = \"ABORTED\";\n  /**\n   * The transition was invalid\n   *\n   * The transition was never started because it was invalid\n   */\n\n  RejectType[RejectType[\"INVALID\"] = 4] = \"INVALID\";\n  /**\n   * The transition was ignored\n   *\n   * The transition was ignored because it would have no effect.\n   *\n   * Either:\n   *\n   * - The transition is targeting the current state and parameter values\n   * - The transition is targeting the same state and parameter values as the currently running transition.\n   */\n\n  RejectType[RejectType[\"IGNORED\"] = 5] = \"IGNORED\";\n  /**\n   * The transition errored.\n   *\n   * This generally means a hook threw an error or returned a rejected promise\n   */\n\n  RejectType[RejectType[\"ERROR\"] = 6] = \"ERROR\";\n})(RejectType || (RejectType = {}));\n\nexport { RejectType };\n/** @internal */\n\nvar id = 0;\n\nvar Rejection =\n/** @class */\nfunction () {\n  function Rejection(type, message, detail) {\n    /** @internal */\n    this.$id = id++;\n    this.type = type;\n    this.message = message;\n    this.detail = detail;\n  }\n  /** Returns true if the obj is a rejected promise created from the `asPromise` factory */\n\n\n  Rejection.isRejectionPromise = function (obj) {\n    return obj && typeof obj.then === 'function' && is(Rejection)(obj._transitionRejection);\n  };\n  /** Returns a Rejection due to transition superseded */\n\n\n  Rejection.superseded = function (detail, options) {\n    var message = 'The transition has been superseded by a different transition';\n    var rejection = new Rejection(RejectType.SUPERSEDED, message, detail);\n\n    if (options && options.redirected) {\n      rejection.redirected = true;\n    }\n\n    return rejection;\n  };\n  /** Returns a Rejection due to redirected transition */\n\n\n  Rejection.redirected = function (detail) {\n    return Rejection.superseded(detail, {\n      redirected: true\n    });\n  };\n  /** Returns a Rejection due to invalid transition */\n\n\n  Rejection.invalid = function (detail) {\n    var message = 'This transition is invalid';\n    return new Rejection(RejectType.INVALID, message, detail);\n  };\n  /** Returns a Rejection due to ignored transition */\n\n\n  Rejection.ignored = function (detail) {\n    var message = 'The transition was ignored';\n    return new Rejection(RejectType.IGNORED, message, detail);\n  };\n  /** Returns a Rejection due to aborted transition */\n\n\n  Rejection.aborted = function (detail) {\n    var message = 'The transition has been aborted';\n    return new Rejection(RejectType.ABORTED, message, detail);\n  };\n  /** Returns a Rejection due to aborted transition */\n\n\n  Rejection.errored = function (detail) {\n    var message = 'The transition errored';\n    return new Rejection(RejectType.ERROR, message, detail);\n  };\n  /**\n   * Returns a Rejection\n   *\n   * Normalizes a value as a Rejection.\n   * If the value is already a Rejection, returns it.\n   * Otherwise, wraps and returns the value as a Rejection (Rejection type: ERROR).\n   *\n   * @returns `detail` if it is already a `Rejection`, else returns an ERROR Rejection.\n   */\n\n\n  Rejection.normalize = function (detail) {\n    return is(Rejection)(detail) ? detail : Rejection.errored(detail);\n  };\n\n  Rejection.prototype.toString = function () {\n    var detailString = function (d) {\n      return d && d.toString !== Object.prototype.toString ? d.toString() : stringify(d);\n    };\n\n    var detail = detailString(this.detail);\n\n    var _a = this,\n        $id = _a.$id,\n        type = _a.type,\n        message = _a.message;\n\n    return \"Transition Rejection($id: \" + $id + \" type: \" + type + \", message: \" + message + \", detail: \" + detail + \")\";\n  };\n\n  Rejection.prototype.toPromise = function () {\n    return extend(silentRejection(this), {\n      _transitionRejection: this\n    });\n  };\n\n  return Rejection;\n}();\n\nexport { Rejection };","map":{"version":3,"mappings":"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","names":["extend","silentRejection","stringify","is","RejectType","id","type","message","detail","Rejection","obj","then","_transitionRejection","options","rejection","SUPERSEDED","redirected","superseded","INVALID","IGNORED","ABORTED","ERROR","errored","detailString","d","toString","Object","prototype","$id"],"sources":["C:\\Users\\huang\\node_modules\\@uirouter\\core\\lib-esm\\transition\\@uirouter\\core\\transition\\rejectFactory.ts"],"sourcesContent":["'use strict';\nimport { extend, silentRejection } from '../common/common';\nimport { stringify } from '../common/strings';\nimport { is } from '../common/hof';\n\n/** An enum for Transition Rejection reasons */\nenum RejectType {\n  /**\n   * A new transition superseded this one.\n   *\n   * While this transition was running, a new transition started.\n   * This transition is cancelled because it was superseded by new transition.\n   */\n  SUPERSEDED = 2,\n\n  /**\n   * The transition was aborted\n   *\n   * The transition was aborted by a hook which returned `false`\n   */\n  ABORTED = 3,\n\n  /**\n   * The transition was invalid\n   *\n   * The transition was never started because it was invalid\n   */\n  INVALID = 4,\n\n  /**\n   * The transition was ignored\n   *\n   * The transition was ignored because it would have no effect.\n   *\n   * Either:\n   *\n   * - The transition is targeting the current state and parameter values\n   * - The transition is targeting the same state and parameter values as the currently running transition.\n   */\n  IGNORED = 5,\n\n  /**\n   * The transition errored.\n   *\n   * This generally means a hook threw an error or returned a rejected promise\n   */\n  ERROR = 6,\n}\n\nexport { RejectType };\n\n/** @internal */\nlet id = 0;\n\nexport class Rejection {\n  /** @internal */\n  $id = id++;\n  /**\n   * The type of the rejection.\n   *\n   * This value is an number representing the type of transition rejection.\n   * If using Typescript, this is a Typescript enum.\n   *\n   * - [[RejectType.SUPERSEDED]] (`2`)\n   * - [[RejectType.ABORTED]] (`3`)\n   * - [[RejectType.INVALID]] (`4`)\n   * - [[RejectType.IGNORED]] (`5`)\n   * - [[RejectType.ERROR]] (`6`)\n   *\n   */\n  type: RejectType;\n\n  /**\n   * A message describing the rejection\n   */\n  message: string;\n\n  /**\n   * A detail object\n   *\n   * This value varies based on the mechanism for rejecting the transition.\n   * For example, if an error was thrown from a hook, the `detail` will be the `Error` object.\n   * If a hook returned a rejected promise, the `detail` will be the rejected value.\n   */\n  detail: any;\n\n  /**\n   * Indicates if the transition was redirected.\n   *\n   * When a transition is redirected, the rejection [[type]] will be [[RejectType.SUPERSEDED]] and this flag will be true.\n   */\n  redirected: boolean;\n\n  /** Returns true if the obj is a rejected promise created from the `asPromise` factory */\n  static isRejectionPromise(obj: any): boolean {\n    return obj && typeof obj.then === 'function' && is(Rejection)(obj._transitionRejection);\n  }\n\n  /** Returns a Rejection due to transition superseded */\n  static superseded(detail?: any, options?: any): Rejection {\n    const message = 'The transition has been superseded by a different transition';\n    const rejection = new Rejection(RejectType.SUPERSEDED, message, detail);\n    if (options && options.redirected) {\n      rejection.redirected = true;\n    }\n    return rejection;\n  }\n\n  /** Returns a Rejection due to redirected transition */\n  static redirected(detail?: any): Rejection {\n    return Rejection.superseded(detail, { redirected: true });\n  }\n\n  /** Returns a Rejection due to invalid transition */\n  static invalid(detail?: any): Rejection {\n    const message = 'This transition is invalid';\n    return new Rejection(RejectType.INVALID, message, detail);\n  }\n\n  /** Returns a Rejection due to ignored transition */\n  static ignored(detail?: any): Rejection {\n    const message = 'The transition was ignored';\n    return new Rejection(RejectType.IGNORED, message, detail);\n  }\n\n  /** Returns a Rejection due to aborted transition */\n  static aborted(detail?: any): Rejection {\n    const message = 'The transition has been aborted';\n    return new Rejection(RejectType.ABORTED, message, detail);\n  }\n\n  /** Returns a Rejection due to aborted transition */\n  static errored(detail?: any): Rejection {\n    const message = 'The transition errored';\n    return new Rejection(RejectType.ERROR, message, detail);\n  }\n\n  /**\n   * Returns a Rejection\n   *\n   * Normalizes a value as a Rejection.\n   * If the value is already a Rejection, returns it.\n   * Otherwise, wraps and returns the value as a Rejection (Rejection type: ERROR).\n   *\n   * @returns `detail` if it is already a `Rejection`, else returns an ERROR Rejection.\n   */\n  static normalize(detail?: Rejection | Error | any): Rejection {\n    return is(Rejection)(detail) ? detail : Rejection.errored(detail);\n  }\n\n  constructor(type: number, message?: string, detail?: any) {\n    this.type = type;\n    this.message = message;\n    this.detail = detail;\n  }\n\n  toString() {\n    const detailString = (d: any) => (d && d.toString !== Object.prototype.toString ? d.toString() : stringify(d));\n    const detail = detailString(this.detail);\n    const { $id, type, message } = this;\n    return `Transition Rejection($id: ${$id} type: ${type}, message: ${message}, detail: ${detail})`;\n  }\n\n  toPromise(): Promise<any> {\n    return extend(silentRejection(this), { _transitionRejection: this });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}