{"ast":null,"code":"/**\n * A [[TransitionHookFn]] which updates the URL after a successful transition\n *\n * Registered using `transitionService.onSuccess({}, updateUrl);`\n */\nvar updateUrl = function (transition) {\n  var options = transition.options();\n  var $state = transition.router.stateService;\n  var $urlRouter = transition.router.urlRouter; // Dont update the url in these situations:\n  // The transition was triggered by a URL sync (options.source === 'url')\n  // The user doesn't want the url to update (options.location === false)\n  // The destination state, and all parents have no navigable url\n\n  if (options.source !== 'url' && options.location && $state.$current.navigable) {\n    var urlOptions = {\n      replace: options.location === 'replace'\n    };\n    $urlRouter.push($state.$current.navigable.url, $state.params, urlOptions);\n  }\n\n  $urlRouter.update(true);\n};\n\nexport var registerUpdateUrl = function (transitionService) {\n  return transitionService.onSuccess({}, updateUrl, {\n    priority: 9999\n  });\n};","map":{"version":3,"mappings":"AAMA;;;;;AAKA,IAAMA,SAAS,GAAqB,UAACC,UAAD,EAAuB;EACzD,IAAMC,OAAO,GAAGD,UAAU,CAACC,OAAX,EAAhB;EACA,IAAMC,MAAM,GAAiBF,UAAU,CAACG,MAAX,CAAkBC,YAA/C;EACA,IAAMC,UAAU,GAAcL,UAAU,CAACG,MAAX,CAAkBG,SAAhD,CAHyD,CAKzD;EACA;EACA;EACA;;EACA,IAAIL,OAAO,CAACM,MAAR,KAAmB,KAAnB,IAA4BN,OAAO,CAACO,QAApC,IAAgDN,MAAM,CAACO,QAAP,CAAgBC,SAApE,EAA+E;IAC7E,IAAMC,UAAU,GAAG;MAAEC,OAAO,EAAEX,OAAO,CAACO,QAAR,KAAqB;IAAhC,CAAnB;IACAH,UAAU,CAACQ,IAAX,CAAgBX,MAAM,CAACO,QAAP,CAAgBC,SAAhB,CAA0BI,GAA1C,EAA+CZ,MAAM,CAACa,MAAtD,EAA8DJ,UAA9D;EACD;;EAEDN,UAAU,CAACW,MAAX,CAAkB,IAAlB;AACD,CAfD;;AAiBA,OAAO,IAAMC,iBAAiB,GAAG,UAACC,iBAAD,EAAqC;EACpE,wBAAiB,CAACC,SAAlB,CAA4B,EAA5B,EAAgCpB,SAAhC,EAA2C;IAAEqB,QAAQ,EAAE;EAAZ,CAA3C;AAA8D,CADzD","names":["updateUrl","transition","options","$state","router","stateService","$urlRouter","urlRouter","source","location","$current","navigable","urlOptions","replace","push","url","params","update","registerUpdateUrl","transitionService","onSuccess","priority"],"sources":["C:\\Users\\huang\\node_modules\\@uirouter\\core\\lib-esm\\hooks\\@uirouter\\core\\hooks\\url.ts"],"sourcesContent":["import { UrlRouter } from '../url/urlRouter';\nimport { StateService } from '../state/stateService';\nimport { Transition } from '../transition/transition';\nimport { TransitionHookFn } from '../transition/interface';\nimport { TransitionService } from '../transition/transitionService';\n\n/**\n * A [[TransitionHookFn]] which updates the URL after a successful transition\n *\n * Registered using `transitionService.onSuccess({}, updateUrl);`\n */\nconst updateUrl: TransitionHookFn = (transition: Transition) => {\n  const options = transition.options();\n  const $state: StateService = transition.router.stateService;\n  const $urlRouter: UrlRouter = transition.router.urlRouter;\n\n  // Dont update the url in these situations:\n  // The transition was triggered by a URL sync (options.source === 'url')\n  // The user doesn't want the url to update (options.location === false)\n  // The destination state, and all parents have no navigable url\n  if (options.source !== 'url' && options.location && $state.$current.navigable) {\n    const urlOptions = { replace: options.location === 'replace' };\n    $urlRouter.push($state.$current.navigable.url, $state.params, urlOptions);\n  }\n\n  $urlRouter.update(true);\n};\n\nexport const registerUpdateUrl = (transitionService: TransitionService) =>\n  transitionService.onSuccess({}, updateUrl, { priority: 9999 });\n"]},"metadata":{},"sourceType":"module"}