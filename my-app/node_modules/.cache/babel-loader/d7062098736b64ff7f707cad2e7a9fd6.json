{"ast":null,"code":"var noImpl = function (fnname) {\n  return function () {\n    throw new Error(\"No implementation for \" + fnname + \". The framework specific code did not implement this method.\");\n  };\n};\n\nexport var makeStub = function (service, methods) {\n  return methods.reduce(function (acc, key) {\n    return acc[key] = noImpl(service + \".\" + key + \"()\"), acc;\n  }, {});\n};\nvar services = {\n  $q: undefined,\n  $injector: undefined\n};\nexport { services };","map":{"version":3,"mappings":"AAUA,IAAMA,MAAM,GAAG,UAACC,MAAD,EAAe;EAAK;IACjC,MAAM,IAAIC,KAAJ,CAAU,2BAAyBD,MAAzB,GAA+B,8DAAzC,CAAN;EACD,CAFkC;AAElC,CAFD;;AAIA,OAAO,IAAME,QAAQ,GAAG,UAAIC,OAAJ,EAAqBC,OAArB,EAAyC;EAC/D,cAAO,CAACC,MAAR,CAAe,UAACC,GAAD,EAAMC,GAAN,EAAS;IAAK,OAAED,GAAG,CAACC,GAAD,CAAH,GAAWR,MAAM,CAAII,OAAO,MAAP,GAAWI,GAAX,GAAc,IAAlB,CAAlB,EAAmDD,GAApD;EAAwD,CAArF,EAAuF,EAAvF;AAA+F,CAD1F;AAGP,IAAME,QAAQ,GAAiB;EAC7BC,EAAE,EAAEC,SADyB;EAE7BC,SAAS,EAAED;AAFkB,CAA/B;AA6EA,SAASF,QAAT","names":["noImpl","fnname","Error","makeStub","service","methods","reduce","acc","key","services","$q","undefined","$injector"],"sources":["C:\\Users\\huang\\node_modules\\@uirouter\\core\\lib-esm\\common\\@uirouter\\core\\common\\coreservices.ts"],"sourcesContent":["/**\n * This module is a stub for core services such as Dependency Injection or Browser Location.\n * Core services may be implemented by a specific framework, such as ng1 or ng2, or be pure javascript.\n *\n * @packageDocumentation\n */\nimport { IInjectable, Obj } from './common';\nimport { Disposable } from '../interface';\nimport { UrlConfig, UrlService } from '../url';\n\nconst noImpl = (fnname: string) => () => {\n  throw new Error(`No implementation for ${fnname}. The framework specific code did not implement this method.`);\n};\n\nexport const makeStub = <T>(service: string, methods: (keyof T)[]): T =>\n  methods.reduce((acc, key) => ((acc[key] = noImpl(`${service}.${key}()`) as any), acc), {} as T);\n\nconst services: CoreServices = {\n  $q: undefined,\n  $injector: undefined,\n};\n\nexport interface $QLikeDeferred {\n  resolve: (val?: any) => void;\n  reject: (reason?: any) => void;\n  promise: Promise<any>;\n}\n\nexport interface $QLike {\n  when<T>(value?: T | PromiseLike<T>): Promise<T>;\n  reject<T>(reason: any): Promise<T>;\n  defer(): $QLikeDeferred;\n  all(promises: { [key: string]: Promise<any> }): Promise<any>;\n  all(promises: Promise<any>[]): Promise<any[]>;\n}\n\nexport interface $InjectorLike {\n  strictDi?: boolean;\n  get(token: any): any;\n  get<T>(token: any): T;\n  has(token: any): boolean;\n  invoke(fn: IInjectable, context?: any, locals?: Obj): any;\n  annotate(fn: IInjectable, strictDi?: boolean): any[];\n}\n\nexport interface CoreServices {\n  $q: $QLike;\n  $injector: $InjectorLike;\n}\n\n/**\n * Handles low level URL read/write\n *\n * This service handles low level reads and updates of the URL and listens for url changes.\n * Implementors should pass these through to the underlying URL mechanism.\n * The underlying URL mechanism might be browser APIs, framework APIs, or some 3rd party URL management library.\n *\n * UI-Router Core includes three basic implementations:\n *\n * - [[PushStateLocationService]]\n * - [[HashLocationService]]\n * - [[MemoryLocationService]]\n */\nexport interface LocationServices extends Disposable {\n  /** See: [[UrlService.url]] */ url: UrlService['url'];\n  /** See: [[UrlService.path]] */ path: UrlService['path'];\n  /** See: [[UrlService.search]] */ search: UrlService['search'];\n  /** See: [[UrlService.hash]] */ hash: UrlService['hash'];\n  /** See: [[UrlService.onChange]] */ onChange: UrlService['onChange'];\n}\n\n/**\n * Returns low level URL configuration and metadata\n *\n * This service returns information about the location configuration.\n * This service is primarily used when building URLs (e.g., for `hrefs`)\n *\n * Implementors should pass these through to the underlying URL APIs.\n * The underlying URL mechanism might be browser APIs, framework APIs, or some 3rd party URL management library.\n *\n * UI-Router Core includes two basic implementations:\n *\n * - [[BrowserLocationConfig]]\n * - [[MemoryLocationConfig]]\n */\nexport interface LocationConfig extends Disposable {\n  /** See: [[UrlConfig.port]] */ port: UrlConfig['port'];\n  /** See: [[UrlConfig.protocol]] */ protocol: UrlConfig['protocol'];\n  /** See: [[UrlConfig.host]] */ host: UrlConfig['host'];\n  /** See: [[UrlConfig.baseHref]] */ baseHref: UrlConfig['baseHref'];\n  /** See: [[UrlConfig.html5Mode]] */ html5Mode: UrlConfig['html5Mode'];\n  /** See: [[UrlConfig.hashPrefix]] */ hashPrefix: UrlConfig['hashPrefix'];\n}\n\nexport { services };\n"]},"metadata":{},"sourceType":"module"}