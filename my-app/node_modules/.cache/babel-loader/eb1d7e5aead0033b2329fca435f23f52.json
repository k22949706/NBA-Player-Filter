{"ast":null,"code":"/** @publicapi @module ng1 */\n\n/** */\nimport { pick, forEach, tail, extend, isArray, isInjectable, isDefined, isString, services, trace, ViewService, ResolveContext, Resolvable } from '@uirouter/core';\n/** @internalapi */\n\nexport function getNg1ViewConfigFactory() {\n  var templateFactory = null;\n  return function (path, view) {\n    templateFactory = templateFactory || services.$injector.get('$templateFactory');\n    return [new Ng1ViewConfig(path, view, templateFactory)];\n  };\n}\n/** @internalapi */\n\nvar hasAnyKey = function (keys, obj) {\n  return keys.reduce(function (acc, key) {\n    return acc || isDefined(obj[key]);\n  }, false);\n};\n/**\n * This is a [[StateBuilder.builder]] function for angular1 `views`.\n *\n * When the [[StateBuilder]] builds a [[StateObject]] object from a raw [[StateDeclaration]], this builder\n * handles the `views` property with logic specific to @uirouter/angularjs (ng1).\n *\n * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object\n * and applies the state-level configuration to a view named `$default`.\n *\n * @internalapi\n */\n\n\nexport function ng1ViewsBuilder(state) {\n  // Do not process root state\n  if (!state.parent) return {};\n  var tplKeys = ['templateProvider', 'templateUrl', 'template', 'notify', 'async'],\n      ctrlKeys = ['controller', 'controllerProvider', 'controllerAs', 'resolveAs'],\n      compKeys = ['component', 'bindings', 'componentProvider'],\n      nonCompKeys = tplKeys.concat(ctrlKeys),\n      allViewKeys = compKeys.concat(nonCompKeys); // Do not allow a state to have both state-level props and also a `views: {}` property.\n  // A state without a `views: {}` property can declare properties for the `$default` view as properties of the state.\n  // However, the `$default` approach should not be mixed with a separate `views: ` block.\n\n  if (isDefined(state.views) && hasAnyKey(allViewKeys, state)) {\n    throw new Error(\"State '\" + state.name + \"' has a 'views' object. \" + \"It cannot also have \\\"view properties\\\" at the state level.  \" + \"Move the following properties into a view (in the 'views' object): \" + (\" \" + allViewKeys.filter(function (key) {\n      return isDefined(state[key]);\n    }).join(', ')));\n  }\n\n  var views = {},\n      viewsObject = state.views || {\n    $default: pick(state, allViewKeys)\n  };\n  forEach(viewsObject, function (config, name) {\n    // Account for views: { \"\": { template... } }\n    name = name || '$default'; // Account for views: { header: \"headerComponent\" }\n\n    if (isString(config)) config = {\n      component: config\n    }; // Make a shallow copy of the config object\n\n    config = extend({}, config); // Do not allow a view to mix props for component-style view with props for template/controller-style view\n\n    if (hasAnyKey(compKeys, config) && hasAnyKey(nonCompKeys, config)) {\n      throw new Error(\"Cannot combine: \" + compKeys.join('|') + \" with: \" + nonCompKeys.join('|') + \" in stateview: '\" + name + \"@\" + state.name + \"'\");\n    }\n\n    config.resolveAs = config.resolveAs || '$resolve';\n    config.$type = 'ng1';\n    config.$context = state;\n    config.$name = name;\n    var normalized = ViewService.normalizeUIViewTarget(config.$context, config.$name);\n    config.$uiViewName = normalized.uiViewName;\n    config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n    views[name] = config;\n  });\n  return views;\n}\n/** @hidden */\n\nvar id = 0;\n/** @internalapi */\n\nvar Ng1ViewConfig =\n/** @class */\nfunction () {\n  function Ng1ViewConfig(path, viewDecl, factory) {\n    var _this = this;\n\n    this.path = path;\n    this.viewDecl = viewDecl;\n    this.factory = factory;\n    this.$id = id++;\n    this.loaded = false;\n\n    this.getTemplate = function (uiView, context) {\n      return _this.component ? _this.factory.makeComponentTemplate(uiView, context, _this.component, _this.viewDecl.bindings) : _this.template;\n    };\n  }\n\n  Ng1ViewConfig.prototype.load = function () {\n    var _this = this;\n\n    var $q = services.$q;\n    var context = new ResolveContext(this.path);\n    var params = this.path.reduce(function (acc, node) {\n      return extend(acc, node.paramValues);\n    }, {});\n    var promises = {\n      template: $q.when(this.factory.fromConfig(this.viewDecl, params, context)),\n      controller: $q.when(this.getController(context))\n    };\n    return $q.all(promises).then(function (results) {\n      trace.traceViewServiceEvent('Loaded', _this);\n      _this.controller = results.controller;\n      extend(_this, results.template); // Either { template: \"tpl\" } or { component: \"cmpName\" }\n\n      return _this;\n    });\n  };\n  /**\n   * Gets the controller for a view configuration.\n   *\n   * @returns {Function|Promise.<Function>} Returns a controller, or a promise that resolves to a controller.\n   */\n\n\n  Ng1ViewConfig.prototype.getController = function (context) {\n    var provider = this.viewDecl.controllerProvider;\n    if (!isInjectable(provider)) return this.viewDecl.controller;\n    var deps = services.$injector.annotate(provider);\n    var providerFn = isArray(provider) ? tail(provider) : provider;\n    var resolvable = new Resolvable('', providerFn, deps);\n    return resolvable.get(context);\n  };\n\n  return Ng1ViewConfig;\n}();\n\nexport { Ng1ViewConfig };","map":{"version":3,"mappings":"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","names":["pick","forEach","tail","extend","isArray","isInjectable","isDefined","isString","services","trace","ViewService","ResolveContext","Resolvable","getNg1ViewConfigFactory","templateFactory","path","view","$injector","get","Ng1ViewConfig","hasAnyKey","keys","obj","reduce","acc","key","ng1ViewsBuilder","state","parent","tplKeys","ctrlKeys","compKeys","nonCompKeys","concat","allViewKeys","views","Error","name","filter","join","viewsObject","$default","config","component","resolveAs","$type","$context","$name","normalized","normalizeUIViewTarget","$uiViewName","uiViewName","$uiViewContextAnchor","uiViewContextAnchor","id","viewDecl","factory","uiView","context","_this","makeComponentTemplate","bindings","template","$q","params","node","paramValues","promises","when","fromConfig","controller","getController","all","then","results","traceViewServiceEvent","provider","controllerProvider","deps","annotate","providerFn","resolvable"],"sources":["C:\\Users\\huang\\node_modules\\@uirouter\\angularjs\\lib-esm\\statebuilders\\@uirouter\\angularjs\\statebuilders\\views.ts"],"sourcesContent":["/** @publicapi @module ng1 */ /** */\nimport {\n  StateObject,\n  pick,\n  forEach,\n  tail,\n  extend,\n  isArray,\n  isInjectable,\n  isDefined,\n  isString,\n  services,\n  trace,\n  ViewConfig,\n  ViewService,\n  ViewConfigFactory,\n  PathNode,\n  ResolveContext,\n  Resolvable,\n  IInjectable,\n} from '@uirouter/core';\nimport { Ng1ViewDeclaration } from '../interface';\nimport { TemplateFactory } from '../templateFactory';\n\n/** @internalapi */\nexport function getNg1ViewConfigFactory(): ViewConfigFactory {\n  let templateFactory: TemplateFactory = null;\n  return (path, view) => {\n    templateFactory = templateFactory || services.$injector.get('$templateFactory');\n    return [new Ng1ViewConfig(path, view, templateFactory)];\n  };\n}\n\n/** @internalapi */\nconst hasAnyKey = (keys, obj) => keys.reduce((acc, key) => acc || isDefined(obj[key]), false);\n\n/**\n * This is a [[StateBuilder.builder]] function for angular1 `views`.\n *\n * When the [[StateBuilder]] builds a [[StateObject]] object from a raw [[StateDeclaration]], this builder\n * handles the `views` property with logic specific to @uirouter/angularjs (ng1).\n *\n * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object\n * and applies the state-level configuration to a view named `$default`.\n *\n * @internalapi\n */\nexport function ng1ViewsBuilder(state: StateObject) {\n  // Do not process root state\n  if (!state.parent) return {};\n\n  const tplKeys = ['templateProvider', 'templateUrl', 'template', 'notify', 'async'],\n    ctrlKeys = ['controller', 'controllerProvider', 'controllerAs', 'resolveAs'],\n    compKeys = ['component', 'bindings', 'componentProvider'],\n    nonCompKeys = tplKeys.concat(ctrlKeys),\n    allViewKeys = compKeys.concat(nonCompKeys);\n\n  // Do not allow a state to have both state-level props and also a `views: {}` property.\n  // A state without a `views: {}` property can declare properties for the `$default` view as properties of the state.\n  // However, the `$default` approach should not be mixed with a separate `views: ` block.\n  if (isDefined(state.views) && hasAnyKey(allViewKeys, state)) {\n    throw new Error(\n      `State '${state.name}' has a 'views' object. ` +\n        `It cannot also have \"view properties\" at the state level.  ` +\n        `Move the following properties into a view (in the 'views' object): ` +\n        ` ${allViewKeys.filter((key) => isDefined(state[key])).join(', ')}`\n    );\n  }\n\n  const views: { [key: string]: Ng1ViewDeclaration } = {},\n    viewsObject = state.views || { $default: pick(state, allViewKeys) };\n\n  forEach(viewsObject, function (config: Ng1ViewDeclaration, name: string) {\n    // Account for views: { \"\": { template... } }\n    name = name || '$default';\n    // Account for views: { header: \"headerComponent\" }\n    if (isString(config)) config = { component: <string>config };\n\n    // Make a shallow copy of the config object\n    config = extend({}, config);\n\n    // Do not allow a view to mix props for component-style view with props for template/controller-style view\n    if (hasAnyKey(compKeys, config) && hasAnyKey(nonCompKeys, config)) {\n      throw new Error(\n        `Cannot combine: ${compKeys.join('|')} with: ${nonCompKeys.join('|')} in stateview: '${name}@${state.name}'`\n      );\n    }\n\n    config.resolveAs = config.resolveAs || '$resolve';\n    config.$type = 'ng1';\n    config.$context = state;\n    config.$name = name;\n\n    const normalized = ViewService.normalizeUIViewTarget(config.$context, config.$name);\n    config.$uiViewName = normalized.uiViewName;\n    config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n\n    views[name] = config;\n  });\n  return views;\n}\n\n/** @hidden */\nlet id = 0;\n\n/** @internalapi */\nexport class Ng1ViewConfig implements ViewConfig {\n  $id = id++;\n  loaded = false;\n  controller: Function; // actually IInjectable|string\n  template: string;\n  component: string;\n  locals: any; // TODO: delete me\n\n  constructor(public path: PathNode[], public viewDecl: Ng1ViewDeclaration, public factory: TemplateFactory) {}\n\n  load() {\n    const $q = services.$q;\n    const context = new ResolveContext(this.path);\n    const params = this.path.reduce((acc, node) => extend(acc, node.paramValues), {});\n\n    const promises: any = {\n      template: $q.when(this.factory.fromConfig(this.viewDecl, params, context)),\n      controller: $q.when(this.getController(context)),\n    };\n\n    return $q.all(promises).then((results) => {\n      trace.traceViewServiceEvent('Loaded', this);\n      this.controller = results.controller;\n      extend(this, results.template); // Either { template: \"tpl\" } or { component: \"cmpName\" }\n      return this;\n    });\n  }\n\n  getTemplate = (uiView, context: ResolveContext) =>\n    this.component\n      ? this.factory.makeComponentTemplate(uiView, context, this.component, this.viewDecl.bindings)\n      : this.template;\n\n  /**\n   * Gets the controller for a view configuration.\n   *\n   * @returns {Function|Promise.<Function>} Returns a controller, or a promise that resolves to a controller.\n   */\n  getController(context: ResolveContext): IInjectable | string | Promise<IInjectable | string> {\n    const provider = this.viewDecl.controllerProvider;\n    if (!isInjectable(provider)) return this.viewDecl.controller;\n    const deps = services.$injector.annotate(provider);\n    const providerFn = isArray(provider) ? tail(<any>provider) : provider;\n    const resolvable = new Resolvable('', <any>providerFn, deps);\n    return resolvable.get(context);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}