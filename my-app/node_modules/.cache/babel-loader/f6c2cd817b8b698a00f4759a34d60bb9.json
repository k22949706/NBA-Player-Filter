{"ast":null,"code":"import { equals, applyPairs, removeFrom, inArray, find } from '../common/common';\nimport { curry, prop } from '../common/hof';\nimport { isString, isArray } from '../common/predicates';\nimport { trace } from '../common/trace';\n/**\n * The View service\n *\n * This service pairs existing `ui-view` components (which live in the DOM)\n * with view configs (from the state declaration objects: [[StateDeclaration.views]]).\n *\n * - After a successful Transition, the views from the newly entered states are activated via [[activateViewConfig]].\n *   The views from exited states are deactivated via [[deactivateViewConfig]].\n *   (See: the [[registerActivateViews]] Transition Hook)\n *\n * - As `ui-view` components pop in and out of existence, they register themselves using [[registerUIView]].\n *\n * - When the [[sync]] function is called, the registered `ui-view`(s) ([[ActiveUIView]])\n * are configured with the matching [[ViewConfig]](s)\n *\n */\n\nvar ViewService =\n/** @class */\nfunction () {\n  /** @internal */\n  function ViewService(\n  /** @internal */\n  router) {\n    var _this = this;\n\n    this.router = router;\n    /** @internal */\n\n    this._uiViews = [];\n    /** @internal */\n\n    this._viewConfigs = [];\n    /** @internal */\n\n    this._viewConfigFactories = {};\n    /** @internal */\n\n    this._listeners = [];\n    /** @internal */\n\n    this._pluginapi = {\n      _rootViewContext: this._rootViewContext.bind(this),\n      _viewConfigFactory: this._viewConfigFactory.bind(this),\n      _registeredUIView: function (id) {\n        return find(_this._uiViews, function (view) {\n          return _this.router.$id + \".\" + view.id === id;\n        });\n      },\n      _registeredUIViews: function () {\n        return _this._uiViews;\n      },\n      _activeViewConfigs: function () {\n        return _this._viewConfigs;\n      },\n      _onSync: function (listener) {\n        _this._listeners.push(listener);\n\n        return function () {\n          return removeFrom(_this._listeners, listener);\n        };\n      }\n    };\n  }\n  /**\n   * Normalizes a view's name from a state.views configuration block.\n   *\n   * This should be used by a framework implementation to calculate the values for\n   * [[_ViewDeclaration.$uiViewName]] and [[_ViewDeclaration.$uiViewContextAnchor]].\n   *\n   * @param context the context object (state declaration) that the view belongs to\n   * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]\n   *\n   * @returns the normalized uiViewName and uiViewContextAnchor that the view targets\n   */\n\n\n  ViewService.normalizeUIViewTarget = function (context, rawViewName) {\n    if (rawViewName === void 0) {\n      rawViewName = '';\n    } // TODO: Validate incoming view name with a regexp to allow:\n    // ex: \"view.name@foo.bar\" , \"^.^.view.name\" , \"view.name@^.^\" , \"\" ,\n    // \"@\" , \"$default@^\" , \"!$default.$default\" , \"!foo.bar\"\n\n\n    var viewAtContext = rawViewName.split('@');\n    var uiViewName = viewAtContext[0] || '$default'; // default to unnamed view\n\n    var uiViewContextAnchor = isString(viewAtContext[1]) ? viewAtContext[1] : '^'; // default to parent context\n    // Handle relative view-name sugar syntax.\n    // Matches rawViewName \"^.^.^.foo.bar\" into array: [\"^.^.^.foo.bar\", \"^.^.^\", \"foo.bar\"],\n\n    var relativeViewNameSugar = /^(\\^(?:\\.\\^)*)\\.(.*$)/.exec(uiViewName);\n\n    if (relativeViewNameSugar) {\n      // Clobbers existing contextAnchor (rawViewName validation will fix this)\n      uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to \"^.^.^\"\n\n      uiViewName = relativeViewNameSugar[2]; // set view-name to \"foo.bar\"\n    }\n\n    if (uiViewName.charAt(0) === '!') {\n      uiViewName = uiViewName.substr(1);\n      uiViewContextAnchor = ''; // target absolutely from root\n    } // handle parent relative targeting \"^.^.^\"\n\n\n    var relativeMatch = /^(\\^(?:\\.\\^)*)$/;\n\n    if (relativeMatch.exec(uiViewContextAnchor)) {\n      var anchorState = uiViewContextAnchor.split('.').reduce(function (anchor, x) {\n        return anchor.parent;\n      }, context);\n      uiViewContextAnchor = anchorState.name;\n    } else if (uiViewContextAnchor === '.') {\n      uiViewContextAnchor = context.name;\n    }\n\n    return {\n      uiViewName: uiViewName,\n      uiViewContextAnchor: uiViewContextAnchor\n    };\n  };\n  /** @internal */\n\n\n  ViewService.prototype._rootViewContext = function (context) {\n    return this._rootContext = context || this._rootContext;\n  };\n  /** @internal */\n\n\n  ViewService.prototype._viewConfigFactory = function (viewType, factory) {\n    this._viewConfigFactories[viewType] = factory;\n  };\n\n  ViewService.prototype.createViewConfig = function (path, decl) {\n    var cfgFactory = this._viewConfigFactories[decl.$type];\n    if (!cfgFactory) throw new Error('ViewService: No view config factory registered for type ' + decl.$type);\n    var cfgs = cfgFactory(path, decl);\n    return isArray(cfgs) ? cfgs : [cfgs];\n  };\n  /**\n   * Deactivates a ViewConfig.\n   *\n   * This function deactivates a `ViewConfig`.\n   * After calling [[sync]], it will un-pair from any `ui-view` with which it is currently paired.\n   *\n   * @param viewConfig The ViewConfig view to deregister.\n   */\n\n\n  ViewService.prototype.deactivateViewConfig = function (viewConfig) {\n    trace.traceViewServiceEvent('<- Removing', viewConfig);\n    removeFrom(this._viewConfigs, viewConfig);\n  };\n\n  ViewService.prototype.activateViewConfig = function (viewConfig) {\n    trace.traceViewServiceEvent('-> Registering', viewConfig);\n\n    this._viewConfigs.push(viewConfig);\n  };\n\n  ViewService.prototype.sync = function () {\n    var _this = this;\n\n    var uiViewsByFqn = this._uiViews.map(function (uiv) {\n      return [uiv.fqn, uiv];\n    }).reduce(applyPairs, {}); // Return a weighted depth value for a uiView.\n    // The depth is the nesting depth of ui-views (based on FQN; times 10,000)\n    // plus the depth of the state that is populating the uiView\n\n\n    function uiViewDepth(uiView) {\n      var stateDepth = function (context) {\n        return context && context.parent ? stateDepth(context.parent) + 1 : 1;\n      };\n\n      return uiView.fqn.split('.').length * 10000 + stateDepth(uiView.creationContext);\n    } // Return the ViewConfig's context's depth in the context tree.\n\n\n    function viewConfigDepth(config) {\n      var context = config.viewDecl.$context,\n          count = 0;\n\n      while (++count && context.parent) context = context.parent;\n\n      return count;\n    } // Given a depth function, returns a compare function which can return either ascending or descending order\n\n\n    var depthCompare = curry(function (depthFn, posNeg, left, right) {\n      return posNeg * (depthFn(left) - depthFn(right));\n    });\n\n    var matchingConfigPair = function (uiView) {\n      var matchingConfigs = _this._viewConfigs.filter(ViewService.matches(uiViewsByFqn, uiView));\n\n      if (matchingConfigs.length > 1) {\n        // This is OK.  Child states can target a ui-view that the parent state also targets (the child wins)\n        // Sort by depth and return the match from the deepest child\n        // console.log(`Multiple matching view configs for ${uiView.fqn}`, matchingConfigs);\n        matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending\n      }\n\n      return {\n        uiView: uiView,\n        viewConfig: matchingConfigs[0]\n      };\n    };\n\n    var configureUIView = function (tuple) {\n      // If a parent ui-view is reconfigured, it could destroy child ui-views.\n      // Before configuring a child ui-view, make sure it's still in the active uiViews array.\n      if (_this._uiViews.indexOf(tuple.uiView) !== -1) tuple.uiView.configUpdated(tuple.viewConfig);\n    }; // Sort views by FQN and state depth. Process uiviews nearest the root first.\n\n\n    var uiViewTuples = this._uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair);\n\n    var matchedViewConfigs = uiViewTuples.map(function (tuple) {\n      return tuple.viewConfig;\n    });\n\n    var unmatchedConfigTuples = this._viewConfigs.filter(function (config) {\n      return !inArray(matchedViewConfigs, config);\n    }).map(function (viewConfig) {\n      return {\n        uiView: undefined,\n        viewConfig: viewConfig\n      };\n    });\n\n    uiViewTuples.forEach(configureUIView);\n    var allTuples = uiViewTuples.concat(unmatchedConfigTuples);\n\n    this._listeners.forEach(function (cb) {\n      return cb(allTuples);\n    });\n\n    trace.traceViewSync(allTuples);\n  };\n  /**\n   * Registers a `ui-view` component\n   *\n   * When a `ui-view` component is created, it uses this method to register itself.\n   * After registration the [[sync]] method is used to ensure all `ui-view` are configured with the proper [[ViewConfig]].\n   *\n   * Note: the `ui-view` component uses the `ViewConfig` to determine what view should be loaded inside the `ui-view`,\n   * and what the view's state context is.\n   *\n   * Note: There is no corresponding `deregisterUIView`.\n   *       A `ui-view` should hang on to the return value of `registerUIView` and invoke it to deregister itself.\n   *\n   * @param uiView The metadata for a UIView\n   * @return a de-registration function used when the view is destroyed.\n   */\n\n\n  ViewService.prototype.registerUIView = function (uiView) {\n    trace.traceViewServiceUIViewEvent('-> Registering', uiView);\n    var uiViews = this._uiViews;\n\n    var fqnAndTypeMatches = function (uiv) {\n      return uiv.fqn === uiView.fqn && uiv.$type === uiView.$type;\n    };\n\n    if (uiViews.filter(fqnAndTypeMatches).length) trace.traceViewServiceUIViewEvent('!!!! duplicate uiView named:', uiView);\n    uiViews.push(uiView);\n    this.sync();\n    return function () {\n      var idx = uiViews.indexOf(uiView);\n\n      if (idx === -1) {\n        trace.traceViewServiceUIViewEvent('Tried removing non-registered uiView', uiView);\n        return;\n      }\n\n      trace.traceViewServiceUIViewEvent('<- Deregistering', uiView);\n      removeFrom(uiViews)(uiView);\n    };\n  };\n  /**\n   * Returns the list of views currently available on the page, by fully-qualified name.\n   *\n   * @return {Array} Returns an array of fully-qualified view names.\n   */\n\n\n  ViewService.prototype.available = function () {\n    return this._uiViews.map(prop('fqn'));\n  };\n  /**\n   * Returns the list of views on the page containing loaded content.\n   *\n   * @return {Array} Returns an array of fully-qualified view names.\n   */\n\n\n  ViewService.prototype.active = function () {\n    return this._uiViews.filter(prop('$config')).map(prop('name'));\n  };\n  /**\n   * Given a ui-view and a ViewConfig, determines if they \"match\".\n   *\n   * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\n   * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.\n   *\n   * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or\n   * can be a segmented ui-view path, describing a portion of a ui-view fqn.\n   *\n   * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type\n   *\n   * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:\n   * - the ui-view's name matches the ViewConfig's target name\n   * - the ui-view's context matches the ViewConfig's anchor\n   *\n   * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:\n   * - There exists a parent ui-view where:\n   *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name\n   *    - the parent ui-view's context matches the ViewConfig's anchor\n   * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn\n   *\n   * Example:\n   *\n   * DOM:\n   * <ui-view>                        <!-- created in the root context (name: \"\") -->\n   *   <ui-view name=\"foo\">                <!-- created in the context named: \"A\"      -->\n   *     <ui-view>                    <!-- created in the context named: \"A.B\"    -->\n   *       <ui-view name=\"bar\">            <!-- created in the context named: \"A.B.C\"  -->\n   *       </ui-view>\n   *     </ui-view>\n   *   </ui-view>\n   * </ui-view>\n   *\n   * uiViews: [\n   *  { fqn: \"$default\",                  creationContext: { name: \"\" } },\n   *  { fqn: \"$default.foo\",              creationContext: { name: \"A\" } },\n   *  { fqn: \"$default.foo.$default\",     creationContext: { name: \"A.B\" } }\n   *  { fqn: \"$default.foo.$default.bar\", creationContext: { name: \"A.B.C\" } }\n   * ]\n   *\n   * These four view configs all match the ui-view with the fqn: \"$default.foo.$default.bar\":\n   *\n   * - ViewConfig1: { uiViewName: \"bar\",                       uiViewContextAnchor: \"A.B.C\" }\n   * - ViewConfig2: { uiViewName: \"$default.bar\",              uiViewContextAnchor: \"A.B\" }\n   * - ViewConfig3: { uiViewName: \"foo.$default.bar\",          uiViewContextAnchor: \"A\" }\n   * - ViewConfig4: { uiViewName: \"$default.foo.$default.bar\", uiViewContextAnchor: \"\" }\n   *\n   * Using ViewConfig3 as an example, it matches the ui-view with fqn \"$default.foo.$default.bar\" because:\n   * - The ViewConfig's segmented target name is: [ \"foo\", \"$default\", \"bar\" ]\n   * - There exists a parent ui-view (which has fqn: \"$default.foo\") where:\n   *    - the parent ui-view's name \"foo\" matches the first segment \"foo\" of the ViewConfig's target name\n   *    - the parent ui-view's context \"A\" matches the ViewConfig's anchor context \"A\"\n   * - And the remaining segments [ \"$default\", \"bar\" ].join(\".\"_ of the ViewConfig's target name match\n   *   the tail of the ui-view's fqn \"default.bar\"\n   *\n   * @internal\n   */\n\n\n  ViewService.matches = function (uiViewsByFqn, uiView) {\n    return function (viewConfig) {\n      // Don't supply an ng1 ui-view with an ng2 ViewConfig, etc\n      if (uiView.$type !== viewConfig.viewDecl.$type) return false; // Split names apart from both viewConfig and uiView into segments\n\n      var vc = viewConfig.viewDecl;\n      var vcSegments = vc.$uiViewName.split('.');\n      var uivSegments = uiView.fqn.split('.'); // Check if the tails of the segment arrays match. ex, these arrays' tails match:\n      // vc: [\"foo\", \"bar\"], uiv fqn: [\"$default\", \"foo\", \"bar\"]\n\n      if (!equals(vcSegments, uivSegments.slice(0 - vcSegments.length))) return false; // Now check if the fqn ending at the first segment of the viewConfig matches the context:\n      // [\"$default\", \"foo\"].join(\".\") == \"$default.foo\", does the ui-view $default.foo context match?\n\n      var negOffset = 1 - vcSegments.length || undefined;\n      var fqnToFirstSegment = uivSegments.slice(0, negOffset).join('.');\n      var uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;\n      return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);\n    };\n  };\n\n  return ViewService;\n}();\n\nexport { ViewService };","map":{"version":3,"mappings":"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","names":["equals","applyPairs","removeFrom","inArray","find","curry","prop","isString","isArray","trace","router","_rootViewContext","bind","_viewConfigFactory","_registeredUIView","id","_this","_uiViews","view","$id","_registeredUIViews","_activeViewConfigs","_viewConfigs","_onSync","listener","_listeners","push","ViewService","context","rawViewName","viewAtContext","split","uiViewName","uiViewContextAnchor","relativeViewNameSugar","exec","charAt","substr","relativeMatch","anchorState","reduce","anchor","x","parent","name","_rootContext","viewType","factory","_viewConfigFactories","path","decl","cfgFactory","$type","Error","cfgs","viewConfig","traceViewServiceEvent","uiViewsByFqn","map","uiv","fqn","uiViewDepth","uiView","stateDepth","length","creationContext","viewConfigDepth","config","viewDecl","$context","count","depthCompare","depthFn","posNeg","left","right","matchingConfigPair","matchingConfigs","filter","matches","sort","configureUIView","tuple","indexOf","configUpdated","uiViewTuples","matchedViewConfigs","unmatchedConfigTuples","undefined","forEach","allTuples","concat","cb","traceViewSync","traceViewServiceUIViewEvent","uiViews","fqnAndTypeMatches","sync","idx","vc","vcSegments","$uiViewName","uivSegments","slice","negOffset","fqnToFirstSegment","join","uiViewContext","$uiViewContextAnchor"],"sources":["C:\\Users\\huang\\node_modules\\@uirouter\\core\\lib-esm\\view\\@uirouter\\core\\view\\view.ts"],"sourcesContent":["import { equals, applyPairs, removeFrom, TypedMap, inArray, find } from '../common/common';\nimport { curry, prop } from '../common/hof';\nimport { isString, isArray } from '../common/predicates';\nimport { trace } from '../common/trace';\nimport { PathNode } from '../path/pathNode';\nimport { ActiveUIView, ViewContext, ViewConfig } from './interface';\nimport { _ViewDeclaration } from '../state/interface';\nimport { UIRouter } from '../router';\n\nexport type ViewConfigFactory = (path: PathNode[], decl: _ViewDeclaration) => ViewConfig | ViewConfig[];\n\nexport interface ViewServicePluginAPI {\n  _rootViewContext(context?: ViewContext): ViewContext;\n  _viewConfigFactory(viewType: string, factory: ViewConfigFactory);\n  /** @param id router.$id + \".\" + uiView.id */\n  _registeredUIView(id: string): ActiveUIView;\n  _registeredUIViews(): ActiveUIView[];\n  _activeViewConfigs(): ViewConfig[];\n  _onSync(listener: ViewSyncListener): Function;\n}\n\n// A uiView and its matching viewConfig\nexport interface ViewTuple {\n  uiView: ActiveUIView;\n  viewConfig: ViewConfig;\n}\n\nexport interface ViewSyncListener {\n  (viewTuples: ViewTuple[]): void;\n}\n\n/**\n * The View service\n *\n * This service pairs existing `ui-view` components (which live in the DOM)\n * with view configs (from the state declaration objects: [[StateDeclaration.views]]).\n *\n * - After a successful Transition, the views from the newly entered states are activated via [[activateViewConfig]].\n *   The views from exited states are deactivated via [[deactivateViewConfig]].\n *   (See: the [[registerActivateViews]] Transition Hook)\n *\n * - As `ui-view` components pop in and out of existence, they register themselves using [[registerUIView]].\n *\n * - When the [[sync]] function is called, the registered `ui-view`(s) ([[ActiveUIView]])\n * are configured with the matching [[ViewConfig]](s)\n *\n */\nexport class ViewService {\n  /** @internal */ private _uiViews: ActiveUIView[] = [];\n  /** @internal */ private _viewConfigs: ViewConfig[] = [];\n  /** @internal */ private _rootContext: ViewContext;\n  /** @internal */ private _viewConfigFactories: { [key: string]: ViewConfigFactory } = {};\n  /** @internal */ private _listeners: ViewSyncListener[] = [];\n\n  /** @internal */\n  public _pluginapi: ViewServicePluginAPI = {\n    _rootViewContext: this._rootViewContext.bind(this),\n    _viewConfigFactory: this._viewConfigFactory.bind(this),\n    _registeredUIView: (id: string) => find(this._uiViews, (view) => `${this.router.$id}.${view.id}` === id),\n    _registeredUIViews: () => this._uiViews,\n    _activeViewConfigs: () => this._viewConfigs,\n    _onSync: (listener: ViewSyncListener) => {\n      this._listeners.push(listener);\n      return () => removeFrom(this._listeners, listener);\n    },\n  };\n\n  /**\n   * Given a ui-view and a ViewConfig, determines if they \"match\".\n   *\n   * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\n   * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.\n   *\n   * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or\n   * can be a segmented ui-view path, describing a portion of a ui-view fqn.\n   *\n   * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type\n   *\n   * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:\n   * - the ui-view's name matches the ViewConfig's target name\n   * - the ui-view's context matches the ViewConfig's anchor\n   *\n   * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:\n   * - There exists a parent ui-view where:\n   *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name\n   *    - the parent ui-view's context matches the ViewConfig's anchor\n   * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn\n   *\n   * Example:\n   *\n   * DOM:\n   * <ui-view>                        <!-- created in the root context (name: \"\") -->\n   *   <ui-view name=\"foo\">                <!-- created in the context named: \"A\"      -->\n   *     <ui-view>                    <!-- created in the context named: \"A.B\"    -->\n   *       <ui-view name=\"bar\">            <!-- created in the context named: \"A.B.C\"  -->\n   *       </ui-view>\n   *     </ui-view>\n   *   </ui-view>\n   * </ui-view>\n   *\n   * uiViews: [\n   *  { fqn: \"$default\",                  creationContext: { name: \"\" } },\n   *  { fqn: \"$default.foo\",              creationContext: { name: \"A\" } },\n   *  { fqn: \"$default.foo.$default\",     creationContext: { name: \"A.B\" } }\n   *  { fqn: \"$default.foo.$default.bar\", creationContext: { name: \"A.B.C\" } }\n   * ]\n   *\n   * These four view configs all match the ui-view with the fqn: \"$default.foo.$default.bar\":\n   *\n   * - ViewConfig1: { uiViewName: \"bar\",                       uiViewContextAnchor: \"A.B.C\" }\n   * - ViewConfig2: { uiViewName: \"$default.bar\",              uiViewContextAnchor: \"A.B\" }\n   * - ViewConfig3: { uiViewName: \"foo.$default.bar\",          uiViewContextAnchor: \"A\" }\n   * - ViewConfig4: { uiViewName: \"$default.foo.$default.bar\", uiViewContextAnchor: \"\" }\n   *\n   * Using ViewConfig3 as an example, it matches the ui-view with fqn \"$default.foo.$default.bar\" because:\n   * - The ViewConfig's segmented target name is: [ \"foo\", \"$default\", \"bar\" ]\n   * - There exists a parent ui-view (which has fqn: \"$default.foo\") where:\n   *    - the parent ui-view's name \"foo\" matches the first segment \"foo\" of the ViewConfig's target name\n   *    - the parent ui-view's context \"A\" matches the ViewConfig's anchor context \"A\"\n   * - And the remaining segments [ \"$default\", \"bar\" ].join(\".\"_ of the ViewConfig's target name match\n   *   the tail of the ui-view's fqn \"default.bar\"\n   *\n   * @internal\n   */\n  static matches = (uiViewsByFqn: TypedMap<ActiveUIView>, uiView: ActiveUIView) => (viewConfig: ViewConfig) => {\n    // Don't supply an ng1 ui-view with an ng2 ViewConfig, etc\n    if (uiView.$type !== viewConfig.viewDecl.$type) return false;\n\n    // Split names apart from both viewConfig and uiView into segments\n    const vc = viewConfig.viewDecl;\n    const vcSegments = vc.$uiViewName.split('.');\n    const uivSegments = uiView.fqn.split('.');\n\n    // Check if the tails of the segment arrays match. ex, these arrays' tails match:\n    // vc: [\"foo\", \"bar\"], uiv fqn: [\"$default\", \"foo\", \"bar\"]\n    if (!equals(vcSegments, uivSegments.slice(0 - vcSegments.length))) return false;\n\n    // Now check if the fqn ending at the first segment of the viewConfig matches the context:\n    // [\"$default\", \"foo\"].join(\".\") == \"$default.foo\", does the ui-view $default.foo context match?\n    const negOffset = 1 - vcSegments.length || undefined;\n    const fqnToFirstSegment = uivSegments.slice(0, negOffset).join('.');\n    const uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;\n    return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);\n  };\n\n  /**\n   * Normalizes a view's name from a state.views configuration block.\n   *\n   * This should be used by a framework implementation to calculate the values for\n   * [[_ViewDeclaration.$uiViewName]] and [[_ViewDeclaration.$uiViewContextAnchor]].\n   *\n   * @param context the context object (state declaration) that the view belongs to\n   * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]\n   *\n   * @returns the normalized uiViewName and uiViewContextAnchor that the view targets\n   */\n  static normalizeUIViewTarget(context: ViewContext, rawViewName = '') {\n    // TODO: Validate incoming view name with a regexp to allow:\n    // ex: \"view.name@foo.bar\" , \"^.^.view.name\" , \"view.name@^.^\" , \"\" ,\n    // \"@\" , \"$default@^\" , \"!$default.$default\" , \"!foo.bar\"\n    const viewAtContext: string[] = rawViewName.split('@');\n    let uiViewName = viewAtContext[0] || '$default'; // default to unnamed view\n    let uiViewContextAnchor = isString(viewAtContext[1]) ? viewAtContext[1] : '^'; // default to parent context\n\n    // Handle relative view-name sugar syntax.\n    // Matches rawViewName \"^.^.^.foo.bar\" into array: [\"^.^.^.foo.bar\", \"^.^.^\", \"foo.bar\"],\n    const relativeViewNameSugar = /^(\\^(?:\\.\\^)*)\\.(.*$)/.exec(uiViewName);\n    if (relativeViewNameSugar) {\n      // Clobbers existing contextAnchor (rawViewName validation will fix this)\n      uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to \"^.^.^\"\n      uiViewName = relativeViewNameSugar[2]; // set view-name to \"foo.bar\"\n    }\n\n    if (uiViewName.charAt(0) === '!') {\n      uiViewName = uiViewName.substr(1);\n      uiViewContextAnchor = ''; // target absolutely from root\n    }\n\n    // handle parent relative targeting \"^.^.^\"\n    const relativeMatch = /^(\\^(?:\\.\\^)*)$/;\n    if (relativeMatch.exec(uiViewContextAnchor)) {\n      const anchorState = uiViewContextAnchor.split('.').reduce((anchor, x) => anchor.parent, context);\n      uiViewContextAnchor = anchorState.name;\n    } else if (uiViewContextAnchor === '.') {\n      uiViewContextAnchor = context.name;\n    }\n\n    return { uiViewName, uiViewContextAnchor };\n  }\n\n  /** @internal */\n  constructor(/** @internal */ private router: UIRouter) {}\n\n  /** @internal */\n  private _rootViewContext(context?: ViewContext): ViewContext {\n    return (this._rootContext = context || this._rootContext);\n  }\n  /** @internal */\n  private _viewConfigFactory(viewType: string, factory: ViewConfigFactory) {\n    this._viewConfigFactories[viewType] = factory;\n  }\n\n  createViewConfig(path: PathNode[], decl: _ViewDeclaration): ViewConfig[] {\n    const cfgFactory = this._viewConfigFactories[decl.$type];\n    if (!cfgFactory) throw new Error('ViewService: No view config factory registered for type ' + decl.$type);\n    const cfgs = cfgFactory(path, decl);\n    return isArray(cfgs) ? cfgs : [cfgs];\n  }\n\n  /**\n   * Deactivates a ViewConfig.\n   *\n   * This function deactivates a `ViewConfig`.\n   * After calling [[sync]], it will un-pair from any `ui-view` with which it is currently paired.\n   *\n   * @param viewConfig The ViewConfig view to deregister.\n   */\n  deactivateViewConfig(viewConfig: ViewConfig) {\n    trace.traceViewServiceEvent('<- Removing', viewConfig);\n    removeFrom(this._viewConfigs, viewConfig);\n  }\n\n  activateViewConfig(viewConfig: ViewConfig) {\n    trace.traceViewServiceEvent('-> Registering', <any>viewConfig);\n    this._viewConfigs.push(viewConfig);\n  }\n\n  sync() {\n    const uiViewsByFqn: TypedMap<ActiveUIView> = this._uiViews.map((uiv) => [uiv.fqn, uiv]).reduce(applyPairs, <any>{});\n\n    // Return a weighted depth value for a uiView.\n    // The depth is the nesting depth of ui-views (based on FQN; times 10,000)\n    // plus the depth of the state that is populating the uiView\n    function uiViewDepth(uiView: ActiveUIView) {\n      const stateDepth = (context: ViewContext) => (context && context.parent ? stateDepth(context.parent) + 1 : 1);\n      return uiView.fqn.split('.').length * 10000 + stateDepth(uiView.creationContext);\n    }\n\n    // Return the ViewConfig's context's depth in the context tree.\n    function viewConfigDepth(config: ViewConfig) {\n      let context: ViewContext = config.viewDecl.$context,\n        count = 0;\n      while (++count && context.parent) context = context.parent;\n      return count;\n    }\n\n    // Given a depth function, returns a compare function which can return either ascending or descending order\n    const depthCompare = curry((depthFn, posNeg, left, right) => posNeg * (depthFn(left) - depthFn(right)));\n\n    const matchingConfigPair = (uiView: ActiveUIView): ViewTuple => {\n      const matchingConfigs = this._viewConfigs.filter(ViewService.matches(uiViewsByFqn, uiView));\n      if (matchingConfigs.length > 1) {\n        // This is OK.  Child states can target a ui-view that the parent state also targets (the child wins)\n        // Sort by depth and return the match from the deepest child\n        // console.log(`Multiple matching view configs for ${uiView.fqn}`, matchingConfigs);\n        matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending\n      }\n      return { uiView, viewConfig: matchingConfigs[0] };\n    };\n\n    const configureUIView = (tuple: ViewTuple) => {\n      // If a parent ui-view is reconfigured, it could destroy child ui-views.\n      // Before configuring a child ui-view, make sure it's still in the active uiViews array.\n      if (this._uiViews.indexOf(tuple.uiView) !== -1) tuple.uiView.configUpdated(tuple.viewConfig);\n    };\n\n    // Sort views by FQN and state depth. Process uiviews nearest the root first.\n    const uiViewTuples = this._uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair);\n    const matchedViewConfigs = uiViewTuples.map((tuple) => tuple.viewConfig);\n    const unmatchedConfigTuples = this._viewConfigs\n      .filter((config) => !inArray(matchedViewConfigs, config))\n      .map((viewConfig) => ({ uiView: undefined, viewConfig }));\n\n    uiViewTuples.forEach(configureUIView);\n\n    const allTuples: ViewTuple[] = uiViewTuples.concat(unmatchedConfigTuples);\n    this._listeners.forEach((cb) => cb(allTuples));\n    trace.traceViewSync(allTuples);\n  }\n\n  /**\n   * Registers a `ui-view` component\n   *\n   * When a `ui-view` component is created, it uses this method to register itself.\n   * After registration the [[sync]] method is used to ensure all `ui-view` are configured with the proper [[ViewConfig]].\n   *\n   * Note: the `ui-view` component uses the `ViewConfig` to determine what view should be loaded inside the `ui-view`,\n   * and what the view's state context is.\n   *\n   * Note: There is no corresponding `deregisterUIView`.\n   *       A `ui-view` should hang on to the return value of `registerUIView` and invoke it to deregister itself.\n   *\n   * @param uiView The metadata for a UIView\n   * @return a de-registration function used when the view is destroyed.\n   */\n  registerUIView(uiView: ActiveUIView) {\n    trace.traceViewServiceUIViewEvent('-> Registering', uiView);\n    const uiViews = this._uiViews;\n    const fqnAndTypeMatches = (uiv: ActiveUIView) => uiv.fqn === uiView.fqn && uiv.$type === uiView.$type;\n    if (uiViews.filter(fqnAndTypeMatches).length)\n      trace.traceViewServiceUIViewEvent('!!!! duplicate uiView named:', uiView);\n\n    uiViews.push(uiView);\n    this.sync();\n\n    return () => {\n      const idx = uiViews.indexOf(uiView);\n      if (idx === -1) {\n        trace.traceViewServiceUIViewEvent('Tried removing non-registered uiView', uiView);\n        return;\n      }\n      trace.traceViewServiceUIViewEvent('<- Deregistering', uiView);\n      removeFrom(uiViews)(uiView);\n    };\n  }\n\n  /**\n   * Returns the list of views currently available on the page, by fully-qualified name.\n   *\n   * @return {Array} Returns an array of fully-qualified view names.\n   */\n  available() {\n    return this._uiViews.map(prop('fqn'));\n  }\n\n  /**\n   * Returns the list of views on the page containing loaded content.\n   *\n   * @return {Array} Returns an array of fully-qualified view names.\n   */\n  active() {\n    return this._uiViews.filter(prop('$config')).map(prop('name'));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}