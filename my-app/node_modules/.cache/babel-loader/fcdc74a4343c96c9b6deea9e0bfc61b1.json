{"ast":null,"code":"import { extend, assertPredicate, isFunction, isArray, isInjectable } from '../common/index'; // globally available injectables\n\nvar globals = {};\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/gm;\nvar ARGUMENT_NAMES = /([^\\s,]+)/g;\n/**\n * A basic angular1-like injector api\n *\n * This object implements four methods similar to the\n * [angular 1 dependency injector](https://docs.angularjs.org/api/auto/service/$injector)\n *\n * UI-Router evolved from an angular 1 library to a framework agnostic library.\n * However, some of the `@uirouter/core` code uses these ng1 style APIs to support ng1 style dependency injection.\n *\n * This object provides a naive implementation of a globally scoped dependency injection system.\n * It supports the following DI approaches:\n *\n * ### Function parameter names\n *\n * A function's `.toString()` is called, and the parameter names are parsed.\n * This only works when the parameter names aren't \"mangled\" by a minifier such as UglifyJS.\n *\n * ```js\n * function injectedFunction(FooService, BarService) {\n *   // FooService and BarService are injected\n * }\n * ```\n *\n * ### Function annotation\n *\n * A function may be annotated with an array of dependency names as the `$inject` property.\n *\n * ```js\n * injectedFunction.$inject = [ 'FooService', 'BarService' ];\n * function injectedFunction(fs, bs) {\n *   // FooService and BarService are injected as fs and bs parameters\n * }\n * ```\n *\n * ### Array notation\n *\n * An array provides the names of the dependencies to inject (as strings).\n * The function is the last element of the array.\n *\n * ```js\n * [ 'FooService', 'BarService', function (fs, bs) {\n *   // FooService and BarService are injected as fs and bs parameters\n * }]\n * ```\n *\n * @type {$InjectorLike}\n */\n\nexport var $injector = {\n  /** Gets an object from DI based on a string token */\n  get: function (name) {\n    return globals[name];\n  },\n\n  /** Returns true if an object named `name` exists in global DI */\n  has: function (name) {\n    return $injector.get(name) != null;\n  },\n\n  /**\n   * Injects a function\n   *\n   * @param fn the function to inject\n   * @param context the function's `this` binding\n   * @param locals An object with additional DI tokens and values, such as `{ someToken: { foo: 1 } }`\n   */\n  invoke: function (fn, context, locals) {\n    var all = extend({}, globals, locals || {});\n    var params = $injector.annotate(fn);\n    var ensureExist = assertPredicate(function (key) {\n      return all.hasOwnProperty(key);\n    }, function (key) {\n      return \"DI can't find injectable: '\" + key + \"'\";\n    });\n    var args = params.filter(ensureExist).map(function (x) {\n      return all[x];\n    });\n    if (isFunction(fn)) return fn.apply(context, args);else return fn.slice(-1)[0].apply(context, args);\n  },\n\n  /**\n   * Returns a function's dependencies\n   *\n   * Analyzes a function (or array) and returns an array of DI tokens that the function requires.\n   * @return an array of `string`s\n   */\n  annotate: function (fn) {\n    if (!isInjectable(fn)) throw new Error(\"Not an injectable function: \" + fn);\n    if (fn && fn.$inject) return fn.$inject;\n    if (isArray(fn)) return fn.slice(0, -1);\n    var fnStr = fn.toString().replace(STRIP_COMMENTS, '');\n    var result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n    return result || [];\n  }\n};","map":{"version":3,"mappings":"AAAA,SACEA,MADF,EAEEC,eAFF,EAGEC,UAHF,EAIEC,OAJF,EAKEC,YALF,QAQO,iBARP,C,CAUA;;AACA,IAAMC,OAAO,GAAG,EAAhB;AACA,IAAMC,cAAc,GAAG,kCAAvB;AACA,IAAMC,cAAc,GAAG,YAAvB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA,OAAO,IAAMC,SAAS,GAAG;EACvB;EACAC,GAAG,EAAE,UAACC,IAAD,EAAK;IAAK,cAAO,CAACA,IAAD,CAAP;EAAa,CAFL;;EAIvB;EACAC,GAAG,EAAE,UAACD,IAAD,EAAK;IAAK,gBAAS,CAACD,GAAV,CAAcC,IAAd,KAAuB,IAAvB;EAA2B,CALnB;;EAOvB;;;;;;;EAOAE,MAAM,EAAE,UAACC,EAAD,EAAkBC,OAAlB,EAA4BC,MAA5B,EAAmC;IACzC,IAAMC,GAAG,GAAGhB,MAAM,CAAC,EAAD,EAAKK,OAAL,EAAcU,MAAM,IAAI,EAAxB,CAAlB;IACA,IAAME,MAAM,GAAGT,SAAS,CAACU,QAAV,CAAmBL,EAAnB,CAAf;IACA,IAAMM,WAAW,GAAGlB,eAAe,CACjC,UAACmB,GAAD,EAAY;MAAK,UAAG,CAACC,cAAJ,CAAmBD,GAAnB;IAAuB,CADP,EAEjC,UAACA,GAAD,EAAI;MAAK,uCAA8BA,GAA9B,GAAiC,GAAjC;IAAoC,CAFZ,CAAnC;IAIA,IAAME,IAAI,GAAGL,MAAM,CAACM,MAAP,CAAcJ,WAAd,EAA2BK,GAA3B,CAA+B,UAACC,CAAD,EAAE;MAAK,UAAG,CAACA,CAAD,CAAH;IAAM,CAA5C,CAAb;IACA,IAAIvB,UAAU,CAACW,EAAD,CAAd,EAAoB,OAAOA,EAAE,CAACa,KAAH,CAASZ,OAAT,EAAkBQ,IAAlB,CAAP,CAApB,KACK,OAAQT,EAAY,CAACc,KAAb,CAAmB,CAAC,CAApB,EAAuB,CAAvB,EAA0BD,KAA1B,CAAgCZ,OAAhC,EAAyCQ,IAAzC,CAAR;EACN,CAxBsB;;EA0BvB;;;;;;EAMAJ,QAAQ,EAAE,UAACL,EAAD,EAAgB;IACxB,IAAI,CAACT,YAAY,CAACS,EAAD,CAAjB,EAAuB,MAAM,IAAIe,KAAJ,CAAU,iCAA+Bf,EAAzC,CAAN;IACvB,IAAIA,EAAE,IAAKA,EAAU,CAACgB,OAAtB,EAA+B,OAAQhB,EAAU,CAACgB,OAAnB;IAC/B,IAAI1B,OAAO,CAACU,EAAD,CAAX,EAAiB,OAAOA,EAAE,CAACc,KAAH,CAAS,CAAT,EAAY,CAAC,CAAb,CAAP;IACjB,IAAMG,KAAK,GAAGjB,EAAE,CAACkB,QAAH,GAAcC,OAAd,CAAsB1B,cAAtB,EAAsC,EAAtC,CAAd;IACA,IAAM2B,MAAM,GAAGH,KAAK,CAACH,KAAN,CAAYG,KAAK,CAACI,OAAN,CAAc,GAAd,IAAqB,CAAjC,EAAoCJ,KAAK,CAACI,OAAN,CAAc,GAAd,CAApC,EAAwDC,KAAxD,CAA8D5B,cAA9D,CAAf;IACA,OAAO0B,MAAM,IAAI,EAAjB;EACD;AAvCsB,CAAlB","names":["extend","assertPredicate","isFunction","isArray","isInjectable","globals","STRIP_COMMENTS","ARGUMENT_NAMES","$injector","get","name","has","invoke","fn","context","locals","all","params","annotate","ensureExist","key","hasOwnProperty","args","filter","map","x","apply","slice","Error","$inject","fnStr","toString","replace","result","indexOf","match"],"sources":["C:\\Users\\huang\\node_modules\\@uirouter\\core\\lib-esm\\vanilla\\@uirouter\\core\\vanilla\\injector.ts"],"sourcesContent":["import {\n  extend,\n  assertPredicate,\n  isFunction,\n  isArray,\n  isInjectable,\n  $InjectorLike,\n  IInjectable,\n} from '../common/index';\n\n// globally available injectables\nconst globals = {};\nconst STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/gm;\nconst ARGUMENT_NAMES = /([^\\s,]+)/g;\n\n/**\n * A basic angular1-like injector api\n *\n * This object implements four methods similar to the\n * [angular 1 dependency injector](https://docs.angularjs.org/api/auto/service/$injector)\n *\n * UI-Router evolved from an angular 1 library to a framework agnostic library.\n * However, some of the `@uirouter/core` code uses these ng1 style APIs to support ng1 style dependency injection.\n *\n * This object provides a naive implementation of a globally scoped dependency injection system.\n * It supports the following DI approaches:\n *\n * ### Function parameter names\n *\n * A function's `.toString()` is called, and the parameter names are parsed.\n * This only works when the parameter names aren't \"mangled\" by a minifier such as UglifyJS.\n *\n * ```js\n * function injectedFunction(FooService, BarService) {\n *   // FooService and BarService are injected\n * }\n * ```\n *\n * ### Function annotation\n *\n * A function may be annotated with an array of dependency names as the `$inject` property.\n *\n * ```js\n * injectedFunction.$inject = [ 'FooService', 'BarService' ];\n * function injectedFunction(fs, bs) {\n *   // FooService and BarService are injected as fs and bs parameters\n * }\n * ```\n *\n * ### Array notation\n *\n * An array provides the names of the dependencies to inject (as strings).\n * The function is the last element of the array.\n *\n * ```js\n * [ 'FooService', 'BarService', function (fs, bs) {\n *   // FooService and BarService are injected as fs and bs parameters\n * }]\n * ```\n *\n * @type {$InjectorLike}\n */\nexport const $injector = {\n  /** Gets an object from DI based on a string token */\n  get: (name) => globals[name],\n\n  /** Returns true if an object named `name` exists in global DI */\n  has: (name) => $injector.get(name) != null,\n\n  /**\n   * Injects a function\n   *\n   * @param fn the function to inject\n   * @param context the function's `this` binding\n   * @param locals An object with additional DI tokens and values, such as `{ someToken: { foo: 1 } }`\n   */\n  invoke: (fn: IInjectable, context?, locals?) => {\n    const all = extend({}, globals, locals || {});\n    const params = $injector.annotate(fn);\n    const ensureExist = assertPredicate(\n      (key: string) => all.hasOwnProperty(key),\n      (key) => `DI can't find injectable: '${key}'`\n    );\n    const args = params.filter(ensureExist).map((x) => all[x]);\n    if (isFunction(fn)) return fn.apply(context, args);\n    else return (fn as any[]).slice(-1)[0].apply(context, args);\n  },\n\n  /**\n   * Returns a function's dependencies\n   *\n   * Analyzes a function (or array) and returns an array of DI tokens that the function requires.\n   * @return an array of `string`s\n   */\n  annotate: (fn: IInjectable): any[] => {\n    if (!isInjectable(fn)) throw new Error(`Not an injectable function: ${fn}`);\n    if (fn && (fn as any).$inject) return (fn as any).$inject;\n    if (isArray(fn)) return fn.slice(0, -1);\n    const fnStr = fn.toString().replace(STRIP_COMMENTS, '');\n    const result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n    return result || [];\n  },\n} as $InjectorLike;\n"]},"metadata":{},"sourceType":"module"}